// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.RESTier.Cli.TextTemplate
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\t-qiche\Documents\RESTier-CLI\RESTier.CLI\TextTemplate\AiJsFile.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class AiJsFile : AiJsFileBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("var Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (funct" +
                    "ion (ApplicationInsights) {\r\n        (function (LoggingSeverity) {\r\n            " +
                    "LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 0] = \"CRITICAL\";\r\n            Logg" +
                    "ingSeverity[LoggingSeverity[\"WARNING\"] = 1] = \"WARNING\";\r\n        })(Application" +
                    "Insights.LoggingSeverity || (ApplicationInsights.LoggingSeverity = {}));\r\n      " +
                    "  var LoggingSeverity = ApplicationInsights.LoggingSeverity;\r\n        (function " +
                    "(_InternalMessageId) {\r\n            _InternalMessageId[_InternalMessageId[\"NONUS" +
                    "RACT_BrowserDoesNotSupportLocalStorage\"] = 0] = \"NONUSRACT_BrowserDoesNotSupport" +
                    "LocalStorage\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_Bro" +
                    "wserCannotReadLocalStorage\"] = 1] = \"NONUSRACT_BrowserCannotReadLocalStorage\";\r\n" +
                    "            _InternalMessageId[_InternalMessageId[\"NONUSRACT_BrowserCannotReadSe" +
                    "ssionStorage\"] = 2] = \"NONUSRACT_BrowserCannotReadSessionStorage\";\r\n            " +
                    "_InternalMessageId[_InternalMessageId[\"NONUSRACT_BrowserCannotWriteLocalStorage\"" +
                    "] = 3] = \"NONUSRACT_BrowserCannotWriteLocalStorage\";\r\n            _InternalMessa" +
                    "geId[_InternalMessageId[\"NONUSRACT_BrowserCannotWriteSessionStorage\"] = 4] = \"NO" +
                    "NUSRACT_BrowserCannotWriteSessionStorage\";\r\n            _InternalMessageId[_Inte" +
                    "rnalMessageId[\"NONUSRACT_BrowserFailedRemovalFromLocalStorage\"] = 5] = \"NONUSRAC" +
                    "T_BrowserFailedRemovalFromLocalStorage\";\r\n            _InternalMessageId[_Intern" +
                    "alMessageId[\"NONUSRACT_BrowserFailedRemovalFromSessionStorage\"] = 6] = \"NONUSRAC" +
                    "T_BrowserFailedRemovalFromSessionStorage\";\r\n            _InternalMessageId[_Inte" +
                    "rnalMessageId[\"NONUSRACT_CannotSendEmptyTelemetry\"] = 7] = \"NONUSRACT_CannotSend" +
                    "EmptyTelemetry\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_C" +
                    "lientPerformanceMathError\"] = 8] = \"NONUSRACT_ClientPerformanceMathError\";\r\n    " +
                    "        _InternalMessageId[_InternalMessageId[\"NONUSRACT_ErrorParsingAISessionCo" +
                    "okie\"] = 9] = \"NONUSRACT_ErrorParsingAISessionCookie\";\r\n            _InternalMes" +
                    "sageId[_InternalMessageId[\"NONUSRACT_ErrorPVCalc\"] = 10] = \"NONUSRACT_ErrorPVCal" +
                    "c\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_ExceptionWhile" +
                    "LoggingError\"] = 11] = \"NONUSRACT_ExceptionWhileLoggingError\";\r\n            _Int" +
                    "ernalMessageId[_InternalMessageId[\"NONUSRACT_FailedAddingTelemetryToBuffer\"] = 1" +
                    "2] = \"NONUSRACT_FailedAddingTelemetryToBuffer\";\r\n            _InternalMessageId[" +
                    "_InternalMessageId[\"NONUSRACT_FailedMonitorAjaxAbort\"] = 13] = \"NONUSRACT_Failed" +
                    "MonitorAjaxAbort\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT" +
                    "_FailedMonitorAjaxDur\"] = 14] = \"NONUSRACT_FailedMonitorAjaxDur\";\r\n            _" +
                    "InternalMessageId[_InternalMessageId[\"NONUSRACT_FailedMonitorAjaxOpen\"] = 15] = " +
                    "\"NONUSRACT_FailedMonitorAjaxOpen\";\r\n            _InternalMessageId[_InternalMess" +
                    "ageId[\"NONUSRACT_FailedMonitorAjaxRSC\"] = 16] = \"NONUSRACT_FailedMonitorAjaxRSC\"" +
                    ";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_FailedMonitorAja" +
                    "xSend\"] = 17] = \"NONUSRACT_FailedMonitorAjaxSend\";\r\n            _InternalMessage" +
                    "Id[_InternalMessageId[\"NONUSRACT_FailedToAddHandlerForOnBeforeUnload\"] = 18] = \"" +
                    "NONUSRACT_FailedToAddHandlerForOnBeforeUnload\";\r\n            _InternalMessageId[" +
                    "_InternalMessageId[\"NONUSRACT_FailedToSendQueuedTelemetry\"] = 19] = \"NONUSRACT_F" +
                    "ailedToSendQueuedTelemetry\";\r\n            _InternalMessageId[_InternalMessageId[" +
                    "\"NONUSRACT_FailedToReportDataLoss\"] = 20] = \"NONUSRACT_FailedToReportDataLoss\";\r" +
                    "\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_FlushFailed\"] = 21" +
                    "] = \"NONUSRACT_FlushFailed\";\r\n            _InternalMessageId[_InternalMessageId[" +
                    "\"NONUSRACT_MessageLimitPerPVExceeded\"] = 22] = \"NONUSRACT_MessageLimitPerPVExcee" +
                    "ded\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_MissingRequi" +
                    "redFieldSpecification\"] = 23] = \"NONUSRACT_MissingRequiredFieldSpecification\";\r\n" +
                    "            _InternalMessageId[_InternalMessageId[\"NONUSRACT_NavigationTimingNot" +
                    "Supported\"] = 24] = \"NONUSRACT_NavigationTimingNotSupported\";\r\n            _Inte" +
                    "rnalMessageId[_InternalMessageId[\"NONUSRACT_OnError\"] = 25] = \"NONUSRACT_OnError" +
                    "\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_SessionRenewalD" +
                    "ateIsZero\"] = 26] = \"NONUSRACT_SessionRenewalDateIsZero\";\r\n            _Internal" +
                    "MessageId[_InternalMessageId[\"NONUSRACT_SenderNotInitialized\"] = 27] = \"NONUSRAC" +
                    "T_SenderNotInitialized\";\r\n            _InternalMessageId[_InternalMessageId[\"NON" +
                    "USRACT_StartTrackEventFailed\"] = 28] = \"NONUSRACT_StartTrackEventFailed\";\r\n     " +
                    "       _InternalMessageId[_InternalMessageId[\"NONUSRACT_StopTrackEventFailed\"] =" +
                    " 29] = \"NONUSRACT_StopTrackEventFailed\";\r\n            _InternalMessageId[_Intern" +
                    "alMessageId[\"NONUSRACT_StartTrackFailed\"] = 30] = \"NONUSRACT_StartTrackFailed\";\r" +
                    "\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_StopTrackFailed\"] " +
                    "= 31] = \"NONUSRACT_StopTrackFailed\";\r\n            _InternalMessageId[_InternalMe" +
                    "ssageId[\"NONUSRACT_TelemetrySampledAndNotSent\"] = 32] = \"NONUSRACT_TelemetrySamp" +
                    "ledAndNotSent\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_Tr" +
                    "ackEventFailed\"] = 33] = \"NONUSRACT_TrackEventFailed\";\r\n            _InternalMes" +
                    "sageId[_InternalMessageId[\"NONUSRACT_TrackExceptionFailed\"] = 34] = \"NONUSRACT_T" +
                    "rackExceptionFailed\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSR" +
                    "ACT_TrackMetricFailed\"] = 35] = \"NONUSRACT_TrackMetricFailed\";\r\n            _Int" +
                    "ernalMessageId[_InternalMessageId[\"NONUSRACT_TrackPVFailed\"] = 36] = \"NONUSRACT_" +
                    "TrackPVFailed\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_Tr" +
                    "ackPVFailedCalc\"] = 37] = \"NONUSRACT_TrackPVFailedCalc\";\r\n            _InternalM" +
                    "essageId[_InternalMessageId[\"NONUSRACT_TrackTraceFailed\"] = 38] = \"NONUSRACT_Tra" +
                    "ckTraceFailed\";\r\n            _InternalMessageId[_InternalMessageId[\"NONUSRACT_Tr" +
                    "ansmissionFailed\"] = 39] = \"NONUSRACT_TransmissionFailed\";\r\n            _Interna" +
                    "lMessageId[_InternalMessageId[\"NONUSRACT_FailToSetStorageBuffer\"] = 40] = \"NONUS" +
                    "RACT_FailToSetStorageBuffer\";\r\n            _InternalMessageId[_InternalMessageId" +
                    "[\"NONUSRACT_FailToRestoreStorageBuffer\"] = 41] = \"NONUSRACT_FailToRestoreStorage" +
                    "Buffer\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_CannotSerial" +
                    "izeObject\"] = 42] = \"USRACT_CannotSerializeObject\";\r\n            _InternalMessag" +
                    "eId[_InternalMessageId[\"USRACT_CannotSerializeObjectNonSerializable\"] = 43] = \"U" +
                    "SRACT_CannotSerializeObjectNonSerializable\";\r\n            _InternalMessageId[_In" +
                    "ternalMessageId[\"USRACT_CircularReferenceDetected\"] = 44] = \"USRACT_CircularRefe" +
                    "renceDetected\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_Clear" +
                    "AuthContextFailed\"] = 45] = \"USRACT_ClearAuthContextFailed\";\r\n            _Inter" +
                    "nalMessageId[_InternalMessageId[\"USRACT_ExceptionTruncated\"] = 46] = \"USRACT_Exc" +
                    "eptionTruncated\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_Ill" +
                    "egalCharsInName\"] = 47] = \"USRACT_IllegalCharsInName\";\r\n            _InternalMes" +
                    "sageId[_InternalMessageId[\"USRACT_ItemNotInArray\"] = 48] = \"USRACT_ItemNotInArra" +
                    "y\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_MaxAjaxPerPVExcee" +
                    "ded\"] = 49] = \"USRACT_MaxAjaxPerPVExceeded\";\r\n            _InternalMessageId[_In" +
                    "ternalMessageId[\"USRACT_MessageTruncated\"] = 50] = \"USRACT_MessageTruncated\";\r\n " +
                    "           _InternalMessageId[_InternalMessageId[\"USRACT_NameTooLong\"] = 51] = \"" +
                    "USRACT_NameTooLong\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_" +
                    "SampleRateOutOfRange\"] = 52] = \"USRACT_SampleRateOutOfRange\";\r\n            _Inte" +
                    "rnalMessageId[_InternalMessageId[\"USRACT_SetAuthContextFailed\"] = 53] = \"USRACT_" +
                    "SetAuthContextFailed\";\r\n            _InternalMessageId[_InternalMessageId[\"USRAC" +
                    "T_SetAuthContextFailedAccountName\"] = 54] = \"USRACT_SetAuthContextFailedAccountN" +
                    "ame\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_StringValueTooL" +
                    "ong\"] = 55] = \"USRACT_StringValueTooLong\";\r\n            _InternalMessageId[_Inte" +
                    "rnalMessageId[\"USRACT_StartCalledMoreThanOnce\"] = 56] = \"USRACT_StartCalledMoreT" +
                    "hanOnce\";\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_StopCalledW" +
                    "ithoutStart\"] = 57] = \"USRACT_StopCalledWithoutStart\";\r\n            _InternalMes" +
                    "sageId[_InternalMessageId[\"USRACT_TelemetryInitializerFailed\"] = 58] = \"USRACT_T" +
                    "elemetryInitializerFailed\";\r\n            _InternalMessageId[_InternalMessageId[\"" +
                    "USRACT_TrackArgumentsNotSpecified\"] = 59] = \"USRACT_TrackArgumentsNotSpecified\";" +
                    "\r\n            _InternalMessageId[_InternalMessageId[\"USRACT_UrlTooLong\"] = 60] =" +
                    " \"USRACT_UrlTooLong\";\r\n        })(ApplicationInsights._InternalMessageId || (App" +
                    "licationInsights._InternalMessageId = {}));\r\n        var _InternalMessageId = Ap" +
                    "plicationInsights._InternalMessageId;\r\n        var _InternalLogMessage = (functi" +
                    "on () {\r\n            function _InternalLogMessage(msgId, msg, properties) {\r\n   " +
                    "             this.message = _InternalMessageId[msgId].toString();\r\n             " +
                    "   this.messageId = msgId;\r\n                var diagnosticText = (msg ? \" messag" +
                    "e:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n                 " +
                    "   (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.str" +
                    "ingify(properties)) : \"\");\r\n                this.message += diagnosticText;\r\n   " +
                    "         }\r\n            _InternalLogMessage.sanitizeDiagnosticText = function (t" +
                    "ext) {\r\n                return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n         " +
                    "   };\r\n            return _InternalLogMessage;\r\n        })();\r\n        Applicati" +
                    "onInsights._InternalLogMessage = _InternalLogMessage;\r\n        var _InternalLogg" +
                    "ing = (function () {\r\n            function _InternalLogging() {\r\n            }\r\n" +
                    "            _InternalLogging.throwInternalNonUserActionable = function (severity" +
                    ", message) {\r\n                if (this.enableDebugExceptions()) {\r\n             " +
                    "       throw message;\r\n                }\r\n                else {\r\n              " +
                    "      if (typeof (message) !== \"undefined\" && !!message) {\r\n                    " +
                    "    if (typeof (message.message) !== \"undefined\") {\r\n                           " +
                    " message.message = this.AiNonUserActionablePrefix + message.message;\r\n          " +
                    "                  if (this.verboseLogging()) {\r\n                                " +
                    "this.warnToConsole(message.message);\r\n                            }\r\n           " +
                    "                 this.logInternalMessage(severity, message);\r\n                  " +
                    "      }\r\n                    }\r\n                }\r\n            };\r\n            _" +
                    "InternalLogging.throwInternalUserActionable = function (severity, message) {\r\n  " +
                    "              if (this.enableDebugExceptions()) {\r\n                    throw mes" +
                    "sage;\r\n                }\r\n                else {\r\n                    if (typeof" +
                    " (message) !== \"undefined\" && !!message) {\r\n                        if (typeof (" +
                    "message.message) !== \"undefined\") {\r\n                            message.message" +
                    " = this.AiUserActionablePrefix + message.message;\r\n                            t" +
                    "his.warnToConsole(message.message);\r\n                            this.logInterna" +
                    "lMessage(severity, message);\r\n                        }\r\n                    }\r\n" +
                    "                }\r\n            };\r\n            _InternalLogging.warnToConsole = " +
                    "function (message) {\r\n                if (typeof console !== \"undefined\" && !!co" +
                    "nsole) {\r\n                    if (typeof console.warn === \"function\") {\r\n       " +
                    "                 console.warn(message);\r\n                    }\r\n                " +
                    "    else if (typeof console.log === \"function\") {\r\n                        conso" +
                    "le.log(message);\r\n                    }\r\n                }\r\n            };\r\n    " +
                    "        _InternalLogging.resetInternalMessageCount = function () {\r\n            " +
                    "    this._messageCount = 0;\r\n            };\r\n            _InternalLogging.clearI" +
                    "nternalMessageLoggedTypes = function () {\r\n                if (ApplicationInsigh" +
                    "ts.Util.canUseSessionStorage()) {\r\n                    var sessionStorageKeys = " +
                    "ApplicationInsights.Util.getSessionStorageKeys();\r\n                    for (var " +
                    "i = 0; i < sessionStorageKeys.length; i++) {\r\n                        if (sessio" +
                    "nStorageKeys[i].indexOf(_InternalLogging.AIInternalMessagePrefix) === 0) {\r\n    " +
                    "                        ApplicationInsights.Util.removeSessionStorage(sessionSto" +
                    "rageKeys[i]);\r\n                        }\r\n                    }\r\n               " +
                    " }\r\n            };\r\n            _InternalLogging.setMaxInternalMessageLimit = fu" +
                    "nction (limit) {\r\n                if (!limit) {\r\n                    throw new E" +
                    "rror(\'limit cannot be undefined.\');\r\n                }\r\n                this.MAX" +
                    "_INTERNAL_MESSAGE_LIMIT = limit;\r\n            };\r\n            _InternalLogging.l" +
                    "ogInternalMessage = function (severity, message) {\r\n                if (this._ar" +
                    "eInternalMessagesThrottled()) {\r\n                    return;\r\n                }\r" +
                    "\n                var logMessage = true;\r\n                if (ApplicationInsights" +
                    ".Util.canUseSessionStorage()) {\r\n                    var storageMessageKey = _In" +
                    "ternalLogging.AIInternalMessagePrefix + _InternalMessageId[message.messageId];\r\n" +
                    "                    var internalMessageTypeLogRecord = ApplicationInsights.Util." +
                    "getSessionStorage(storageMessageKey);\r\n                    if (internalMessageTy" +
                    "peLogRecord) {\r\n                        logMessage = false;\r\n                   " +
                    " }\r\n                    else {\r\n                        ApplicationInsights.Util" +
                    ".setSessionStorage(storageMessageKey, \"1\");\r\n                    }\r\n            " +
                    "    }\r\n                if (logMessage) {\r\n                    if (this.verboseLo" +
                    "gging() || severity === LoggingSeverity.CRITICAL) {\r\n                        thi" +
                    "s.queue.push(message);\r\n                        this._messageCount++;\r\n         " +
                    "           }\r\n                    if (this._messageCount == this.MAX_INTERNAL_ME" +
                    "SSAGE_LIMIT) {\r\n                        var throttleLimitMessage = \"Internal eve" +
                    "nts throttle limit per PageView reached for this app.\";\r\n                       " +
                    " var throttleMessage = new _InternalLogMessage(_InternalMessageId.NONUSRACT_Mess" +
                    "ageLimitPerPVExceeded, throttleLimitMessage);\r\n                        this.queu" +
                    "e.push(throttleMessage);\r\n                        this.warnToConsole(throttleLim" +
                    "itMessage);\r\n                    }\r\n                }\r\n            };\r\n         " +
                    "   _InternalLogging._areInternalMessagesThrottled = function () {\r\n             " +
                    "   return this._messageCount >= this.MAX_INTERNAL_MESSAGE_LIMIT;\r\n            };" +
                    "\r\n            _InternalLogging.AiUserActionablePrefix = \"AI: \";\r\n            _In" +
                    "ternalLogging.AIInternalMessagePrefix = \"AITR_\";\r\n            _InternalLogging.A" +
                    "iNonUserActionablePrefix = \"AI (Internal): \";\r\n            _InternalLogging.enab" +
                    "leDebugExceptions = function () { return false; };\r\n            _InternalLogging" +
                    ".verboseLogging = function () { return false; };\r\n            _InternalLogging.q" +
                    "ueue = [];\r\n            _InternalLogging.MAX_INTERNAL_MESSAGE_LIMIT = 25;\r\n     " +
                    "       _InternalLogging._messageCount = 0;\r\n            return _InternalLogging;" +
                    "\r\n        })();\r\n        ApplicationInsights._InternalLogging = _InternalLogging" +
                    ";\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsoft.Appl" +
                    "icationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path" +
                    "=\"./logging.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Application" +
                    "Insights;\r\n    (function (ApplicationInsights) {\r\n        var StorageType;\r\n    " +
                    "    (function (StorageType) {\r\n            StorageType[StorageType[\"LocalStorage" +
                    "\"] = 0] = \"LocalStorage\";\r\n            StorageType[StorageType[\"SessionStorage\"]" +
                    " = 1] = \"SessionStorage\";\r\n        })(StorageType || (StorageType = {}));\r\n     " +
                    "   var Util = (function () {\r\n            function Util() {\r\n            }\r\n    " +
                    "        Util._getLocalStorageObject = function () {\r\n                return Util" +
                    "._getVerifiedStorageObject(StorageType.LocalStorage);\r\n            };\r\n         " +
                    "   Util._getVerifiedStorageObject = function (storageType) {\r\n                va" +
                    "r storage = null;\r\n                var fail;\r\n                var uid;\r\n        " +
                    "        try {\r\n                    uid = new Date;\r\n                    storage " +
                    "= storageType === StorageType.LocalStorage ? window.localStorage : window.sessio" +
                    "nStorage;\r\n                    storage.setItem(uid, uid);\r\n                    f" +
                    "ail = storage.getItem(uid) != uid;\r\n                    storage.removeItem(uid);" +
                    "\r\n                    if (fail) {\r\n                        storage = null;\r\n    " +
                    "                }\r\n                }\r\n                catch (exception) {\r\n     " +
                    "               storage = null;\r\n                }\r\n                return storag" +
                    "e;\r\n            };\r\n            Util.canUseLocalStorage = function () {\r\n       " +
                    "         return !!Util._getLocalStorageObject();\r\n            };\r\n            Ut" +
                    "il.getStorage = function (name) {\r\n                var storage = Util._getLocalS" +
                    "torageObject();\r\n                if (storage !== null) {\r\n                    tr" +
                    "y {\r\n                        return storage.getItem(name);\r\n                    " +
                    "}\r\n                    catch (e) {\r\n                        var message = new Ap" +
                    "plicationInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NON" +
                    "USRACT_BrowserCannotReadLocalStorage, \"Browser failed read of local storage. \" +" +
                    " Util.getExceptionName(e), { exception: Util.dump(e) });\r\n                      " +
                    "  ApplicationInsights._InternalLogging.throwInternalNonUserActionable(Applicatio" +
                    "nInsights.LoggingSeverity.WARNING, message);\r\n                    }\r\n           " +
                    "     }\r\n                return null;\r\n            };\r\n            Util.setStorag" +
                    "e = function (name, data) {\r\n                var storage = Util._getLocalStorage" +
                    "Object();\r\n                if (storage !== null) {\r\n                    try {\r\n " +
                    "                       storage.setItem(name, data);\r\n                        ret" +
                    "urn true;\r\n                    }\r\n                    catch (e) {\r\n             " +
                    "           var message = new ApplicationInsights._InternalLogMessage(Application" +
                    "Insights._InternalMessageId.NONUSRACT_BrowserCannotWriteLocalStorage, \"Browser f" +
                    "ailed write to local storage. \" + Util.getExceptionName(e), { exception: Util.du" +
                    "mp(e) });\r\n                        ApplicationInsights._InternalLogging.throwInt" +
                    "ernalNonUserActionable(ApplicationInsights.LoggingSeverity.WARNING, message);\r\n " +
                    "                   }\r\n                }\r\n                return false;\r\n        " +
                    "    };\r\n            Util.removeStorage = function (name) {\r\n                var " +
                    "storage = Util._getLocalStorageObject();\r\n                if (storage !== null) " +
                    "{\r\n                    try {\r\n                        storage.removeItem(name);\r" +
                    "\n                        return true;\r\n                    }\r\n                  " +
                    "  catch (e) {\r\n                        var message = new ApplicationInsights._In" +
                    "ternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_BrowserFailedR" +
                    "emovalFromLocalStorage, \"Browser failed removal of local storage item. \" + Util." +
                    "getExceptionName(e), { exception: Util.dump(e) });\r\n                        Appl" +
                    "icationInsights._InternalLogging.throwInternalNonUserActionable(ApplicationInsig" +
                    "hts.LoggingSeverity.WARNING, message);\r\n                    }\r\n                }" +
                    "\r\n                return false;\r\n            };\r\n            Util._getSessionSto" +
                    "rageObject = function () {\r\n                return Util._getVerifiedStorageObjec" +
                    "t(StorageType.SessionStorage);\r\n            };\r\n            Util.canUseSessionSt" +
                    "orage = function () {\r\n                return !!Util._getSessionStorageObject();" +
                    "\r\n            };\r\n            Util.getSessionStorageKeys = function () {\r\n      " +
                    "          var keys = [];\r\n                if (Util.canUseSessionStorage()) {\r\n  " +
                    "                  for (var key in window.sessionStorage) {\r\n                    " +
                    "    keys.push(key);\r\n                    }\r\n                }\r\n                r" +
                    "eturn keys;\r\n            };\r\n            Util.getSessionStorage = function (name" +
                    ") {\r\n                var storage = Util._getSessionStorageObject();\r\n           " +
                    "     if (storage !== null) {\r\n                    try {\r\n                       " +
                    " return storage.getItem(name);\r\n                    }\r\n                    catch" +
                    " (e) {\r\n                        var message = new ApplicationInsights._InternalL" +
                    "ogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_BrowserCannotReadSess" +
                    "ionStorage, \"Browser failed read of session storage. \" + Util.getExceptionName(e" +
                    "), { exception: Util.dump(e) });\r\n                        ApplicationInsights._I" +
                    "nternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverit" +
                    "y.CRITICAL, message);\r\n                    }\r\n                }\r\n               " +
                    " return null;\r\n            };\r\n            Util.setSessionStorage = function (na" +
                    "me, data) {\r\n                var storage = Util._getSessionStorageObject();\r\n   " +
                    "             if (storage !== null) {\r\n                    try {\r\n               " +
                    "         storage.setItem(name, data);\r\n                        return true;\r\n   " +
                    "                 }\r\n                    catch (e) {\r\n                        var" +
                    " message = new ApplicationInsights._InternalLogMessage(ApplicationInsights._Inte" +
                    "rnalMessageId.NONUSRACT_BrowserCannotWriteSessionStorage, \"Browser failed write " +
                    "to session storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r" +
                    "\n                        ApplicationInsights._InternalLogging.throwInternalNonUs" +
                    "erActionable(ApplicationInsights.LoggingSeverity.CRITICAL, message);\r\n          " +
                    "          }\r\n                }\r\n                return false;\r\n            };\r\n " +
                    "           Util.removeSessionStorage = function (name) {\r\n                var st" +
                    "orage = Util._getSessionStorageObject();\r\n                if (storage !== null) " +
                    "{\r\n                    try {\r\n                        storage.removeItem(name);\r" +
                    "\n                        return true;\r\n                    }\r\n                  " +
                    "  catch (e) {\r\n                        var message = new ApplicationInsights._In" +
                    "ternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_BrowserFailedR" +
                    "emovalFromSessionStorage, \"Browser failed removal of session storage item. \" + U" +
                    "til.getExceptionName(e), { exception: Util.dump(e) });\r\n                        " +
                    "ApplicationInsights._InternalLogging.throwInternalNonUserActionable(ApplicationI" +
                    "nsights.LoggingSeverity.CRITICAL, message);\r\n                    }\r\n            " +
                    "    }\r\n                return false;\r\n            };\r\n            Util.setCookie" +
                    " = function (name, value, domain) {\r\n                var domainAttrib = \"\";\r\n   " +
                    "             if (domain) {\r\n                    domainAttrib = \";domain=\" + doma" +
                    "in;\r\n                }\r\n                Util.document.cookie = name + \"=\" + valu" +
                    "e + domainAttrib + \";path=/\";\r\n            };\r\n            Util.stringToBoolOrDe" +
                    "fault = function (str) {\r\n                if (!str) {\r\n                    retur" +
                    "n false;\r\n                }\r\n                return str.toString().toLowerCase()" +
                    " === \"true\";\r\n            };\r\n            Util.getCookie = function (name) {\r\n  " +
                    "              var value = \"\";\r\n                if (name && name.length) {\r\n     " +
                    "               var cookieName = name + \"=\";\r\n                    var cookies = U" +
                    "til.document.cookie.split(\";\");\r\n                    for (var i = 0; i < cookies" +
                    ".length; i++) {\r\n                        var cookie = cookies[i];\r\n             " +
                    "           cookie = Util.trim(cookie);\r\n                        if (cookie && co" +
                    "okie.indexOf(cookieName) === 0) {\r\n                            value = cookie.su" +
                    "bstring(cookieName.length, cookies[i].length);\r\n                            brea" +
                    "k;\r\n                        }\r\n                    }\r\n                }\r\n       " +
                    "         return value;\r\n            };\r\n            Util.deleteCookie = function" +
                    " (name) {\r\n                Util.document.cookie = name + \"=;path=/;expires=Thu, " +
                    "01 Jan 1970 00:00:01 GMT;\";\r\n            };\r\n            Util.trim = function (s" +
                    "tr) {\r\n                if (typeof str !== \"string\")\r\n                    return " +
                    "str;\r\n                return str.replace(/^\\s+|\\s+$/g, \"\");\r\n            };\r\n   " +
                    "         Util.newId = function () {\r\n                var base64chars = \'ABCDEFGH" +
                    "IJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\r\n                var " +
                    "result = \"\";\r\n                var random = Math.random() * 1073741824;\r\n        " +
                    "        while (random > 0) {\r\n                    var char = base64chars.charAt(" +
                    "random % 64);\r\n                    result += char;\r\n                    random =" +
                    " Math.floor(random / 64);\r\n                }\r\n                return result;\r\n  " +
                    "          };\r\n            Util.isArray = function (obj) {\r\n                retur" +
                    "n Object.prototype.toString.call(obj) === \"[object Array]\";\r\n            };\r\n   " +
                    "         Util.isError = function (obj) {\r\n                return Object.prototyp" +
                    "e.toString.call(obj) === \"[object Error]\";\r\n            };\r\n            Util.isD" +
                    "ate = function (obj) {\r\n                return Object.prototype.toString.call(ob" +
                    "j) === \"[object Date]\";\r\n            };\r\n            Util.toISOStringForIE8 = fu" +
                    "nction (date) {\r\n                if (Util.isDate(date)) {\r\n                    i" +
                    "f (Date.prototype.toISOString) {\r\n                        return date.toISOStrin" +
                    "g();\r\n                    }\r\n                    else {\r\n                       " +
                    " function pad(number) {\r\n                            var r = String(number);\r\n  " +
                    "                          if (r.length === 1) {\r\n                               " +
                    " r = \"0\" + r;\r\n                            }\r\n                            return" +
                    " r;\r\n                        }\r\n                        return date.getUTCFullYe" +
                    "ar()\r\n                            + \"-\" + pad(date.getUTCMonth() + 1)\r\n         " +
                    "                   + \"-\" + pad(date.getUTCDate())\r\n                            +" +
                    " \"T\" + pad(date.getUTCHours())\r\n                            + \":\" + pad(date.get" +
                    "UTCMinutes())\r\n                            + \":\" + pad(date.getUTCSeconds())\r\n  " +
                    "                          + \".\" + String((date.getUTCMilliseconds() / 1000).toFi" +
                    "xed(3)).slice(2, 5)\r\n                            + \"Z\";\r\n                    }\r\n" +
                    "                }\r\n            };\r\n            Util.getIEVersion = function (use" +
                    "rAgentStr) {\r\n                if (userAgentStr === void 0) { userAgentStr = null" +
                    "; }\r\n                var myNav = userAgentStr ? userAgentStr.toLowerCase() : nav" +
                    "igator.userAgent.toLowerCase();\r\n                return (myNav.indexOf(\'msie\') !" +
                    "= -1) ? parseInt(myNav.split(\'msie\')[1]) : null;\r\n            };\r\n            Ut" +
                    "il.msToTimeSpan = function (totalms) {\r\n                if (isNaN(totalms) || to" +
                    "talms < 0) {\r\n                    totalms = 0;\r\n                }\r\n             " +
                    "   var ms = \"\" + totalms % 1000;\r\n                var sec = \"\" + Math.floor(tota" +
                    "lms / 1000) % 60;\r\n                var min = \"\" + Math.floor(totalms / (1000 * 6" +
                    "0)) % 60;\r\n                var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)" +
                    ") % 24;\r\n                ms = ms.length === 1 ? \"00\" + ms : ms.length === 2 ? \"0" +
                    "\" + ms : ms;\r\n                sec = sec.length < 2 ? \"0\" + sec : sec;\r\n         " +
                    "       min = min.length < 2 ? \"0\" + min : min;\r\n                hour = hour.leng" +
                    "th < 2 ? \"0\" + hour : hour;\r\n                return hour + \":\" + min + \":\" + sec" +
                    " + \".\" + ms;\r\n            };\r\n            Util.isCrossOriginError = function (me" +
                    "ssage, url, lineNumber, columnNumber, error) {\r\n                return (message " +
                    "=== \"Script error.\" || message === \"Script error\") && error === null;\r\n         " +
                    "   };\r\n            Util.dump = function (object) {\r\n                var objectTy" +
                    "peDump = Object.prototype.toString.call(object);\r\n                var propertyVa" +
                    "lueDump = JSON.stringify(object);\r\n                if (objectTypeDump === \"[obje" +
                    "ct Error]\") {\r\n                    propertyValueDump = \"{ stack: \'\" + object.sta" +
                    "ck + \"\', message: \'\" + object.message + \"\', name: \'\" + object.name + \"\'\";\r\n     " +
                    "           }\r\n                return objectTypeDump + propertyValueDump;\r\n      " +
                    "      };\r\n            Util.getExceptionName = function (object) {\r\n             " +
                    "   var objectTypeDump = Object.prototype.toString.call(object);\r\n               " +
                    " if (objectTypeDump === \"[object Error]\") {\r\n                    return object.n" +
                    "ame;\r\n                }\r\n                return \"\";\r\n            };\r\n           " +
                    " Util.addEventHandler = function (eventName, callback) {\r\n                if (!w" +
                    "indow || typeof eventName !== \'string\' || typeof callback !== \'function\') {\r\n   " +
                    "                 return false;\r\n                }\r\n                var verbEvent" +
                    "Name = \'on\' + eventName;\r\n                if (window.addEventListener) {\r\n      " +
                    "              window.addEventListener(eventName, callback, false);\r\n            " +
                    "    }\r\n                else if (window[\"attachEvent\"]) {\r\n                    wi" +
                    "ndow[\"attachEvent\"].call(verbEventName, callback);\r\n                }\r\n         " +
                    "       else {\r\n                    return false;\r\n                }\r\n           " +
                    "     return true;\r\n            };\r\n            Util.document = typeof document !" +
                    "== \"undefined\" ? document : {};\r\n            Util.NotSpecified = \"not_specified\"" +
                    ";\r\n            return Util;\r\n        })();\r\n        ApplicationInsights.Util = U" +
                    "til;\r\n        var UrlHelper = (function () {\r\n            function UrlHelper() {" +
                    "\r\n            }\r\n            UrlHelper.parseUrl = function (url) {\r\n            " +
                    "    if (!UrlHelper.htmlAnchorElement) {\r\n                    UrlHelper.htmlAncho" +
                    "rElement = !!UrlHelper.document.createElement ? UrlHelper.document.createElement" +
                    "(\'a\') : {};\r\n                }\r\n                UrlHelper.htmlAnchorElement.href" +
                    " = url;\r\n                return UrlHelper.htmlAnchorElement;\r\n            };\r\n  " +
                    "          UrlHelper.getAbsoluteUrl = function (url) {\r\n                var resul" +
                    "t;\r\n                var a = UrlHelper.parseUrl(url);\r\n                if (a) {\r\n" +
                    "                    result = a.href;\r\n                }\r\n                return " +
                    "result;\r\n            };\r\n            UrlHelper.getPathName = function (url) {\r\n " +
                    "               var result;\r\n                var a = UrlHelper.parseUrl(url);\r\n  " +
                    "              if (a) {\r\n                    result = a.pathname;\r\n              " +
                    "  }\r\n                return result;\r\n            };\r\n            UrlHelper.docum" +
                    "ent = typeof document !== \"undefined\" ? document : {};\r\n            return UrlHe" +
                    "lper;\r\n        })();\r\n        ApplicationInsights.UrlHelper = UrlHelper;\r\n    })" +
                    "(ApplicationInsights = Microsoft.ApplicationInsights || (Microsoft.ApplicationIn" +
                    "sights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"../logg" +
                    "ing.ts\" />\r\n/// <reference path=\"../util.ts\" />\r\nvar Microsoft;\r\n(function (Micr" +
                    "osoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n " +
                    "       \"use strict\";\r\n        var extensions = (function () {\r\n            funct" +
                    "ion extensions() {\r\n            }\r\n            extensions.IsNullOrUndefined = fu" +
                    "nction (obj) {\r\n                return typeof (obj) === \"undefined\" || obj === n" +
                    "ull;\r\n            };\r\n            return extensions;\r\n        })();\r\n        App" +
                    "licationInsights.extensions = extensions;\r\n        var stringUtils = (function (" +
                    ") {\r\n            function stringUtils() {\r\n            }\r\n            stringUtil" +
                    "s.GetLength = function (strObject) {\r\n                var res = 0;\r\n            " +
                    "    if (!extensions.IsNullOrUndefined(strObject)) {\r\n                    var str" +
                    "ingified = \"\";\r\n                    try {\r\n                        stringified =" +
                    " strObject.toString();\r\n                    }\r\n                    catch (ex) {\r" +
                    "\n                    }\r\n                    res = stringified.length;\r\n         " +
                    "           res = isNaN(res) ? 0 : res;\r\n                }\r\n                retur" +
                    "n res;\r\n            };\r\n            return stringUtils;\r\n        })();\r\n        " +
                    "ApplicationInsights.stringUtils = stringUtils;\r\n        var dateTime = (function" +
                    " () {\r\n            function dateTime() {\r\n            }\r\n            dateTime.No" +
                    "w = (window.performance && window.performance.now) ?\r\n                function (" +
                    ") {\r\n                    return performance.now();\r\n                }\r\n         " +
                    "       :\r\n                    function () {\r\n                        return new " +
                    "Date().getTime();\r\n                    };\r\n            dateTime.GetDuration = fu" +
                    "nction (start, end) {\r\n                var result = null;\r\n                if (s" +
                    "tart !== 0 && end !== 0 && !extensions.IsNullOrUndefined(start) && !extensions.I" +
                    "sNullOrUndefined(end)) {\r\n                    result = end - start;\r\n           " +
                    "     }\r\n                return result;\r\n            };\r\n            return dateT" +
                    "ime;\r\n        })();\r\n        ApplicationInsights.dateTime = dateTime;\r\n        v" +
                    "ar EventHelper = (function () {\r\n            function EventHelper() {\r\n         " +
                    "   }\r\n            EventHelper.AttachEvent = function (obj, eventNameWithoutOn, h" +
                    "andlerRef) {\r\n                var result = false;\r\n                if (!extensio" +
                    "ns.IsNullOrUndefined(obj)) {\r\n                    if (!extensions.IsNullOrUndefi" +
                    "ned(obj.attachEvent)) {\r\n                        obj.attachEvent(\"on\" + eventNam" +
                    "eWithoutOn, handlerRef);\r\n                        result = true;\r\n              " +
                    "      }\r\n                    else {\r\n                        if (!extensions.IsN" +
                    "ullOrUndefined(obj.addEventListener)) {\r\n                            obj.addEven" +
                    "tListener(eventNameWithoutOn, handlerRef, false);\r\n                            r" +
                    "esult = true;\r\n                        }\r\n                    }\r\n               " +
                    " }\r\n                return result;\r\n            };\r\n            EventHelper.Deta" +
                    "chEvent = function (obj, eventNameWithoutOn, handlerRef) {\r\n                if (" +
                    "!extensions.IsNullOrUndefined(obj)) {\r\n                    if (!extensions.IsNul" +
                    "lOrUndefined(obj.detachEvent)) {\r\n                        obj.detachEvent(\"on\" +" +
                    " eventNameWithoutOn, handlerRef);\r\n                    }\r\n                    el" +
                    "se {\r\n                        if (!extensions.IsNullOrUndefined(obj.removeEventL" +
                    "istener)) {\r\n                            obj.removeEventListener(eventNameWithou" +
                    "tOn, handlerRef, false);\r\n                        }\r\n                    }\r\n    " +
                    "            }\r\n            };\r\n            return EventHelper;\r\n        })();\r\n " +
                    "       ApplicationInsights.EventHelper = EventHelper;\r\n    })(ApplicationInsight" +
                    "s = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(" +
                    "Microsoft || (Microsoft = {}));\r\n/// <reference path=\"../logging.ts\" />\r\n/// <re" +
                    "ference path=\"../util.ts\" />\r\n/// <reference path=\"./ajaxUtils.ts\" />\r\nvar Micro" +
                    "soft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (App" +
                    "licationInsights) {\r\n        \"use strict\";\r\n        var XHRMonitoringState = (fu" +
                    "nction () {\r\n            function XHRMonitoringState() {\r\n                this.o" +
                    "penDone = false;\r\n                this.setRequestHeaderDone = false;\r\n          " +
                    "      this.sendDone = false;\r\n                this.abortDone = false;\r\n         " +
                    "       this.onreadystatechangeCallbackAttached = false;\r\n            }\r\n        " +
                    "    return XHRMonitoringState;\r\n        })();\r\n        ApplicationInsights.XHRMo" +
                    "nitoringState = XHRMonitoringState;\r\n        var ajaxRecord = (function () {\r\n  " +
                    "          function ajaxRecord(id) {\r\n                this.completed = false;\r\n  " +
                    "              this.requestHeadersSize = null;\r\n                this.ttfb = null;" +
                    "\r\n                this.responseReceivingDuration = null;\r\n                this.c" +
                    "allbackDuration = null;\r\n                this.ajaxTotalDuration = null;\r\n       " +
                    "         this.aborted = null;\r\n                this.pageUrl = null;\r\n           " +
                    "     this.requestUrl = null;\r\n                this.requestSize = 0;\r\n           " +
                    "     this.method = null;\r\n                this.status = null;\r\n                t" +
                    "his.requestSentTime = null;\r\n                this.responseStartedTime = null;\r\n " +
                    "               this.responseFinishedTime = null;\r\n                this.callbackF" +
                    "inishedTime = null;\r\n                this.endTime = null;\r\n                this." +
                    "originalOnreadystatechage = null;\r\n                this.xhrMonitoringState = new" +
                    " XHRMonitoringState();\r\n                this.clientFailure = 0;\r\n               " +
                    " this.CalculateMetrics = function () {\r\n                    var self = this;\r\n  " +
                    "                  self.ajaxTotalDuration = ApplicationInsights.dateTime.GetDurat" +
                    "ion(self.requestSentTime, self.responseFinishedTime);\r\n                };\r\n     " +
                    "           this.id = id;\r\n            }\r\n            ajaxRecord.prototype.getAbs" +
                    "oluteUrl = function () {\r\n                return this.requestUrl ? ApplicationIn" +
                    "sights.UrlHelper.getAbsoluteUrl(this.requestUrl) : null;\r\n            };\r\n      " +
                    "      ajaxRecord.prototype.getPathName = function () {\r\n                return t" +
                    "his.requestUrl ? ApplicationInsights.UrlHelper.getPathName(this.requestUrl) : nu" +
                    "ll;\r\n            };\r\n            return ajaxRecord;\r\n        })();\r\n        Appl" +
                    "icationInsights.ajaxRecord = ajaxRecord;\r\n        ;\r\n    })(ApplicationInsights " +
                    "= Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Mi" +
                    "crosoft || (Microsoft = {}));\r\n;\r\n/// <reference path=\"../logging.ts\" />\r\n/// <r" +
                    "eference path=\"../util.ts\" />\r\n/// <reference path=\"./ajaxUtils.ts\" />\r\n/// <ref" +
                    "erence path=\"./ajaxRecord.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    v" +
                    "ar ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        \"use str" +
                    "ict\";\r\n        var AjaxMonitor = (function () {\r\n            function AjaxMonito" +
                    "r(appInsights) {\r\n                this.currentWindowHost = window.location.host;" +
                    "\r\n                this.appInsights = appInsights;\r\n                this.initiali" +
                    "zed = false;\r\n                this.Init();\r\n            }\r\n            AjaxMonit" +
                    "or.prototype.Init = function () {\r\n                if (this.supportsMonitoring()" +
                    ") {\r\n                    this.instrumentOpen();\r\n                    this.instru" +
                    "mentSend();\r\n                    this.instrumentAbort();\r\n                    th" +
                    "is.initialized = true;\r\n                }\r\n            };\r\n            AjaxMonit" +
                    "or.prototype.isMonitoredInstance = function (xhr, excludeAjaxDataValidation) {\r\n" +
                    "                return this.initialized\r\n                    && (excludeAjaxData" +
                    "Validation === true || !ApplicationInsights.extensions.IsNullOrUndefined(xhr.aja" +
                    "xData))\r\n                    && xhr[AjaxMonitor.DisabledPropertyName] !== true;\r" +
                    "\n            };\r\n            AjaxMonitor.prototype.supportsMonitoring = function" +
                    " () {\r\n                var result = false;\r\n                if (!ApplicationInsi" +
                    "ghts.extensions.IsNullOrUndefined(XMLHttpRequest)) {\r\n                    result" +
                    " = true;\r\n                }\r\n                return result;\r\n            };\r\n   " +
                    "         AjaxMonitor.prototype.instrumentOpen = function () {\r\n                v" +
                    "ar originalOpen = XMLHttpRequest.prototype.open;\r\n                var ajaxMonito" +
                    "rInstance = this;\r\n                XMLHttpRequest.prototype.open = function (met" +
                    "hod, url, async) {\r\n                    try {\r\n                        if (ajaxM" +
                    "onitorInstance.isMonitoredInstance(this, true) &&\r\n                            (" +
                    "!this.ajaxData ||\r\n                                !this.ajaxData.xhrMonitoringS" +
                    "tate.openDone)) {\r\n                            ajaxMonitorInstance.openHandler(t" +
                    "his, method, url, async);\r\n                        }\r\n                    }\r\n   " +
                    "                 catch (e) {\r\n                        ApplicationInsights._Inter" +
                    "nalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity.CR" +
                    "ITICAL, new ApplicationInsights._InternalLogMessage(ApplicationInsights._Interna" +
                    "lMessageId.NONUSRACT_FailedMonitorAjaxOpen, \"Failed to monitor XMLHttpRequest.op" +
                    "en, monitoring data for this ajax call may be incorrect.\", {\r\n                  " +
                    "          ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(th" +
                    "is),\r\n                            exception: Microsoft.ApplicationInsights.Util." +
                    "dump(e)\r\n                        }));\r\n                    }\r\n                  " +
                    "  return originalOpen.apply(this, arguments);\r\n                };\r\n            }" +
                    ";\r\n            AjaxMonitor.prototype.openHandler = function (xhr, method, url, a" +
                    "sync) {\r\n                var ajaxData = new ApplicationInsights.ajaxRecord(Appli" +
                    "cationInsights.Util.newId());\r\n                ajaxData.method = method;\r\n      " +
                    "          ajaxData.requestUrl = url;\r\n                ajaxData.xhrMonitoringStat" +
                    "e.openDone = true;\r\n                xhr.ajaxData = ajaxData;\r\n                th" +
                    "is.attachToOnReadyStateChange(xhr);\r\n            };\r\n            AjaxMonitor.get" +
                    "FailedAjaxDiagnosticsMessage = function (xhr) {\r\n                var result = \"\"" +
                    ";\r\n                try {\r\n                    if (!ApplicationInsights.extension" +
                    "s.IsNullOrUndefined(xhr) &&\r\n                        !ApplicationInsights.extens" +
                    "ions.IsNullOrUndefined(xhr.ajaxData) &&\r\n                        !ApplicationIns" +
                    "ights.extensions.IsNullOrUndefined(xhr.ajaxData.requestUrl)) {\r\n                " +
                    "        result += \"(url: \'\" + xhr.ajaxData.requestUrl + \"\')\";\r\n                 " +
                    "   }\r\n                }\r\n                catch (e) { }\r\n                return r" +
                    "esult;\r\n            };\r\n            AjaxMonitor.prototype.instrumentSend = funct" +
                    "ion () {\r\n                var originalSend = XMLHttpRequest.prototype.send;\r\n   " +
                    "             var ajaxMonitorInstance = this;\r\n                XMLHttpRequest.pro" +
                    "totype.send = function (content) {\r\n                    try {\r\n                 " +
                    "       if (ajaxMonitorInstance.isMonitoredInstance(this) && !this.ajaxData.xhrMo" +
                    "nitoringState.sendDone) {\r\n                            ajaxMonitorInstance.sendH" +
                    "andler(this, content);\r\n                        }\r\n                    }\r\n      " +
                    "              catch (e) {\r\n                        ApplicationInsights._Internal" +
                    "Logging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITI" +
                    "CAL, new ApplicationInsights._InternalLogMessage(ApplicationInsights._InternalMe" +
                    "ssageId.NONUSRACT_FailedMonitorAjaxSend, \"Failed to monitor XMLHttpRequest, moni" +
                    "toring data for this ajax call may be incorrect.\", {\r\n                          " +
                    "  ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n  " +
                    "                          exception: Microsoft.ApplicationInsights.Util.dump(e)\r" +
                    "\n                        }));\r\n                    }\r\n                    return" +
                    " originalSend.apply(this, arguments);\r\n                };\r\n            };\r\n     " +
                    "       AjaxMonitor.prototype.sendHandler = function (xhr, content) {\r\n          " +
                    "      xhr.ajaxData.requestSentTime = ApplicationInsights.dateTime.Now();\r\n      " +
                    "          if (!this.appInsights.config.disableCorrelationHeaders && (Application" +
                    "Insights.UrlHelper.parseUrl(xhr.ajaxData.getAbsoluteUrl()).host == this.currentW" +
                    "indowHost)) {\r\n                    xhr.setRequestHeader(\"x-ms-request-id\", xhr.a" +
                    "jaxData.id);\r\n                }\r\n                xhr.ajaxData.xhrMonitoringState" +
                    ".sendDone = true;\r\n            };\r\n            AjaxMonitor.prototype.instrumentA" +
                    "bort = function () {\r\n                var originalAbort = XMLHttpRequest.prototy" +
                    "pe.abort;\r\n                var ajaxMonitorInstance = this;\r\n                XMLH" +
                    "ttpRequest.prototype.abort = function () {\r\n                    try {\r\n         " +
                    "               if (ajaxMonitorInstance.isMonitoredInstance(this) && !this.ajaxDa" +
                    "ta.xhrMonitoringState.abortDone) {\r\n                            this.ajaxData.ab" +
                    "orted = 1;\r\n                            this.ajaxData.xhrMonitoringState.abortDo" +
                    "ne = true;\r\n                        }\r\n                    }\r\n                  " +
                    "  catch (e) {\r\n                        ApplicationInsights._InternalLogging.thro" +
                    "wInternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new App" +
                    "licationInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONU" +
                    "SRACT_FailedMonitorAjaxAbort, \"Failed to monitor XMLHttpRequest.abort, monitorin" +
                    "g data for this ajax call may be incorrect.\", {\r\n                            aja" +
                    "xDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n       " +
                    "                     exception: Microsoft.ApplicationInsights.Util.dump(e)\r\n    " +
                    "                    }));\r\n                    }\r\n                    return orig" +
                    "inalAbort.apply(this, arguments);\r\n                };\r\n            };\r\n         " +
                    "   AjaxMonitor.prototype.attachToOnReadyStateChange = function (xhr) {\r\n        " +
                    "        var ajaxMonitorInstance = this;\r\n                xhr.ajaxData.xhrMonitor" +
                    "ingState.onreadystatechangeCallbackAttached = ApplicationInsights.EventHelper.At" +
                    "tachEvent(xhr, \"readystatechange\", function () {\r\n                    try {\r\n   " +
                    "                     if (ajaxMonitorInstance.isMonitoredInstance(xhr)) {\r\n      " +
                    "                      if (xhr.readyState === 4) {\r\n                             " +
                    "   ajaxMonitorInstance.onAjaxComplete(xhr);\r\n                            }\r\n    " +
                    "                    }\r\n                    }\r\n                    catch (e) {\r\n " +
                    "                       var exceptionText = Microsoft.ApplicationInsights.Util.du" +
                    "mp(e);\r\n                        if (!exceptionText || exceptionText.toLowerCase(" +
                    ").indexOf(\"c00c023f\") == -1) {\r\n                            ApplicationInsights." +
                    "_InternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSever" +
                    "ity.CRITICAL, new ApplicationInsights._InternalLogMessage(ApplicationInsights._I" +
                    "nternalMessageId.NONUSRACT_FailedMonitorAjaxRSC, \"Failed to monitor XMLHttpReque" +
                    "st \'readystatechange\' event handler, monitoring data for this ajax call may be i" +
                    "ncorrect.\", {\r\n                                ajaxDiagnosticsMessage: AjaxMonit" +
                    "or.getFailedAjaxDiagnosticsMessage(xhr),\r\n                                except" +
                    "ion: Microsoft.ApplicationInsights.Util.dump(e)\r\n                            }))" +
                    ";\r\n                        }\r\n                    }\r\n                });\r\n      " +
                    "      };\r\n            AjaxMonitor.prototype.onAjaxComplete = function (xhr) {\r\n " +
                    "               xhr.ajaxData.responseFinishedTime = ApplicationInsights.dateTime." +
                    "Now();\r\n                xhr.ajaxData.status = xhr.status;\r\n                xhr.a" +
                    "jaxData.CalculateMetrics();\r\n                if (xhr.ajaxData.ajaxTotalDuration " +
                    "< 0) {\r\n                    ApplicationInsights._InternalLogging.throwInternalNo" +
                    "nUserActionable(ApplicationInsights.LoggingSeverity.WARNING, new ApplicationInsi" +
                    "ghts._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_Failed" +
                    "MonitorAjaxDur, \"Failed to calculate the duration of the ajax call, monitoring d" +
                    "ata for this ajax call won\'t be sent.\", {\r\n                        ajaxDiagnosti" +
                    "csMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                  " +
                    "      requestSentTime: xhr.ajaxData.requestSentTime,\r\n                        re" +
                    "sponseFinishedTime: xhr.ajaxData.responseFinishedTime\r\n                    }));\r" +
                    "\n                }\r\n                else {\r\n                    this.appInsights" +
                    ".trackAjax(xhr.ajaxData.id, xhr.ajaxData.getAbsoluteUrl(), xhr.ajaxData.getPathN" +
                    "ame(), xhr.ajaxData.ajaxTotalDuration, (+(xhr.ajaxData.status)) >= 200 && (+(xhr" +
                    ".ajaxData.status)) < 400, +xhr.ajaxData.status, xhr.ajaxData.method);\r\n         " +
                    "           xhr.ajaxData = null;\r\n                }\r\n            };\r\n            " +
                    "AjaxMonitor.instrumentedByAppInsightsName = \"InstrumentedByAppInsights\";\r\n      " +
                    "      AjaxMonitor.DisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAj" +
                    "axInstrumentation\";\r\n            return AjaxMonitor;\r\n        })();\r\n        App" +
                    "licationInsights.AjaxMonitor = AjaxMonitor;\r\n    })(ApplicationInsights = Micros" +
                    "oft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft " +
                    "|| (Microsoft = {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Applicat" +
                    "ionInsights;\r\n    (function (ApplicationInsights) {\r\n        var HashCodeScoreGe" +
                    "nerator = (function () {\r\n            function HashCodeScoreGenerator() {\r\n     " +
                    "       }\r\n            HashCodeScoreGenerator.prototype.getHashCodeScore = functi" +
                    "on (key) {\r\n                var score = this.getHashCode(key) / HashCodeScoreGen" +
                    "erator.INT_MAX_VALUE;\r\n                return score * 100;\r\n            };\r\n    " +
                    "        HashCodeScoreGenerator.prototype.getHashCode = function (input) {\r\n     " +
                    "           if (input == \"\") {\r\n                    return 0;\r\n                }\r" +
                    "\n                while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) " +
                    "{\r\n                    input = input.concat(input);\r\n                }\r\n        " +
                    "        var hash = 5381;\r\n                for (var i = 0; i < input.length; ++i)" +
                    " {\r\n                    hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n    " +
                    "                hash = hash & hash;\r\n                }\r\n                return M" +
                    "ath.abs(hash);\r\n            };\r\n            HashCodeScoreGenerator.INT_MAX_VALUE" +
                    " = 2147483647;\r\n            HashCodeScoreGenerator.MIN_INPUT_LENGTH = 8;\r\n      " +
                    "      return HashCodeScoreGenerator;\r\n        })();\r\n        ApplicationInsights" +
                    ".HashCodeScoreGenerator = HashCodeScoreGenerator;\r\n    })(ApplicationInsights = " +
                    "Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Micr" +
                    "osoft || (Microsoft = {}));\r\n/// <reference path=\"logging.ts\" />\r\n/// <reference" +
                    " path=\"util.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Application" +
                    "Insights;\r\n    (function (ApplicationInsights) {\r\n        \"use strict\";\r\n       " +
                    " (function (FieldType) {\r\n            FieldType[FieldType[\"Default\"] = 0] = \"Def" +
                    "ault\";\r\n            FieldType[FieldType[\"Required\"] = 1] = \"Required\";\r\n        " +
                    "    FieldType[FieldType[\"Array\"] = 2] = \"Array\";\r\n            FieldType[FieldTyp" +
                    "e[\"Hidden\"] = 4] = \"Hidden\";\r\n        })(ApplicationInsights.FieldType || (Appli" +
                    "cationInsights.FieldType = {}));\r\n        var FieldType = ApplicationInsights.Fi" +
                    "eldType;\r\n        ;\r\n        var Serializer = (function () {\r\n            functi" +
                    "on Serializer() {\r\n            }\r\n            Serializer.serialize = function (i" +
                    "nput) {\r\n                var output = Serializer._serializeObject(input, \"root\")" +
                    ";\r\n                return JSON.stringify(output);\r\n            };\r\n            S" +
                    "erializer._serializeObject = function (source, name) {\r\n                var circ" +
                    "ularReferenceCheck = \"__aiCircularRefCheck\";\r\n                var output = {};\r\n" +
                    "                if (!source) {\r\n                    ApplicationInsights._Interna" +
                    "lLogging.throwInternalUserActionable(ApplicationInsights.LoggingSeverity.CRITICA" +
                    "L, new ApplicationInsights._InternalLogMessage(ApplicationInsights._InternalMess" +
                    "ageId.USRACT_CannotSerializeObject, \"cannot serialize object because it is null " +
                    "or undefined\", { name: name }));\r\n                    return output;\r\n          " +
                    "      }\r\n                if (source[circularReferenceCheck]) {\r\n                " +
                    "    ApplicationInsights._InternalLogging.throwInternalUserActionable(Application" +
                    "Insights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(Ap" +
                    "plicationInsights._InternalMessageId.USRACT_CircularReferenceDetected, \"Circular" +
                    " reference detected while serializing object\", { name: name }));\r\n              " +
                    "      return output;\r\n                }\r\n                if (!source.aiDataContr" +
                    "act) {\r\n                    if (name === \"measurements\") {\r\n                    " +
                    "    output = Serializer._serializeStringMap(source, \"number\", name);\r\n          " +
                    "          }\r\n                    else if (name === \"properties\") {\r\n            " +
                    "            output = Serializer._serializeStringMap(source, \"string\", name);\r\n  " +
                    "                  }\r\n                    else if (name === \"tags\") {\r\n          " +
                    "              output = Serializer._serializeStringMap(source, \"string\", name);\r\n" +
                    "                    }\r\n                    else if (ApplicationInsights.Util.isA" +
                    "rray(source)) {\r\n                        output = Serializer._serializeArray(sou" +
                    "rce, name);\r\n                    }\r\n                    else {\r\n                " +
                    "        ApplicationInsights._InternalLogging.throwInternalUserActionable(Applica" +
                    "tionInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessag" +
                    "e(ApplicationInsights._InternalMessageId.USRACT_CannotSerializeObjectNonSerializ" +
                    "able, \"Attempting to serialize an object which does not implement ISerializable\"" +
                    ", { name: name }));\r\n                        try {\r\n                            " +
                    "JSON.stringify(source);\r\n                            output = source;\r\n         " +
                    "               }\r\n                        catch (e) {\r\n                         " +
                    "   ApplicationInsights._InternalLogging.throwInternalUserActionable(ApplicationI" +
                    "nsights.LoggingSeverity.CRITICAL, e && typeof e.toString === \'function\' ? e.toSt" +
                    "ring() : \"Error serializing object\");\r\n                        }\r\n              " +
                    "      }\r\n                    return output;\r\n                }\r\n                " +
                    "source[circularReferenceCheck] = true;\r\n                for (var field in source" +
                    ".aiDataContract) {\r\n                    var contract = source.aiDataContract[fie" +
                    "ld];\r\n                    var isRequired = (typeof contract === \"function\") ? (c" +
                    "ontract() & FieldType.Required) : (contract & FieldType.Required);\r\n            " +
                    "        var isHidden = (typeof contract === \"function\") ? (contract() & FieldTyp" +
                    "e.Hidden) : (contract & FieldType.Hidden);\r\n                    var isArray = co" +
                    "ntract & FieldType.Array;\r\n                    var isPresent = source[field] !==" +
                    " undefined;\r\n                    var isObject = typeof source[field] === \"object" +
                    "\" && source[field] !== null;\r\n                    if (isRequired && !isPresent &" +
                    "& !isArray) {\r\n                        ApplicationInsights._InternalLogging.thro" +
                    "wInternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new App" +
                    "licationInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONU" +
                    "SRACT_MissingRequiredFieldSpecification, \"Missing required field specification. " +
                    "The field is required but not present on source\", { field: field, name: name }))" +
                    ";\r\n                        continue;\r\n                    }\r\n                   " +
                    " if (isHidden) {\r\n                        continue;\r\n                    }\r\n    " +
                    "                var value;\r\n                    if (isObject) {\r\n               " +
                    "         if (isArray) {\r\n                            value = Serializer._seriali" +
                    "zeArray(source[field], field);\r\n                        }\r\n                     " +
                    "   else {\r\n                            value = Serializer._serializeObject(sourc" +
                    "e[field], field);\r\n                        }\r\n                    }\r\n           " +
                    "         else {\r\n                        value = source[field];\r\n               " +
                    "     }\r\n                    if (value !== undefined) {\r\n                        " +
                    "output[field] = value;\r\n                    }\r\n                }\r\n              " +
                    "  delete source[circularReferenceCheck];\r\n                return output;\r\n      " +
                    "      };\r\n            Serializer._serializeArray = function (sources, name) {\r\n " +
                    "               var output = undefined;\r\n                if (!!sources) {\r\n      " +
                    "              if (!ApplicationInsights.Util.isArray(sources)) {\r\n               " +
                    "         ApplicationInsights._InternalLogging.throwInternalUserActionable(Applic" +
                    "ationInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMess" +
                    "age(ApplicationInsights._InternalMessageId.USRACT_ItemNotInArray, \"This field wa" +
                    "s specified as an array in the contract but the item is not an array.\\r\\n\", { na" +
                    "me: name }));\r\n                    }\r\n                    else {\r\n              " +
                    "          output = [];\r\n                        for (var i = 0; i < sources.leng" +
                    "th; i++) {\r\n                            var source = sources[i];\r\n              " +
                    "              var item = Serializer._serializeObject(source, name + \"[\" + i + \"]" +
                    "\");\r\n                            output.push(item);\r\n                        }\r\n" +
                    "                    }\r\n                }\r\n                return output;\r\n      " +
                    "      };\r\n            Serializer._serializeStringMap = function (map, expectedTy" +
                    "pe, name) {\r\n                var output = undefined;\r\n                if (map) {" +
                    "\r\n                    output = {};\r\n                    for (var field in map) {" +
                    "\r\n                        var value = map[field];\r\n                        if (e" +
                    "xpectedType === \"string\") {\r\n                            if (value === undefined" +
                    ") {\r\n                                output[field] = \"undefined\";\r\n             " +
                    "               }\r\n                            else if (value === null) {\r\n      " +
                    "                          output[field] = \"null\";\r\n                            }" +
                    "\r\n                            else if (!value.toString) {\r\n                     " +
                    "           output[field] = \"invalid field: toString() is not defined.\";\r\n       " +
                    "                     }\r\n                            else {\r\n                    " +
                    "            output[field] = value.toString();\r\n                            }\r\n  " +
                    "                      }\r\n                        else if (expectedType === \"numb" +
                    "er\") {\r\n                            if (value === undefined) {\r\n                " +
                    "                output[field] = \"undefined\";\r\n                            }\r\n   " +
                    "                         else if (value === null) {\r\n                           " +
                    "     output[field] = \"null\";\r\n                            }\r\n                   " +
                    "         else {\r\n                                var num = parseFloat(value);\r\n " +
                    "                               if (isNaN(num)) {\r\n                              " +
                    "      output[field] = \"NaN\";\r\n                                }\r\n               " +
                    "                 else {\r\n                                    output[field] = num" +
                    ";\r\n                                }\r\n                            }\r\n           " +
                    "             }\r\n                        else {\r\n                            outp" +
                    "ut[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                " +
                    "            ApplicationInsights._InternalLogging.throwInternalUserActionable(App" +
                    "licationInsights.LoggingSeverity.CRITICAL, output[field]);\r\n                    " +
                    "    }\r\n                    }\r\n                }\r\n                return output;\r" +
                    "\n            };\r\n            return Serializer;\r\n        })();\r\n        Applicat" +
                    "ionInsights.Serializer = Serializer;\r\n    })(ApplicationInsights = Microsoft.App" +
                    "licationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Mic" +
                    "rosoft = {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Telemetry;\r\n   " +
                    " (function (Telemetry) {\r\n        \"use strict\";\r\n        var Base = (function ()" +
                    " {\r\n            function Base() {\r\n            }\r\n            return Base;\r\n    " +
                    "    })();\r\n        Telemetry.Base = Base;\r\n    })(Telemetry = Microsoft.Telemetr" +
                    "y || (Microsoft.Telemetry = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <refe" +
                    "rence path=\"Base.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Teleme" +
                    "try;\r\n    (function (Telemetry) {\r\n        \"use strict\";\r\n        var Envelope =" +
                    " (function () {\r\n            function Envelope() {\r\n                this.ver = 1" +
                    ";\r\n                this.sampleRate = 100.0;\r\n                this.tags = {};\r\n  " +
                    "          }\r\n            return Envelope;\r\n        })();\r\n        Telemetry.Enve" +
                    "lope = Envelope;\r\n    })(Telemetry = Microsoft.Telemetry || (Microsoft.Telemetry" +
                    " = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"../../../Java" +
                    "ScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/// <reference path=\"." +
                    "./../../JavaScriptSDK.Interfaces/Contracts/Generated/Base.ts\" />\r\n/// <reference" +
                    " path=\"../../Util.ts\"/>\r\nvar __extends = (this && this.__extends) || function (d" +
                    ", b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function" +
                    " __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototyp" +
                    "e = new __();\r\n};\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationI" +
                    "nsights;\r\n    (function (ApplicationInsights) {\r\n        var Telemetry;\r\n       " +
                    " (function (Telemetry) {\r\n            var Common;\r\n            (function (Common" +
                    ") {\r\n                \"use strict\";\r\n                var Envelope = (function (_s" +
                    "uper) {\r\n                    __extends(Envelope, _super);\r\n                    f" +
                    "unction Envelope(data, name) {\r\n                        var _this = this;\r\n     " +
                    "                   _super.call(this);\r\n                        this.name = Commo" +
                    "n.DataSanitizer.sanitizeString(name) || ApplicationInsights.Util.NotSpecified;\r\n" +
                    "                        this.data = data;\r\n                        this.time = A" +
                    "pplicationInsights.Util.toISOStringForIE8(new Date());\r\n                        " +
                    "this.aiDataContract = {\r\n                            time: ApplicationInsights.F" +
                    "ieldType.Required,\r\n                            iKey: ApplicationInsights.FieldT" +
                    "ype.Required,\r\n                            name: ApplicationInsights.FieldType.R" +
                    "equired,\r\n                            sampleRate: function () {\r\n               " +
                    "                 return (_this.sampleRate == 100) ? ApplicationInsights.FieldTyp" +
                    "e.Hidden : ApplicationInsights.FieldType.Required;\r\n                            " +
                    "},\r\n                            tags: ApplicationInsights.FieldType.Required,\r\n " +
                    "                           data: ApplicationInsights.FieldType.Required,\r\n      " +
                    "                  };\r\n                    }\r\n                    return Envelope" +
                    ";\r\n                })(Microsoft.Telemetry.Envelope);\r\n                Common.Env" +
                    "elope = Envelope;\r\n            })(Common = Telemetry.Common || (Telemetry.Common" +
                    " = {}));\r\n        })(Telemetry = ApplicationInsights.Telemetry || (ApplicationIn" +
                    "sights.Telemetry = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsi" +
                    "ghts || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {})" +
                    ");\r\n/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contracts/Generated/B" +
                    "ase.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;" +
                    "\r\n    (function (ApplicationInsights) {\r\n        var Telemetry;\r\n        (functi" +
                    "on (Telemetry) {\r\n            var Common;\r\n            (function (Common) {\r\n   " +
                    "             \"use strict\";\r\n                var Base = (function (_super) {\r\n   " +
                    "                 __extends(Base, _super);\r\n                    function Base() {" +
                    "\r\n                        _super.apply(this, arguments);\r\n                      " +
                    "  this.aiDataContract = {};\r\n                    }\r\n                    return B" +
                    "ase;\r\n                })(Microsoft.Telemetry.Base);\r\n                Common.Base" +
                    " = Base;\r\n            })(Common = Telemetry.Common || (Telemetry.Common = {}));\r" +
                    "\n        })(Telemetry = ApplicationInsights.Telemetry || (ApplicationInsights.Te" +
                    "lemetry = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (" +
                    "Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar A" +
                    "I;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var ContextTagKeys = (function () {" +
                    "\r\n        function ContextTagKeys() {\r\n            this.applicationVersion = \"ai" +
                    ".application.ver\";\r\n            this.applicationBuild = \"ai.application.build\";\r" +
                    "\n            this.applicationTypeId = \"ai.application.typeId\";\r\n            this" +
                    ".applicationId = \"ai.application.applicationId\";\r\n            this.deviceId = \"a" +
                    "i.device.id\";\r\n            this.deviceIp = \"ai.device.ip\";\r\n            this.dev" +
                    "iceLanguage = \"ai.device.language\";\r\n            this.deviceLocale = \"ai.device." +
                    "locale\";\r\n            this.deviceModel = \"ai.device.model\";\r\n            this.de" +
                    "viceNetwork = \"ai.device.network\";\r\n            this.deviceNetworkName = \"ai.dev" +
                    "ice.networkName\";\r\n            this.deviceOEMName = \"ai.device.oemName\";\r\n      " +
                    "      this.deviceOS = \"ai.device.os\";\r\n            this.deviceOSVersion = \"ai.de" +
                    "vice.osVersion\";\r\n            this.deviceRoleInstance = \"ai.device.roleInstance\"" +
                    ";\r\n            this.deviceRoleName = \"ai.device.roleName\";\r\n            this.dev" +
                    "iceScreenResolution = \"ai.device.screenResolution\";\r\n            this.deviceType" +
                    " = \"ai.device.type\";\r\n            this.deviceMachineName = \"ai.device.machineNam" +
                    "e\";\r\n            this.deviceVMName = \"ai.device.vmName\";\r\n            this.locat" +
                    "ionIp = \"ai.location.ip\";\r\n            this.operationId = \"ai.operation.id\";\r\n  " +
                    "          this.operationName = \"ai.operation.name\";\r\n            this.operationP" +
                    "arentId = \"ai.operation.parentId\";\r\n            this.operationRootId = \"ai.opera" +
                    "tion.rootId\";\r\n            this.operationSyntheticSource = \"ai.operation.synthet" +
                    "icSource\";\r\n            this.operationIsSynthetic = \"ai.operation.isSynthetic\";\r" +
                    "\n            this.operationCorrelationVector = \"ai.operation.correlationVector\";" +
                    "\r\n            this.sessionId = \"ai.session.id\";\r\n            this.sessionIsFirst" +
                    " = \"ai.session.isFirst\";\r\n            this.sessionIsNew = \"ai.session.isNew\";\r\n " +
                    "           this.userAccountAcquisitionDate = \"ai.user.accountAcquisitionDate\";\r\n" +
                    "            this.userAccountId = \"ai.user.accountId\";\r\n            this.userAgen" +
                    "t = \"ai.user.userAgent\";\r\n            this.userId = \"ai.user.id\";\r\n            t" +
                    "his.userStoreRegion = \"ai.user.storeRegion\";\r\n            this.userAuthUserId = " +
                    "\"ai.user.authUserId\";\r\n            this.userAnonymousUserAcquisitionDate = \"ai.u" +
                    "ser.anonUserAcquisitionDate\";\r\n            this.userAuthenticatedUserAcquisition" +
                    "Date = \"ai.user.authUserAcquisitionDate\";\r\n            this.sampleRate = \"ai.sam" +
                    "ple.sampleRate\";\r\n            this.cloudName = \"ai.cloud.name\";\r\n            thi" +
                    "s.cloudRoleVer = \"ai.cloud.roleVer\";\r\n            this.cloudEnvironment = \"ai.cl" +
                    "oud.environment\";\r\n            this.cloudLocation = \"ai.cloud.location\";\r\n      " +
                    "      this.cloudDeploymentUnit = \"ai.cloud.deploymentUnit\";\r\n            this.se" +
                    "rverDeviceOS = \"ai.serverDevice.os\";\r\n            this.serverDeviceOSVer = \"ai.s" +
                    "erverDevice.osVer\";\r\n            this.internalSdkVersion = \"ai.internal.sdkVersi" +
                    "on\";\r\n            this.internalAgentVersion = \"ai.internal.agentVersion\";\r\n     " +
                    "       this.internalDataCollectorReceivedTime = \"ai.internal.dataCollectorReceiv" +
                    "edTime\";\r\n            this.internalProfileId = \"ai.internal.profileId\";\r\n       " +
                    "     this.internalProfileClassId = \"ai.internal.profileClassId\";\r\n            th" +
                    "is.internalAccountId = \"ai.internal.accountId\";\r\n            this.internalApplic" +
                    "ationName = \"ai.internal.applicationName\";\r\n            this.internalInstrumenta" +
                    "tionKey = \"ai.internal.instrumentationKey\";\r\n            this.internalTelemetryI" +
                    "temId = \"ai.internal.telemetryItemId\";\r\n            this.internalApplicationType" +
                    " = \"ai.internal.applicationType\";\r\n            this.internalRequestSource = \"ai." +
                    "internal.requestSource\";\r\n            this.internalFlowType = \"ai.internal.flowT" +
                    "ype\";\r\n            this.internalIsAudit = \"ai.internal.isAudit\";\r\n            th" +
                    "is.internalTrackingSourceId = \"ai.internal.trackingSourceId\";\r\n            this." +
                    "internalTrackingType = \"ai.internal.trackingType\";\r\n            this.internalIsD" +
                    "iagnosticExample = \"ai.internal.isDiagnosticExample\";\r\n        }\r\n        return" +
                    " ContextTagKeys;\r\n    })();\r\n    AI.ContextTagKeys = ContextTagKeys;\r\n})(AI || (" +
                    "AI = {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights" +
                    ";\r\n    (function (ApplicationInsights) {\r\n        var Context;\r\n        (functio" +
                    "n (Context) {\r\n            \"use strict\";\r\n        })(Context = ApplicationInsigh" +
                    "ts.Context || (ApplicationInsights.Context = {}));\r\n    })(ApplicationInsights =" +
                    " Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Mic" +
                    "rosoft || (Microsoft = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interface" +
                    "s/Context/IApplication.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var " +
                    "ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        var Context" +
                    ";\r\n        (function (Context) {\r\n            \"use strict\";\r\n            var App" +
                    "lication = (function () {\r\n                function Application() {\r\n           " +
                    "     }\r\n                return Application;\r\n            })();\r\n            Cont" +
                    "ext.Application = Application;\r\n        })(Context = ApplicationInsights.Context" +
                    " || (ApplicationInsights.Context = {}));\r\n    })(ApplicationInsights = Microsoft" +
                    ".ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || " +
                    "(Microsoft = {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Application" +
                    "Insights;\r\n    (function (ApplicationInsights) {\r\n        var Context;\r\n        " +
                    "(function (Context) {\r\n            \"use strict\";\r\n        })(Context = Applicati" +
                    "onInsights.Context || (ApplicationInsights.Context = {}));\r\n    })(ApplicationIn" +
                    "sights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));" +
                    "\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"../../JavaScriptSDK.I" +
                    "nterfaces/Context/IDevice.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    v" +
                    "ar ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        var Cont" +
                    "ext;\r\n        (function (Context) {\r\n            \"use strict\";\r\n            var " +
                    "Device = (function () {\r\n                function Device() {\r\n                  " +
                    "  this.id = \"browser\";\r\n                    this.type = \"Browser\";\r\n            " +
                    "    }\r\n                return Device;\r\n            })();\r\n            Context.De" +
                    "vice = Device;\r\n        })(Context = ApplicationInsights.Context || (Application" +
                    "Insights.Context = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsi" +
                    "ghts || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {})" +
                    ");\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (" +
                    "function (ApplicationInsights) {\r\n        var Context;\r\n        (function (Conte" +
                    "xt) {\r\n            \"use strict\";\r\n        })(Context = ApplicationInsights.Conte" +
                    "xt || (ApplicationInsights.Context = {}));\r\n    })(ApplicationInsights = Microso" +
                    "ft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft |" +
                    "| (Microsoft = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contex" +
                    "t/IInternal.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationI" +
                    "nsights;\r\n    (function (ApplicationInsights) {\r\n        var Context;\r\n        (" +
                    "function (Context) {\r\n            \"use strict\";\r\n            var Internal = (fun" +
                    "ction () {\r\n                function Internal() {\r\n                    this.sdkV" +
                    "ersion = \"javascript:\" + ApplicationInsights.Version;\r\n                }\r\n      " +
                    "          return Internal;\r\n            })();\r\n            Context.Internal = In" +
                    "ternal;\r\n        })(Context = ApplicationInsights.Context || (ApplicationInsight" +
                    "s.Context = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights ||" +
                    " (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar" +
                    " Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (functio" +
                    "n (ApplicationInsights) {\r\n        var Context;\r\n        (function (Context) {\r\n" +
                    "            \"use strict\";\r\n        })(Context = ApplicationInsights.Context || (" +
                    "ApplicationInsights.Context = {}));\r\n    })(ApplicationInsights = Microsoft.Appl" +
                    "icationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Micr" +
                    "osoft = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Context/ILoca" +
                    "tion.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsight" +
                    "s;\r\n    (function (ApplicationInsights) {\r\n        var Context;\r\n        (functi" +
                    "on (Context) {\r\n            \"use strict\";\r\n            var Location = (function " +
                    "() {\r\n                function Location() {\r\n                }\r\n                " +
                    "return Location;\r\n            })();\r\n            Context.Location = Location;\r\n " +
                    "       })(Context = ApplicationInsights.Context || (ApplicationInsights.Context " +
                    "= {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsof" +
                    "t.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar Microsoft" +
                    ";\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Applica" +
                    "tionInsights) {\r\n        var Context;\r\n        (function (Context) {\r\n          " +
                    "  \"use strict\";\r\n        })(Context = ApplicationInsights.Context || (Applicatio" +
                    "nInsights.Context = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationIns" +
                    "ights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}" +
                    "));\r\n/// <reference path=\"../util.ts\" />\r\n/// <reference path=\"../../JavaScriptS" +
                    "DK.Interfaces/Context/IOperation.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {" +
                    "\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        v" +
                    "ar Context;\r\n        (function (Context) {\r\n            \"use strict\";\r\n         " +
                    "   var Operation = (function () {\r\n                function Operation() {\r\n     " +
                    "               this.id = ApplicationInsights.Util.newId();\r\n                    " +
                    "if (window && window.location && window.location.pathname) {\r\n                  " +
                    "      this.name = window.location.pathname;\r\n                    }\r\n            " +
                    "    }\r\n                return Operation;\r\n            })();\r\n            Context" +
                    ".Operation = Operation;\r\n        })(Context = ApplicationInsights.Context || (Ap" +
                    "plicationInsights.Context = {}));\r\n    })(ApplicationInsights = Microsoft.Applic" +
                    "ationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Micros" +
                    "oft = {}));\r\n/// <reference path=\"./HashCodeScoreGenerator.ts\" />\r\n/// <referenc" +
                    "e path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\nvar Mic" +
                    "rosoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (A" +
                    "pplicationInsights) {\r\n        var SamplingScoreGenerator = (function () {\r\n    " +
                    "        function SamplingScoreGenerator() {\r\n                this.hashCodeGenera" +
                    "gor = new ApplicationInsights.HashCodeScoreGenerator();\r\n            }\r\n        " +
                    "    SamplingScoreGenerator.prototype.getSamplingScore = function (envelope) {\r\n " +
                    "               var tagKeys = new AI.ContextTagKeys();\r\n                var score" +
                    " = 0;\r\n                if (envelope.tags[tagKeys.userId]) {\r\n                   " +
                    " score = this.hashCodeGeneragor.getHashCodeScore(envelope.tags[tagKeys.userId]);" +
                    "\r\n                }\r\n                else if (envelope.tags[tagKeys.operationId]" +
                    ") {\r\n                    score = this.hashCodeGeneragor.getHashCodeScore(envelop" +
                    "e.tags[tagKeys.operationId]);\r\n                }\r\n                else {\r\n      " +
                    "              score = Math.random();\r\n                }\r\n                return " +
                    "score;\r\n            };\r\n            return SamplingScoreGenerator;\r\n        })()" +
                    ";\r\n        ApplicationInsights.SamplingScoreGenerator = SamplingScoreGenerator;\r" +
                    "\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsoft.Applic" +
                    "ationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar Microsoft;\r\n(func" +
                    "tion (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsi" +
                    "ghts) {\r\n        var Context;\r\n        (function (Context) {\r\n            \"use s" +
                    "trict\";\r\n        })(Context = ApplicationInsights.Context || (ApplicationInsight" +
                    "s.Context = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights ||" +
                    " (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n///" +
                    " <reference path=\"../SamplingScoreGenerator.ts\" />\r\n/// <reference path=\"../../J" +
                    "avaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/// <reference path" +
                    "=\"../../JavaScriptSDK.Interfaces/Context/ISample.ts\" />\r\nvar Microsoft;\r\n(functi" +
                    "on (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsigh" +
                    "ts) {\r\n        var Context;\r\n        (function (Context) {\r\n            \"use str" +
                    "ict\";\r\n            var Sample = (function () {\r\n                function Sample(" +
                    "sampleRate) {\r\n                    this.INT_MAX_VALUE = 2147483647;\r\n           " +
                    "         if (sampleRate > 100 || sampleRate < 0) {\r\n                        Appl" +
                    "icationInsights._InternalLogging.throwInternalUserActionable(ApplicationInsights" +
                    ".LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(Applicatio" +
                    "nInsights._InternalMessageId.USRACT_SampleRateOutOfRange, \"Sampling rate is out " +
                    "of range (0..100). Sampling will be disabled, you may be sending too much data w" +
                    "hich may affect your AI service level.\", { samplingRate: sampleRate }));\r\n      " +
                    "                  this.sampleRate = 100;\r\n                    }\r\n               " +
                    "     this.sampleRate = sampleRate;\r\n                    this.samplingScoreGenera" +
                    "tor = new ApplicationInsights.SamplingScoreGenerator();\r\n                }\r\n    " +
                    "            Sample.prototype.isSampledIn = function (envelope) {\r\n              " +
                    "      if (this.sampleRate == 100)\r\n                        return true;\r\n       " +
                    "             var score = this.samplingScoreGenerator.getSamplingScore(envelope);" +
                    "\r\n                    return score < this.sampleRate;\r\n                };\r\n     " +
                    "           return Sample;\r\n            })();\r\n            Context.Sample = Sampl" +
                    "e;\r\n        })(Context = ApplicationInsights.Context || (ApplicationInsights.Con" +
                    "text = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Mic" +
                    "rosoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar AI;\r" +
                    "\n(function (AI) {\r\n    \"use strict\";\r\n    (function (SessionState) {\r\n        Se" +
                    "ssionState[SessionState[\"Start\"] = 0] = \"Start\";\r\n        SessionState[SessionSt" +
                    "ate[\"End\"] = 1] = \"End\";\r\n    })(AI.SessionState || (AI.SessionState = {}));\r\n  " +
                    "  var SessionState = AI.SessionState;\r\n})(AI || (AI = {}));\r\nvar Microsoft;\r\n(fu" +
                    "nction (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationIn" +
                    "sights) {\r\n        var Context;\r\n        (function (Context) {\r\n            \"use" +
                    " strict\";\r\n        })(Context = ApplicationInsights.Context || (ApplicationInsig" +
                    "hts.Context = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights " +
                    "|| (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/" +
                    "// <reference path=\"../util.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Int" +
                    "erfaces/Contracts/Generated/SessionState.ts\"/>\r\n/// <reference path=\"../../JavaS" +
                    "criptSDK.Interfaces/Context/ISession.ts\" />\r\nvar Microsoft;\r\n(function (Microsof" +
                    "t) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n     " +
                    "   var Context;\r\n        (function (Context) {\r\n            \"use strict\";\r\n     " +
                    "       var Session = (function () {\r\n                function Session() {\r\n     " +
                    "           }\r\n                return Session;\r\n            })();\r\n            Co" +
                    "ntext.Session = Session;\r\n            var _SessionManager = (function () {\r\n    " +
                    "            function _SessionManager(config) {\r\n                    if (!config)" +
                    " {\r\n                        config = {};\r\n                    }\r\n               " +
                    "     if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n               " +
                    "         config.sessionExpirationMs = function () { return _SessionManager.acqui" +
                    "sitionSpan; };\r\n                    }\r\n                    if (!(typeof config.s" +
                    "essionRenewalMs === \"function\")) {\r\n                        config.sessionRenewa" +
                    "lMs = function () { return _SessionManager.renewalSpan; };\r\n                    " +
                    "}\r\n                    this.config = config;\r\n                    this.automatic" +
                    "Session = new Session();\r\n                }\r\n                _SessionManager.pro" +
                    "totype.update = function () {\r\n                    if (!this.automaticSession.id" +
                    ") {\r\n                        this.initializeAutomaticSession();\r\n               " +
                    "     }\r\n                    var now = +new Date;\r\n                    var acquis" +
                    "itionExpired = now - this.automaticSession.acquisitionDate > this.config.session" +
                    "ExpirationMs();\r\n                    var renewalExpired = now - this.automaticSe" +
                    "ssion.renewalDate > this.config.sessionRenewalMs();\r\n                    if (acq" +
                    "uisitionExpired || renewalExpired) {\r\n                        this.automaticSess" +
                    "ion.isFirst = undefined;\r\n                        this.renew();\r\n               " +
                    "     }\r\n                    else {\r\n                        this.automaticSessio" +
                    "n.renewalDate = +new Date;\r\n                        this.setCookie(this.automati" +
                    "cSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewa" +
                    "lDate);\r\n                    }\r\n                };\r\n                _SessionMana" +
                    "ger.prototype.backup = function () {\r\n                    this.setStorage(this.a" +
                    "utomaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession" +
                    ".renewalDate);\r\n                };\r\n                _SessionManager.prototype.in" +
                    "itializeAutomaticSession = function () {\r\n                    var cookie = Appli" +
                    "cationInsights.Util.getCookie(\'ai_session\');\r\n                    if (cookie && " +
                    "typeof cookie.split === \"function\") {\r\n                        this.initializeAu" +
                    "tomaticSessionWithData(cookie);\r\n                    }\r\n                    else" +
                    " {\r\n                        var storage = ApplicationInsights.Util.getStorage(\'a" +
                    "i_session\');\r\n                        if (storage) {\r\n                          " +
                    "  this.initializeAutomaticSessionWithData(storage);\r\n                        }\r\n" +
                    "                    }\r\n                    if (!this.automaticSession.id) {\r\n   " +
                    "                     this.automaticSession.isFirst = true;\r\n                    " +
                    "    this.renew();\r\n                    }\r\n                };\r\n                _S" +
                    "essionManager.prototype.initializeAutomaticSessionWithData = function (sessionDa" +
                    "ta) {\r\n                    var params = sessionData.split(\"|\");\r\n               " +
                    "     if (params.length > 0) {\r\n                        this.automaticSession.id " +
                    "= params[0];\r\n                    }\r\n                    try {\r\n                " +
                    "        if (params.length > 1) {\r\n                            var acq = +params[" +
                    "1];\r\n                            this.automaticSession.acquisitionDate = +new Da" +
                    "te(acq);\r\n                            this.automaticSession.acquisitionDate = th" +
                    "is.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate " +
                    ": 0;\r\n                        }\r\n                        if (params.length > 2) " +
                    "{\r\n                            var renewal = +params[2];\r\n                      " +
                    "      this.automaticSession.renewalDate = +new Date(renewal);\r\n                 " +
                    "           this.automaticSession.renewalDate = this.automaticSession.renewalDate" +
                    " > 0 ? this.automaticSession.renewalDate : 0;\r\n                        }\r\n      " +
                    "              }\r\n                    catch (e) {\r\n                        Applic" +
                    "ationInsights._InternalLogging.throwInternalNonUserActionable(ApplicationInsight" +
                    "s.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessage(Applicat" +
                    "ionInsights._InternalMessageId.NONUSRACT_ErrorParsingAISessionCookie, \"Error par" +
                    "sing ai_session cookie, session will be reset: \" + ApplicationInsights.Util.getE" +
                    "xceptionName(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n           " +
                    "         }\r\n                    if (this.automaticSession.renewalDate == 0) {\r\n " +
                    "                       ApplicationInsights._InternalLogging.throwInternalNonUser" +
                    "Actionable(ApplicationInsights.LoggingSeverity.WARNING, new ApplicationInsights." +
                    "_InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_SessionRene" +
                    "walDateIsZero, \"AI session renewal date is 0, session will be reset.\"));\r\n      " +
                    "              }\r\n                };\r\n                _SessionManager.prototype.r" +
                    "enew = function () {\r\n                    var now = +new Date;\r\n                " +
                    "    this.automaticSession.id = ApplicationInsights.Util.newId();\r\n              " +
                    "      this.automaticSession.acquisitionDate = now;\r\n                    this.aut" +
                    "omaticSession.renewalDate = now;\r\n                    this.setCookie(this.automa" +
                    "ticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.rene" +
                    "walDate);\r\n                    if (!ApplicationInsights.Util.canUseLocalStorage(" +
                    ")) {\r\n                        ApplicationInsights._InternalLogging.throwInternal" +
                    "NonUserActionable(ApplicationInsights.LoggingSeverity.WARNING, new ApplicationIn" +
                    "sights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_Brow" +
                    "serDoesNotSupportLocalStorage, \"Browser does not support local storage. Session " +
                    "durations will be inaccurate.\"));\r\n                    }\r\n                };\r\n  " +
                    "              _SessionManager.prototype.setCookie = function (guid, acq, renewal" +
                    ") {\r\n                    var acquisitionExpiry = acq + this.config.sessionExpira" +
                    "tionMs();\r\n                    var renewalExpiry = renewal + this.config.session" +
                    "RenewalMs();\r\n                    var cookieExpiry = new Date();\r\n              " +
                    "      var cookie = [guid, acq, renewal];\r\n                    if (acquisitionExp" +
                    "iry < renewalExpiry) {\r\n                        cookieExpiry.setTime(acquisition" +
                    "Expiry);\r\n                    }\r\n                    else {\r\n                   " +
                    "     cookieExpiry.setTime(renewalExpiry);\r\n                    }\r\n              " +
                    "      var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() " +
                    ": null;\r\n                    ApplicationInsights.Util.setCookie(\'ai_session\', co" +
                    "okie.join(\'|\') + \';expires=\' + cookieExpiry.toUTCString(), cookieDomnain);\r\n    " +
                    "            };\r\n                _SessionManager.prototype.setStorage = function " +
                    "(guid, acq, renewal) {\r\n                    ApplicationInsights.Util.setStorage(" +
                    "\'ai_session\', [guid, acq, renewal].join(\'|\'));\r\n                };\r\n            " +
                    "    _SessionManager.acquisitionSpan = 86400000;\r\n                _SessionManager" +
                    ".renewalSpan = 1800000;\r\n                return _SessionManager;\r\n            })" +
                    "();\r\n            Context._SessionManager = _SessionManager;\r\n        })(Context " +
                    "= ApplicationInsights.Context || (ApplicationInsights.Context = {}));\r\n    })(Ap" +
                    "plicationInsights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsig" +
                    "hts = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar Microsoft;\r\n(function (Micr" +
                    "osoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n " +
                    "       var Context;\r\n        (function (Context) {\r\n            \"use strict\";\r\n " +
                    "       })(Context = ApplicationInsights.Context || (ApplicationInsights.Context " +
                    "= {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsof" +
                    "t.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <referenc" +
                    "e path=\"../util.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Cont" +
                    "ext/IUser.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationIn" +
                    "sights;\r\n    (function (ApplicationInsights) {\r\n        var Context;\r\n        (f" +
                    "unction (Context) {\r\n            \"use strict\";\r\n            var User = (function" +
                    " () {\r\n                function User(config) {\r\n                    var cookie =" +
                    " ApplicationInsights.Util.getCookie(User.userCookieName);\r\n                    i" +
                    "f (cookie) {\r\n                        var params = cookie.split(User.cookieSepar" +
                    "ator);\r\n                        if (params.length > 0) {\r\n                      " +
                    "      this.id = params[0];\r\n                        }\r\n                    }\r\n  " +
                    "                  this.config = config;\r\n                    if (!this.id) {\r\n  " +
                    "                      this.id = ApplicationInsights.Util.newId();\r\n             " +
                    "           var date = new Date();\r\n                        var acqStr = Applicat" +
                    "ionInsights.Util.toISOStringForIE8(date);\r\n                        this.accountA" +
                    "cquisitionDate = acqStr;\r\n                        date.setTime(date.getTime() + " +
                    "31536000000);\r\n                        var newCookie = [this.id, acqStr];\r\n     " +
                    "                   var cookieDomain = this.config.cookieDomain ? this.config.coo" +
                    "kieDomain() : undefined;\r\n                        ApplicationInsights.Util.setCo" +
                    "okie(User.userCookieName, newCookie.join(User.cookieSeparator) + \';expires=\' + d" +
                    "ate.toUTCString(), cookieDomain);\r\n                        ApplicationInsights.U" +
                    "til.removeStorage(\'ai_session\');\r\n                    }\r\n                    thi" +
                    "s.accountId = config.accountId ? config.accountId() : undefined;\r\n              " +
                    "      var authCookie = ApplicationInsights.Util.getCookie(User.authUserCookieNam" +
                    "e);\r\n                    if (authCookie) {\r\n                        authCookie =" +
                    " decodeURI(authCookie);\r\n                        var authCookieString = authCook" +
                    "ie.split(User.cookieSeparator);\r\n                        if (authCookieString[0]" +
                    ") {\r\n                            this.authenticatedId = authCookieString[0];\r\n  " +
                    "                      }\r\n                        if (authCookieString.length > 1" +
                    " && authCookieString[1]) {\r\n                            this.accountId = authCoo" +
                    "kieString[1];\r\n                        }\r\n                    }\r\n               " +
                    " }\r\n                User.prototype.setAuthenticatedUserContext = function (authe" +
                    "nticatedUserId, accountId) {\r\n                    var isInvalidInput = !this.val" +
                    "idateUserInput(authenticatedUserId) || (accountId && !this.validateUserInput(acc" +
                    "ountId));\r\n                    if (isInvalidInput) {\r\n                        Ap" +
                    "plicationInsights._InternalLogging.throwInternalUserActionable(ApplicationInsigh" +
                    "ts.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(Applicat" +
                    "ionInsights._InternalMessageId.USRACT_SetAuthContextFailedAccountName, \"Setting " +
                    "auth user context failed. \" +\r\n                            \"User auth/account id" +
                    " should be of type string, and not contain commas, semi-colons, equal signs, spa" +
                    "ces, or vertical-bars.\"));\r\n                        return;\r\n                   " +
                    " }\r\n                    this.authenticatedId = authenticatedUserId;\r\n           " +
                    "         var authCookie = this.authenticatedId;\r\n                    if (account" +
                    "Id) {\r\n                        this.accountId = accountId;\r\n                    " +
                    "    authCookie = [this.authenticatedId, this.accountId].join(User.cookieSeparato" +
                    "r);\r\n                    }\r\n                    ApplicationInsights.Util.setCook" +
                    "ie(User.authUserCookieName, encodeURI(authCookie), this.config.cookieDomain());\r" +
                    "\n                };\r\n                User.prototype.clearAuthenticatedUserContex" +
                    "t = function () {\r\n                    this.authenticatedId = null;\r\n           " +
                    "         this.accountId = null;\r\n                    ApplicationInsights.Util.de" +
                    "leteCookie(User.authUserCookieName);\r\n                };\r\n                User.p" +
                    "rototype.validateUserInput = function (id) {\r\n                    if (typeof id " +
                    "!== \'string\' ||\r\n                        !id ||\r\n                        id.matc" +
                    "h(/,|;|=| |\\|/)) {\r\n                        return false;\r\n                    }" +
                    "\r\n                    return true;\r\n                };\r\n                User.coo" +
                    "kieSeparator = \'|\';\r\n                User.userCookieName = \'ai_user\';\r\n         " +
                    "       User.authUserCookieName = \'ai_authUser\';\r\n                return User;\r\n " +
                    "           })();\r\n            Context.User = User;\r\n        })(Context = Applica" +
                    "tionInsights.Context || (ApplicationInsights.Context = {}));\r\n    })(Application" +
                    "Insights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {})" +
                    ");\r\n})(Microsoft || (Microsoft = {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r" +
                    "\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        \"u" +
                    "se strict\";\r\n        var DataLossAnalyzer = (function () {\r\n            function" +
                    " DataLossAnalyzer() {\r\n            }\r\n            DataLossAnalyzer.reset = funct" +
                    "ion () {\r\n                if (DataLossAnalyzer.isEnabled()) {\r\n                 " +
                    "   ApplicationInsights.Util.setSessionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY," +
                    " \"0\");\r\n                    DataLossAnalyzer.itemsRestoredFromSessionBuffer = 0;" +
                    "\r\n                }\r\n            };\r\n            DataLossAnalyzer.isEnabled = fu" +
                    "nction () {\r\n                return DataLossAnalyzer.enabled &&\r\n               " +
                    "     DataLossAnalyzer.appInsights != null &&\r\n                    DataLossAnalyz" +
                    "er.appInsights.context._sender._XMLHttpRequestSupported &&\r\n                    " +
                    "ApplicationInsights.Util.canUseSessionStorage();\r\n            };\r\n            Da" +
                    "taLossAnalyzer.getIssuesReported = function () {\r\n                var result = (" +
                    "!DataLossAnalyzer.isEnabled() || isNaN(+ApplicationInsights.Util.getSessionStora" +
                    "ge(DataLossAnalyzer.ISSUES_REPORTED_KEY))) ?\r\n                    0 :\r\n         " +
                    "           +ApplicationInsights.Util.getSessionStorage(DataLossAnalyzer.ISSUES_R" +
                    "EPORTED_KEY);\r\n                return result;\r\n            };\r\n            DataL" +
                    "ossAnalyzer.incrementItemsQueued = function () {\r\n                try {\r\n       " +
                    "             if (DataLossAnalyzer.isEnabled()) {\r\n                        var it" +
                    "emsQueued = DataLossAnalyzer.getNumberOfLostItems();\r\n                        ++" +
                    "itemsQueued;\r\n                        ApplicationInsights.Util.setSessionStorage" +
                    "(DataLossAnalyzer.ITEMS_QUEUED_KEY, itemsQueued.toString());\r\n                  " +
                    "  }\r\n                }\r\n                catch (e) { }\r\n            };\r\n         " +
                    "   DataLossAnalyzer.decrementItemsQueued = function (countOfItemsSentSuccessfull" +
                    "y) {\r\n                try {\r\n                    if (DataLossAnalyzer.isEnabled(" +
                    ")) {\r\n                        var itemsQueued = DataLossAnalyzer.getNumberOfLost" +
                    "Items();\r\n                        itemsQueued -= countOfItemsSentSuccessfully;\r\n" +
                    "                        if (itemsQueued < 0)\r\n                            itemsQ" +
                    "ueued = 0;\r\n                        ApplicationInsights.Util.setSessionStorage(D" +
                    "ataLossAnalyzer.ITEMS_QUEUED_KEY, itemsQueued.toString());\r\n                    " +
                    "}\r\n                }\r\n                catch (e) { }\r\n            };\r\n           " +
                    " DataLossAnalyzer.getNumberOfLostItems = function () {\r\n                var resu" +
                    "lt = 0;\r\n                try {\r\n                    if (DataLossAnalyzer.isEnabl" +
                    "ed()) {\r\n                        result = isNaN(+ApplicationInsights.Util.getSes" +
                    "sionStorage(DataLossAnalyzer.ITEMS_QUEUED_KEY)) ?\r\n                            0" +
                    " :\r\n                            +ApplicationInsights.Util.getSessionStorage(Data" +
                    "LossAnalyzer.ITEMS_QUEUED_KEY);\r\n                    }\r\n                }\r\n     " +
                    "           catch (e) {\r\n                    result = 0;\r\n                }\r\n    " +
                    "            return result;\r\n            };\r\n            DataLossAnalyzer.reportL" +
                    "ostItems = function () {\r\n                try {\r\n                    if (DataLos" +
                    "sAnalyzer.isEnabled() &&\r\n                        DataLossAnalyzer.getIssuesRepo" +
                    "rted() < DataLossAnalyzer.LIMIT_PER_SESSION &&\r\n                        DataLoss" +
                    "Analyzer.getNumberOfLostItems() > 0) {\r\n                        var lostItems = " +
                    "DataLossAnalyzer.getNumberOfLostItems() - DataLossAnalyzer.itemsRestoredFromSess" +
                    "ionBuffer;\r\n                        DataLossAnalyzer.appInsights.trackTrace(\"AI " +
                    "(Internal): Internal report DATALOSS:\\\"\" + lostItems + \"\\\"\", null);\r\n           " +
                    "             DataLossAnalyzer.appInsights.flush();\r\n                        var " +
                    "issuesReported = DataLossAnalyzer.getIssuesReported();\r\n                        " +
                    "++issuesReported;\r\n                        ApplicationInsights.Util.setSessionSt" +
                    "orage(DataLossAnalyzer.ISSUES_REPORTED_KEY, issuesReported.toString());\r\n       " +
                    "             }\r\n                }\r\n                catch (e) {\r\n                " +
                    "    ApplicationInsights._InternalLogging.throwInternalNonUserActionable(Applicat" +
                    "ionInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessag" +
                    "e(ApplicationInsights._InternalMessageId.NONUSRACT_FailedToReportDataLoss, \"Fail" +
                    "ed to report data loss: \" + ApplicationInsights.Util.getExceptionName(e), { exce" +
                    "ption: ApplicationInsights.Util.dump(e) }));\r\n                }\r\n               " +
                    " finally {\r\n                    try {\r\n                        DataLossAnalyzer." +
                    "reset();\r\n                    }\r\n                    catch (e) { }\r\n            " +
                    "    }\r\n            };\r\n            DataLossAnalyzer.enabled = false;\r\n          " +
                    "  DataLossAnalyzer.itemsRestoredFromSessionBuffer = 0;\r\n            DataLossAnal" +
                    "yzer.LIMIT_PER_SESSION = 10;\r\n            DataLossAnalyzer.ITEMS_QUEUED_KEY = \"A" +
                    "I_itemsQueued\";\r\n            DataLossAnalyzer.ISSUES_REPORTED_KEY = \"AI_lossIssu" +
                    "esReported\";\r\n            return DataLossAnalyzer;\r\n        })();\r\n        Appli" +
                    "cationInsights.DataLossAnalyzer = DataLossAnalyzer;\r\n    })(ApplicationInsights " +
                    "= Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Mi" +
                    "crosoft || (Microsoft = {}));\r\n/// <reference path=\"serializer.ts\" />\r\n/// <refe" +
                    "rence path=\"Telemetry/Common/Envelope.ts\"/>\r\n/// <reference path=\"Telemetry/Comm" +
                    "on/Base.ts\" />\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/Contracts/Gener" +
                    "ated/ContextTagKeys.ts\"/>\r\n/// <reference path=\"Context/Application.ts\"/>\r\n/// <" +
                    "reference path=\"Context/Device.ts\"/>\r\n/// <reference path=\"Context/Internal.ts\"/" +
                    ">\r\n/// <reference path=\"Context/Location.ts\"/>\r\n/// <reference path=\"Context/Ope" +
                    "ration.ts\"/>\r\n/// <reference path=\"Context/Sample.ts\"/>\r\n/// <reference path=\"Co" +
                    "ntext/Session.ts\"/>\r\n/// <reference path=\"Context/User.ts\"/>\r\n/// <reference pat" +
                    "h=\"ajax/ajax.ts\"/>\r\n/// <reference path=\"DataLossAnalyzer.ts\"/>\r\nvar Microsoft;\r" +
                    "\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Applicati" +
                    "onInsights) {\r\n        \"use strict\";\r\n        var ArraySendBuffer = (function ()" +
                    " {\r\n            function ArraySendBuffer(config) {\r\n                this._config" +
                    " = config;\r\n                this._buffer = [];\r\n            }\r\n            Array" +
                    "SendBuffer.prototype.enqueue = function (payload) {\r\n                this._buffe" +
                    "r.push(payload);\r\n            };\r\n            ArraySendBuffer.prototype.count = " +
                    "function () {\r\n                return this._buffer.length;\r\n            };\r\n    " +
                    "        ArraySendBuffer.prototype.clear = function () {\r\n                this._b" +
                    "uffer.length = 0;\r\n            };\r\n            ArraySendBuffer.prototype.getItem" +
                    "s = function () {\r\n                return this._buffer.slice(0);\r\n            };" +
                    "\r\n            ArraySendBuffer.prototype.batchPayloads = function (payload) {\r\n  " +
                    "              if (payload && payload.length > 0) {\r\n                    var batc" +
                    "h = this._config.emitLineDelimitedJson() ?\r\n                        payload.join" +
                    "(\"\\n\") :\r\n                        \"[\" + payload.join(\",\") + \"]\";\r\n              " +
                    "      return batch;\r\n                }\r\n                return null;\r\n          " +
                    "  };\r\n            ArraySendBuffer.prototype.markAsSent = function (payload) {\r\n " +
                    "               this.clear();\r\n            };\r\n            ArraySendBuffer.protot" +
                    "ype.clearSent = function (payload) {\r\n                this.clear();\r\n           " +
                    " };\r\n            return ArraySendBuffer;\r\n        })();\r\n        ApplicationInsi" +
                    "ghts.ArraySendBuffer = ArraySendBuffer;\r\n        var SessionStorageSendBuffer = " +
                    "(function () {\r\n            function SessionStorageSendBuffer(config) {\r\n       " +
                    "         this._config = config;\r\n                var bufferItems = this.getBuffe" +
                    "r(SessionStorageSendBuffer.BUFFER_KEY);\r\n                var notDeliveredItems =" +
                    " this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n                this" +
                    "._buffer = bufferItems.concat(notDeliveredItems);\r\n                ApplicationIn" +
                    "sights.DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\r\n " +
                    "               this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer)" +
                    ";\r\n                this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);" +
                    "\r\n            }\r\n            SessionStorageSendBuffer.prototype.enqueue = functi" +
                    "on (payload) {\r\n                this._buffer.push(payload);\r\n                thi" +
                    "s.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n            };\r" +
                    "\n            SessionStorageSendBuffer.prototype.count = function () {\r\n         " +
                    "       return this._buffer.length;\r\n            };\r\n            SessionStorageSe" +
                    "ndBuffer.prototype.clear = function () {\r\n                this._buffer.length = " +
                    "0;\r\n                this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\r\n  " +
                    "              this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n   " +
                    "         };\r\n            SessionStorageSendBuffer.prototype.getItems = function " +
                    "() {\r\n                return this._buffer.slice(0);\r\n            };\r\n           " +
                    " SessionStorageSendBuffer.prototype.batchPayloads = function (payload) {\r\n      " +
                    "          if (payload && payload.length > 0) {\r\n                    var batch = " +
                    "this._config.emitLineDelimitedJson() ?\r\n                        payload.join(\"\\n" +
                    "\") :\r\n                        \"[\" + payload.join(\",\") + \"]\";\r\n                  " +
                    "  return batch;\r\n                }\r\n                return null;\r\n            };" +
                    "\r\n            SessionStorageSendBuffer.prototype.markAsSent = function (payload)" +
                    " {\r\n                var sentElements = this.getBuffer(SessionStorageSendBuffer.S" +
                    "ENT_BUFFER_KEY);\r\n                sentElements = sentElements.concat(payload);\r\n" +
                    "                this._buffer = this.removePayloadsFromBuffer(payload, this._buff" +
                    "er);\r\n                this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._" +
                    "buffer);\r\n                this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KE" +
                    "Y, sentElements);\r\n            };\r\n            SessionStorageSendBuffer.prototyp" +
                    "e.clearSent = function (payload) {\r\n                var sentElements = this.getB" +
                    "uffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n                sentElements =" +
                    " this.removePayloadsFromBuffer(payload, sentElements);\r\n                this.set" +
                    "Buffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n            };\r" +
                    "\n            SessionStorageSendBuffer.prototype.removePayloadsFromBuffer = funct" +
                    "ion (payloads, buffer) {\r\n                var remaining = [];\r\n                f" +
                    "or (var i in buffer) {\r\n                    var contains = false;\r\n             " +
                    "       for (var j in payloads) {\r\n                        if (payloads[j] === bu" +
                    "ffer[i]) {\r\n                            contains = true;\r\n                      " +
                    "      break;\r\n                        }\r\n                    }\r\n                " +
                    "    if (!contains) {\r\n                        remaining.push(buffer[i]);\r\n      " +
                    "              }\r\n                }\r\n                ;\r\n                return re" +
                    "maining;\r\n            };\r\n            SessionStorageSendBuffer.prototype.getBuff" +
                    "er = function (key) {\r\n                try {\r\n                    var bufferJson" +
                    " = ApplicationInsights.Util.getSessionStorage(key);\r\n                    if (buf" +
                    "ferJson) {\r\n                        var buffer = JSON.parse(bufferJson);\r\n      " +
                    "                  if (buffer) {\r\n                            return buffer;\r\n   " +
                    "                     }\r\n                    }\r\n                }\r\n              " +
                    "  catch (e) {\r\n                    ApplicationInsights._InternalLogging.throwInt" +
                    "ernalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new Applica" +
                    "tionInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRAC" +
                    "T_FailToRestoreStorageBuffer, \" storage key: \" + key + \", \" + ApplicationInsight" +
                    "s.Util.getExceptionName(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n" +
                    "                }\r\n                return [];\r\n            };\r\n            Sessi" +
                    "onStorageSendBuffer.prototype.setBuffer = function (key, buffer) {\r\n            " +
                    "    try {\r\n                    var bufferJson = JSON.stringify(buffer);\r\n       " +
                    "             ApplicationInsights.Util.setSessionStorage(key, bufferJson);\r\n     " +
                    "           }\r\n                catch (e) {\r\n                    ApplicationInsigh" +
                    "ts._InternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSe" +
                    "verity.CRITICAL, new ApplicationInsights._InternalLogMessage(ApplicationInsights" +
                    "._InternalMessageId.NONUSRACT_FailToSetStorageBuffer, \" storage key: \" + key + \"" +
                    ", \" + ApplicationInsights.Util.getExceptionName(e), { exception: ApplicationInsi" +
                    "ghts.Util.dump(e) }));\r\n                }\r\n            };\r\n            SessionSt" +
                    "orageSendBuffer.BUFFER_KEY = \"AI_buffer\";\r\n            SessionStorageSendBuffer." +
                    "SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n            return SessionStorageSendBuffer;" +
                    "\r\n        })();\r\n        ApplicationInsights.SessionStorageSendBuffer = SessionS" +
                    "torageSendBuffer;\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights ||" +
                    " (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n///" +
                    " <reference path=\"serializer.ts\" />\r\n/// <reference path=\"Telemetry/Common/Envel" +
                    "ope.ts\"/>\r\n/// <reference path=\"Telemetry/Common/Base.ts\" />\r\n/// <reference pat" +
                    "h=\"../JavaScriptSDK.Interfaces/Contracts/Generated/ContextTagKeys.ts\"/>\r\n/// <re" +
                    "ference path=\"../JavaScriptSDK.Interfaces/Contracts/Generated/Envelope.ts\" />\r\n/" +
                    "// <reference path=\"Context/Application.ts\"/>\r\n/// <reference path=\"Context/Devi" +
                    "ce.ts\"/>\r\n/// <reference path=\"Context/Internal.ts\"/>\r\n/// <reference path=\"Cont" +
                    "ext/Location.ts\"/>\r\n/// <reference path=\"Context/Operation.ts\"/>\r\n/// <reference" +
                    " path=\"Context/Sample.ts\"/>\r\n/// <reference path=\"Context/Session.ts\"/>\r\n/// <re" +
                    "ference path=\"Context/User.ts\"/>\r\n/// <reference path=\"ajax/ajax.ts\"/>\r\n/// <ref" +
                    "erence path=\"DataLossAnalyzer.ts\"/>\r\n/// <reference path=\"SendBuffer.ts\"/>\r\n;\r\nv" +
                    "ar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (funct" +
                    "ion (ApplicationInsights) {\r\n        \"use strict\";\r\n        var Sender = (functi" +
                    "on () {\r\n            function Sender(config) {\r\n                this._XMLHttpReq" +
                    "uestSupported = false;\r\n                this._lastSend = 0;\r\n                thi" +
                    "s._config = config;\r\n                this._sender = null;\r\n                this." +
                    "_buffer = (ApplicationInsights.Util.canUseSessionStorage() && this._config.enabl" +
                    "eSessionStorageBuffer())\r\n                    ? new ApplicationInsights.SessionS" +
                    "torageSendBuffer(config) : new ApplicationInsights.ArraySendBuffer(config);\r\n   " +
                    "             if (typeof XMLHttpRequest != \"undefined\") {\r\n                    va" +
                    "r testXhr = new XMLHttpRequest();\r\n                    if (\"withCredentials\" in " +
                    "testXhr) {\r\n                        this._sender = this._xhrSender;\r\n           " +
                    "             this._XMLHttpRequestSupported = true;\r\n                    }\r\n     " +
                    "               else if (typeof XDomainRequest !== \"undefined\") {\r\n              " +
                    "          this._sender = this._xdrSender;\r\n                    }\r\n              " +
                    "  }\r\n            }\r\n            Sender.prototype.send = function (envelope) {\r\n " +
                    "               var _this = this;\r\n                try {\r\n                    if " +
                    "(this._config.disableTelemetry()) {\r\n                        return;\r\n          " +
                    "          }\r\n                    if (!envelope) {\r\n                        Appli" +
                    "cationInsights._InternalLogging.throwInternalNonUserActionable(ApplicationInsigh" +
                    "ts.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessage(Applica" +
                    "tionInsights._InternalMessageId.NONUSRACT_CannotSendEmptyTelemetry, \"Cannot send" +
                    " empty telemetry\"));\r\n                        return;\r\n                    }\r\n  " +
                    "                  if (!this._sender) {\r\n                        ApplicationInsig" +
                    "hts._InternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingS" +
                    "everity.CRITICAL, new ApplicationInsights._InternalLogMessage(ApplicationInsight" +
                    "s._InternalMessageId.NONUSRACT_SenderNotInitialized, \"Sender was not initialized" +
                    "\"));\r\n                        return;\r\n                    }\r\n                  " +
                    "  var payload = ApplicationInsights.Serializer.serialize(envelope);\r\n           " +
                    "         var bufferPayload = this._buffer.getItems();\r\n                    var b" +
                    "atch = this._buffer.batchPayloads(bufferPayload);\r\n                    if (batch" +
                    " && (batch.length + payload.length > this._config.maxBatchSizeInBytes())) {\r\n   " +
                    "                     this.triggerSend();\r\n                    }\r\n               " +
                    "     this._buffer.enqueue(payload);\r\n                    if (!this._timeoutHandl" +
                    "e) {\r\n                        this._timeoutHandle = setTimeout(function () {\r\n  " +
                    "                          _this._timeoutHandle = null;\r\n                        " +
                    "    _this.triggerSend();\r\n                        }, this._config.maxBatchInterv" +
                    "al());\r\n                    }\r\n                    ApplicationInsights.DataLossA" +
                    "nalyzer.incrementItemsQueued();\r\n                }\r\n                catch (e) {\r" +
                    "\n                    ApplicationInsights._InternalLogging.throwInternalNonUserAc" +
                    "tionable(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._" +
                    "InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_FailedAdding" +
                    "TelemetryToBuffer, \"Failed adding telemetry to the sender\'s buffer, some telemet" +
                    "ry will be lost: \" + ApplicationInsights.Util.getExceptionName(e), { exception: " +
                    "ApplicationInsights.Util.dump(e) }));\r\n                }\r\n            };\r\n      " +
                    "      Sender.prototype._getSizeInBytes = function (list) {\r\n                var " +
                    "size = 0;\r\n                if (list && list.length) {\r\n                    for (" +
                    "var i = 0; i < list.length; i++) {\r\n                        var item = list[i];\r" +
                    "\n                        if (item && item.length) {\r\n                           " +
                    " size += item.length;\r\n                        }\r\n                    }\r\n       " +
                    "         }\r\n                return size;\r\n            };\r\n            Sender.pro" +
                    "totype.triggerSend = function (async) {\r\n                var isAsync = true;\r\n  " +
                    "              if (typeof async === \'boolean\') {\r\n                    isAsync = a" +
                    "sync;\r\n                }\r\n                try {\r\n                    if (!this._" +
                    "config.disableTelemetry()) {\r\n                        if (this._buffer.count() >" +
                    " 0) {\r\n                            var payload = this._buffer.getItems();\r\n     " +
                    "                       this._sender(payload, isAsync);\r\n                        " +
                    "}\r\n                        this._lastSend = +new Date;\r\n                    }\r\n " +
                    "                   else {\r\n                        this._buffer.clear();\r\n      " +
                    "              }\r\n                    clearTimeout(this._timeoutHandle);\r\n       " +
                    "             this._timeoutHandle = null;\r\n                }\r\n                cat" +
                    "ch (e) {\r\n                    if (!ApplicationInsights.Util.getIEVersion() || Ap" +
                    "plicationInsights.Util.getIEVersion() > 9) {\r\n                        Applicatio" +
                    "nInsights._InternalLogging.throwInternalNonUserActionable(ApplicationInsights.Lo" +
                    "ggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessage(ApplicationI" +
                    "nsights._InternalMessageId.NONUSRACT_TransmissionFailed, \"Telemetry transmission" +
                    " failed, some telemetry will be lost: \" + ApplicationInsights.Util.getExceptionN" +
                    "ame(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n                    " +
                    "}\r\n                }\r\n            };\r\n            Sender.prototype._xhrSender = " +
                    "function (payload, isAsync) {\r\n                var _this = this;\r\n              " +
                    "  var xhr = new XMLHttpRequest();\r\n                xhr[ApplicationInsights.AjaxM" +
                    "onitor.DisabledPropertyName] = true;\r\n                xhr.open(\"POST\", this._con" +
                    "fig.endpointUrl(), isAsync);\r\n                xhr.setRequestHeader(\"Content-type" +
                    "\", \"application/json\");\r\n                xhr.onreadystatechange = function () { " +
                    "return _this._xhrReadyStateChange(xhr, payload, payload.length); };\r\n           " +
                    "     xhr.onerror = function (event) { return _this._onError(payload, xhr.respons" +
                    "eText || xhr.response || \"\", event); };\r\n                var batch = this._buffe" +
                    "r.batchPayloads(payload);\r\n                xhr.send(batch);\r\n                thi" +
                    "s._buffer.markAsSent(payload);\r\n            };\r\n            Sender.prototype._xd" +
                    "rSender = function (payload, isAsync) {\r\n                var _this = this;\r\n    " +
                    "            var xdr = new XDomainRequest();\r\n                xdr.onload = functi" +
                    "on () { return _this._xdrOnLoad(xdr, payload); };\r\n                xdr.onerror =" +
                    " function (event) { return _this._onError(payload, xdr.responseText || \"\", event" +
                    "); };\r\n                xdr.open(\'POST\', this._config.endpointUrl());\r\n          " +
                    "      var batch = this._buffer.batchPayloads(payload);\r\n                xdr.send" +
                    "(batch);\r\n                this._buffer.markAsSent(payload);\r\n            };\r\n   " +
                    "         Sender.prototype._xhrReadyStateChange = function (xhr, payload, countOf" +
                    "ItemsInPayload) {\r\n                if (xhr.readyState === 4) {\r\n                " +
                    "    if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\r\n        " +
                    "                this._onError(payload, xhr.responseText || xhr.response || \"\");\r" +
                    "\n                    }\r\n                    else {\r\n                        this" +
                    "._onSuccess(payload, countOfItemsInPayload);\r\n                    }\r\n           " +
                    "     }\r\n            };\r\n            Sender.prototype._xdrOnLoad = function (xdr," +
                    " payload) {\r\n                if (xdr && (xdr.responseText + \"\" === \"200\" || xdr." +
                    "responseText === \"\")) {\r\n                    this._onSuccess(payload, 0);\r\n     " +
                    "           }\r\n                else {\r\n                    this._onError(payload," +
                    " xdr && xdr.responseText || \"\");\r\n                }\r\n            };\r\n           " +
                    " Sender.prototype._onError = function (payload, message, event) {\r\n             " +
                    "   ApplicationInsights._InternalLogging.throwInternalNonUserActionable(Applicati" +
                    "onInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(" +
                    "ApplicationInsights._InternalMessageId.NONUSRACT_OnError, \"Failed to send teleme" +
                    "try.\", { message: message }));\r\n                this._buffer.clearSent(payload);" +
                    "\r\n            };\r\n            Sender.prototype._onSuccess = function (payload, c" +
                    "ountOfItemsInPayload) {\r\n                ApplicationInsights.DataLossAnalyzer.de" +
                    "crementItemsQueued(countOfItemsInPayload);\r\n                this._buffer.clearSe" +
                    "nt(payload);\r\n            };\r\n            return Sender;\r\n        })();\r\n       " +
                    " ApplicationInsights.Sender = Sender;\r\n    })(ApplicationInsights = Microsoft.Ap" +
                    "plicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Mi" +
                    "crosoft = {}));\r\n/// <reference path=\"./HashCodeScoreGenerator.ts\" />\r\nvar Micro" +
                    "soft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (App" +
                    "licationInsights) {\r\n        \"use strict\";\r\n        var SplitTest = (function ()" +
                    " {\r\n            function SplitTest() {\r\n                this.hashCodeGeneragor =" +
                    " new ApplicationInsights.HashCodeScoreGenerator();\r\n            }\r\n            S" +
                    "plitTest.prototype.isEnabled = function (key, percentEnabled) {\r\n               " +
                    " return this.hashCodeGeneragor.getHashCodeScore(key) < percentEnabled;\r\n        " +
                    "    };\r\n            return SplitTest;\r\n        })();\r\n        ApplicationInsight" +
                    "s.SplitTest = SplitTest;\r\n    })(ApplicationInsights = Microsoft.ApplicationInsi" +
                    "ghts || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {})" +
                    ");\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Telemetry;\r\n    (function (" +
                    "Telemetry) {\r\n        \"use strict\";\r\n        var Domain = (function () {\r\n      " +
                    "      function Domain() {\r\n            }\r\n            return Domain;\r\n        })" +
                    "();\r\n        Telemetry.Domain = Domain;\r\n    })(Telemetry = Microsoft.Telemetry " +
                    "|| (Microsoft.Telemetry = {}));\r\n})(Microsoft || (Microsoft = {}));\r\nvar AI;\r\n(f" +
                    "unction (AI) {\r\n    \"use strict\";\r\n    (function (SeverityLevel) {\r\n        Seve" +
                    "rityLevel[SeverityLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n        SeverityLevel[Seve" +
                    "rityLevel[\"Information\"] = 1] = \"Information\";\r\n        SeverityLevel[SeverityLe" +
                    "vel[\"Warning\"] = 2] = \"Warning\";\r\n        SeverityLevel[SeverityLevel[\"Error\"] =" +
                    " 3] = \"Error\";\r\n        SeverityLevel[SeverityLevel[\"Critical\"] = 4] = \"Critical" +
                    "\";\r\n    })(AI.SeverityLevel || (AI.SeverityLevel = {}));\r\n    var SeverityLevel " +
                    "= AI.SeverityLevel;\r\n})(AI || (AI = {}));\r\n/// <reference path=\"Domain.ts\" />\r\n/" +
                    "// <reference path=\"SeverityLevel.ts\" />\r\nvar AI;\r\n(function (AI) {\r\n    \"use st" +
                    "rict\";\r\n    var MessageData = (function (_super) {\r\n        __extends(MessageDat" +
                    "a, _super);\r\n        function MessageData() {\r\n            _super.call(this);\r\n " +
                    "           this.ver = 2;\r\n            this.properties = {};\r\n            _super." +
                    "call(this);\r\n        }\r\n        return MessageData;\r\n    })(Microsoft.Telemetry." +
                    "Domain);\r\n    AI.MessageData = MessageData;\r\n})(AI || (AI = {}));\r\n/// <referenc" +
                    "e path=\"../../logging.ts\" />\r\n/// <reference path=\"../../Util.ts\"/>\r\nvar Microso" +
                    "ft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Appli" +
                    "cationInsights) {\r\n        var Telemetry;\r\n        (function (Telemetry) {\r\n    " +
                    "        var Common;\r\n            (function (Common) {\r\n                \"use stri" +
                    "ct\";\r\n                var DataSanitizer = (function () {\r\n                    fu" +
                    "nction DataSanitizer() {\r\n                    }\r\n                    DataSanitiz" +
                    "er.sanitizeKeyAndAddUniqueness = function (key, map) {\r\n                        " +
                    "var origLength = key.length;\r\n                        var field = DataSanitizer." +
                    "sanitizeKey(key);\r\n                        if (field.length !== origLength) {\r\n " +
                    "                           var i = 0;\r\n                            var uniqueFie" +
                    "ld = field;\r\n                            while (map[uniqueField] !== undefined) " +
                    "{\r\n                                i++;\r\n                                uniqueF" +
                    "ield = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.pad" +
                    "Number(i);\r\n                            }\r\n                            field = u" +
                    "niqueField;\r\n                        }\r\n                        return field;\r\n " +
                    "                   };\r\n                    DataSanitizer.sanitizeKey = function " +
                    "(name) {\r\n                        if (name) {\r\n                            name " +
                    "= ApplicationInsights.Util.trim(name.toString());\r\n                            i" +
                    "f (name.search(/[^0-9a-zA-Z-._()\\/ ]/g) >= 0) {\r\n                               " +
                    " name = name.replace(/[^0-9a-zA-Z-._()\\/ ]/g, \"_\");\r\n                           " +
                    "     ApplicationInsights._InternalLogging.throwInternalUserActionable(Applicatio" +
                    "nInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(A" +
                    "pplicationInsights._InternalMessageId.USRACT_IllegalCharsInName, \"name contains " +
                    "illegal characters. Illegal characters have been replaced with \'_\'.\", { newName:" +
                    " name }));\r\n                            }\r\n                            if (name." +
                    "length > DataSanitizer.MAX_NAME_LENGTH) {\r\n                                name " +
                    "= name.substring(0, DataSanitizer.MAX_NAME_LENGTH);\r\n                           " +
                    "     ApplicationInsights._InternalLogging.throwInternalUserActionable(Applicatio" +
                    "nInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(A" +
                    "pplicationInsights._InternalMessageId.USRACT_NameTooLong, \"name is too long.  It" +
                    " has been truncated to \" + DataSanitizer.MAX_NAME_LENGTH + \" characters.\", { nam" +
                    "e: name }));\r\n                            }\r\n                        }\r\n        " +
                    "                return name;\r\n                    };\r\n                    DataSa" +
                    "nitizer.sanitizeString = function (value) {\r\n                        if (value) " +
                    "{\r\n                            value = ApplicationInsights.Util.trim(value);\r\n  " +
                    "                          if (value.toString().length > DataSanitizer.MAX_STRING" +
                    "_LENGTH) {\r\n                                value = value.toString().substring(0" +
                    ", DataSanitizer.MAX_STRING_LENGTH);\r\n                                Application" +
                    "Insights._InternalLogging.throwInternalUserActionable(ApplicationInsights.Loggin" +
                    "gSeverity.WARNING, new ApplicationInsights._InternalLogMessage(ApplicationInsigh" +
                    "ts._InternalMessageId.USRACT_StringValueTooLong, \"string value is too long. It h" +
                    "as been truncated to \" + DataSanitizer.MAX_STRING_LENGTH + \" characters.\", { val" +
                    "ue: value }));\r\n                            }\r\n                        }\r\n      " +
                    "                  return value;\r\n                    };\r\n                    Dat" +
                    "aSanitizer.sanitizeUrl = function (url) {\r\n                        if (url) {\r\n " +
                    "                           url = ApplicationInsights.Util.trim(url);\r\n          " +
                    "                  if (url.length > DataSanitizer.MAX_URL_LENGTH) {\r\n            " +
                    "                    url = url.substring(0, DataSanitizer.MAX_URL_LENGTH);\r\n     " +
                    "                           ApplicationInsights._InternalLogging.throwInternalUse" +
                    "rActionable(ApplicationInsights.LoggingSeverity.WARNING, new ApplicationInsights" +
                    "._InternalLogMessage(ApplicationInsights._InternalMessageId.USRACT_UrlTooLong, \"" +
                    "url is too long, it has been trucated to \" + DataSanitizer.MAX_URL_LENGTH + \" ch" +
                    "aracters.\", { url: url }));\r\n                            }\r\n                    " +
                    "    }\r\n                        return url;\r\n                    };\r\n            " +
                    "        DataSanitizer.sanitizeMessage = function (message) {\r\n                  " +
                    "      if (message) {\r\n                            if (message.length > DataSanit" +
                    "izer.MAX_MESSAGE_LENGTH) {\r\n                                message = message.su" +
                    "bstring(0, DataSanitizer.MAX_MESSAGE_LENGTH);\r\n                                A" +
                    "pplicationInsights._InternalLogging.throwInternalUserActionable(ApplicationInsig" +
                    "hts.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(Applica" +
                    "tionInsights._InternalMessageId.USRACT_MessageTruncated, \"message is too long, i" +
                    "t has been trucated to \" + DataSanitizer.MAX_MESSAGE_LENGTH + \" characters.\", { " +
                    "message: message }));\r\n                            }\r\n                        }\r" +
                    "\n                        return message;\r\n                    };\r\n              " +
                    "      DataSanitizer.sanitizeException = function (exception) {\r\n                " +
                    "        if (exception) {\r\n                            if (exception.length > Dat" +
                    "aSanitizer.MAX_EXCEPTION_LENGTH) {\r\n                                exception = " +
                    "exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);\r\n                   " +
                    "             ApplicationInsights._InternalLogging.throwInternalUserActionable(Ap" +
                    "plicationInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogM" +
                    "essage(ApplicationInsights._InternalMessageId.USRACT_ExceptionTruncated, \"except" +
                    "ion is too long, it has been trucated to \" + DataSanitizer.MAX_EXCEPTION_LENGTH " +
                    "+ \" characters.\", { exception: exception }));\r\n                            }\r\n  " +
                    "                      }\r\n                        return exception;\r\n            " +
                    "        };\r\n                    DataSanitizer.sanitizeProperties = function (pro" +
                    "perties) {\r\n                        if (properties) {\r\n                         " +
                    "   var tempProps = {};\r\n                            for (var prop in properties)" +
                    " {\r\n                                var value = DataSanitizer.sanitizeString(pro" +
                    "perties[prop]);\r\n                                prop = DataSanitizer.sanitizeKe" +
                    "yAndAddUniqueness(prop, tempProps);\r\n                                tempProps[p" +
                    "rop] = value;\r\n                            }\r\n                            proper" +
                    "ties = tempProps;\r\n                        }\r\n                        return pro" +
                    "perties;\r\n                    };\r\n                    DataSanitizer.sanitizeMeas" +
                    "urements = function (measurements) {\r\n                        if (measurements) " +
                    "{\r\n                            var tempMeasurements = {};\r\n                     " +
                    "       for (var measure in measurements) {\r\n                                var " +
                    "value = measurements[measure];\r\n                                measure = DataSa" +
                    "nitizer.sanitizeKeyAndAddUniqueness(measure, tempMeasurements);\r\n               " +
                    "                 tempMeasurements[measure] = value;\r\n                           " +
                    " }\r\n                            measurements = tempMeasurements;\r\n              " +
                    "          }\r\n                        return measurements;\r\n                    }" +
                    ";\r\n                    DataSanitizer.padNumber = function (num) {\r\n             " +
                    "           var s = \"00\" + num;\r\n                        return s.substr(s.length" +
                    " - 3);\r\n                    };\r\n                    DataSanitizer.MAX_NAME_LENGT" +
                    "H = 150;\r\n                    DataSanitizer.MAX_STRING_LENGTH = 1024;\r\n         " +
                    "           DataSanitizer.MAX_URL_LENGTH = 2048;\r\n                    DataSanitiz" +
                    "er.MAX_MESSAGE_LENGTH = 32768;\r\n                    DataSanitizer.MAX_EXCEPTION_" +
                    "LENGTH = 32768;\r\n                    return DataSanitizer;\r\n                })()" +
                    ";\r\n                Common.DataSanitizer = DataSanitizer;\r\n            })(Common " +
                    "= Telemetry.Common || (Telemetry.Common = {}));\r\n        })(Telemetry = Applicat" +
                    "ionInsights.Telemetry || (ApplicationInsights.Telemetry = {}));\r\n    })(Applicat" +
                    "ionInsights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = " +
                    "{}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"../../JavaScript" +
                    "SDK.Interfaces/Contracts/Generated/MessageData.ts\" />\r\n/// <reference path=\"./Co" +
                    "mmon/DataSanitizer.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Appli" +
                    "cationInsights;\r\n    (function (ApplicationInsights) {\r\n        var Telemetry;\r\n" +
                    "        (function (Telemetry) {\r\n            \"use strict\";\r\n            var Trac" +
                    "e = (function (_super) {\r\n                __extends(Trace, _super);\r\n           " +
                    "     function Trace(message, properties) {\r\n                    _super.call(this" +
                    ");\r\n                    this.aiDataContract = {\r\n                        ver: Ap" +
                    "plicationInsights.FieldType.Required,\r\n                        message: Applicat" +
                    "ionInsights.FieldType.Required,\r\n                        severityLevel: Applicat" +
                    "ionInsights.FieldType.Default,\r\n                        measurements: Applicatio" +
                    "nInsights.FieldType.Default,\r\n                        properties: ApplicationIns" +
                    "ights.FieldType.Default\r\n                    };\r\n                    message = m" +
                    "essage || ApplicationInsights.Util.NotSpecified;\r\n                    this.messa" +
                    "ge = Telemetry.Common.DataSanitizer.sanitizeMessage(message);\r\n                 " +
                    "   this.properties = Telemetry.Common.DataSanitizer.sanitizeProperties(propertie" +
                    "s);\r\n                }\r\n                Trace.envelopeType = \"Microsoft.Applicat" +
                    "ionInsights.{0}.Message\";\r\n                Trace.dataType = \"MessageData\";\r\n    " +
                    "            return Trace;\r\n            })(AI.MessageData);\r\n            Telemetr" +
                    "y.Trace = Trace;\r\n        })(Telemetry = ApplicationInsights.Telemetry || (Appli" +
                    "cationInsights.Telemetry = {}));\r\n    })(ApplicationInsights = Microsoft.Applica" +
                    "tionInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microso" +
                    "ft = {}));\r\n/// <reference path=\"Domain.ts\" />\r\nvar AI;\r\n(function (AI) {\r\n    \"" +
                    "use strict\";\r\n    var EventData = (function (_super) {\r\n        __extends(EventD" +
                    "ata, _super);\r\n        function EventData() {\r\n            _super.call(this);\r\n " +
                    "           this.ver = 2;\r\n            this.properties = {};\r\n            this.me" +
                    "asurements = {};\r\n            _super.call(this);\r\n        }\r\n        return Even" +
                    "tData;\r\n    })(Microsoft.Telemetry.Domain);\r\n    AI.EventData = EventData;\r\n})(A" +
                    "I || (AI = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/" +
                    "Generated/EventData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\nv" +
                    "ar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (funct" +
                    "ion (ApplicationInsights) {\r\n        var Telemetry;\r\n        (function (Telemetr" +
                    "y) {\r\n            \"use strict\";\r\n            var Event = (function (_super) {\r\n " +
                    "               __extends(Event, _super);\r\n                function Event(name, p" +
                    "roperties, measurements) {\r\n                    _super.call(this);\r\n            " +
                    "        this.aiDataContract = {\r\n                        ver: ApplicationInsight" +
                    "s.FieldType.Required,\r\n                        name: ApplicationInsights.FieldTy" +
                    "pe.Required,\r\n                        properties: ApplicationInsights.FieldType." +
                    "Default,\r\n                        measurements: ApplicationInsights.FieldType.De" +
                    "fault,\r\n                    };\r\n                    this.name = ApplicationInsig" +
                    "hts.Telemetry.Common.DataSanitizer.sanitizeString(name) || ApplicationInsights.U" +
                    "til.NotSpecified;\r\n                    this.properties = ApplicationInsights.Tel" +
                    "emetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n                   " +
                    " this.measurements = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitize" +
                    "Measurements(measurements);\r\n                }\r\n                Event.envelopeTy" +
                    "pe = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n                Event.dataType " +
                    "= \"EventData\";\r\n                return Event;\r\n            })(AI.EventData);\r\n  " +
                    "          Telemetry.Event = Event;\r\n        })(Telemetry = ApplicationInsights.T" +
                    "elemetry || (ApplicationInsights.Telemetry = {}));\r\n    })(ApplicationInsights =" +
                    " Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Mic" +
                    "rosoft || (Microsoft = {}));\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    " +
                    "var ExceptionDetails = (function () {\r\n        function ExceptionDetails() {\r\n  " +
                    "          this.hasFullStack = true;\r\n            this.parsedStack = [];\r\n       " +
                    " }\r\n        return ExceptionDetails;\r\n    })();\r\n    AI.ExceptionDetails = Excep" +
                    "tionDetails;\r\n})(AI || (AI = {}));\r\n/// <reference path=\"Domain.ts\" />\r\n/// <ref" +
                    "erence path=\"SeverityLevel.ts\" />\r\n/// <reference path=\"ExceptionDetails.ts\"/>\r\n" +
                    "var AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var ExceptionData = (function " +
                    "(_super) {\r\n        __extends(ExceptionData, _super);\r\n        function Exceptio" +
                    "nData() {\r\n            _super.call(this);\r\n            this.ver = 2;\r\n          " +
                    "  this.exceptions = [];\r\n            this.properties = {};\r\n            this.mea" +
                    "surements = {};\r\n            _super.call(this);\r\n        }\r\n        return Excep" +
                    "tionData;\r\n    })(Microsoft.Telemetry.Domain);\r\n    AI.ExceptionData = Exception" +
                    "Data;\r\n})(AI || (AI = {}));\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    v" +
                    "ar StackFrame = (function () {\r\n        function StackFrame() {\r\n        }\r\n    " +
                    "    return StackFrame;\r\n    })();\r\n    AI.StackFrame = StackFrame;\r\n})(AI || (AI" +
                    " = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generate" +
                    "d/ExceptionData.ts\" />\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Cont" +
                    "racts/Generated/StackFrame.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.t" +
                    "s\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n   " +
                    " (function (ApplicationInsights) {\r\n        var Telemetry;\r\n        (function (T" +
                    "elemetry) {\r\n            \"use strict\";\r\n            var Exception = (function (_" +
                    "super) {\r\n                __extends(Exception, _super);\r\n                functio" +
                    "n Exception(exception, handledAt, properties, measurements, severityLevel) {\r\n  " +
                    "                  _super.call(this);\r\n                    this.aiDataContract = " +
                    "{\r\n                        ver: ApplicationInsights.FieldType.Required,\r\n       " +
                    "                 handledAt: ApplicationInsights.FieldType.Required,\r\n           " +
                    "             exceptions: ApplicationInsights.FieldType.Required,\r\n              " +
                    "          severityLevel: ApplicationInsights.FieldType.Default,\r\n               " +
                    "         properties: ApplicationInsights.FieldType.Default,\r\n                   " +
                    "     measurements: ApplicationInsights.FieldType.Default,\r\n                    }" +
                    ";\r\n                    this.properties = ApplicationInsights.Telemetry.Common.Da" +
                    "taSanitizer.sanitizeProperties(properties);\r\n                    this.measuremen" +
                    "ts = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(mea" +
                    "surements);\r\n                    this.handledAt = handledAt || \"unhandled\";\r\n   " +
                    "                 this.exceptions = [new _ExceptionDetails(exception)];\r\n        " +
                    "            if (severityLevel) {\r\n                        this.severityLevel = s" +
                    "everityLevel;\r\n                    }\r\n                }\r\n                Excepti" +
                    "on.CreateSimpleException = function (message, typeName, assembly, fileName, deta" +
                    "ils, line, handledAt) {\r\n                    return {\r\n                        h" +
                    "andledAt: handledAt || \"unhandled\",\r\n                        exceptions: [\r\n    " +
                    "                        {\r\n                                hasFullStack: true,\r\n" +
                    "                                message: message,\r\n                             " +
                    "   stack: details,\r\n                                typeName: typeName,\r\n       " +
                    "                         parsedStack: [\r\n                                    {\r\n" +
                    "                                        level: 0,\r\n                             " +
                    "           assembly: assembly,\r\n                                        fileName" +
                    ": fileName,\r\n                                        line: line,\r\n              " +
                    "                          method: \"unknown\"\r\n                                   " +
                    " }\r\n                                ]\r\n                            }\r\n          " +
                    "              ]\r\n                    };\r\n                };\r\n                Exc" +
                    "eption.envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n          " +
                    "      Exception.dataType = \"ExceptionData\";\r\n                return Exception;\r\n" +
                    "            })(AI.ExceptionData);\r\n            Telemetry.Exception = Exception;\r" +
                    "\n            var _ExceptionDetails = (function (_super) {\r\n                __ext" +
                    "ends(_ExceptionDetails, _super);\r\n                function _ExceptionDetails(exc" +
                    "eption) {\r\n                    _super.call(this);\r\n                    this.aiDa" +
                    "taContract = {\r\n                        id: ApplicationInsights.FieldType.Defaul" +
                    "t,\r\n                        outerId: ApplicationInsights.FieldType.Default,\r\n   " +
                    "                     typeName: ApplicationInsights.FieldType.Required,\r\n        " +
                    "                message: ApplicationInsights.FieldType.Required,\r\n              " +
                    "          hasFullStack: ApplicationInsights.FieldType.Default,\r\n                " +
                    "        stack: ApplicationInsights.FieldType.Default,\r\n                        p" +
                    "arsedStack: ApplicationInsights.FieldType.Array,\r\n                    };\r\n      " +
                    "              this.typeName = Telemetry.Common.DataSanitizer.sanitizeString(exce" +
                    "ption.name) || ApplicationInsights.Util.NotSpecified;\r\n                    this." +
                    "message = Telemetry.Common.DataSanitizer.sanitizeMessage(exception.message) || A" +
                    "pplicationInsights.Util.NotSpecified;\r\n                    var stack = exception" +
                    "[\"stack\"];\r\n                    this.parsedStack = this.parseStack(stack);\r\n    " +
                    "                this.stack = Telemetry.Common.DataSanitizer.sanitizeException(st" +
                    "ack);\r\n                    this.hasFullStack = ApplicationInsights.Util.isArray(" +
                    "this.parsedStack) && this.parsedStack.length > 0;\r\n                }\r\n          " +
                    "      _ExceptionDetails.prototype.parseStack = function (stack) {\r\n             " +
                    "       var parsedStack = undefined;\r\n                    if (typeof stack === \"s" +
                    "tring\") {\r\n                        var frames = stack.split(\'\\n\');\r\n            " +
                    "            parsedStack = [];\r\n                        var level = 0;\r\n         " +
                    "               var totalSizeInBytes = 0;\r\n                        for (var i = 0" +
                    "; i <= frames.length; i++) {\r\n                            var frame = frames[i];" +
                    "\r\n                            if (_StackFrame.regex.test(frame)) {\r\n            " +
                    "                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n    " +
                    "                            totalSizeInBytes += parsedFrame.sizeInBytes;\r\n      " +
                    "                          parsedStack.push(parsedFrame);\r\n                      " +
                    "      }\r\n                        }\r\n                        var exceptionParsedS" +
                    "tackThreshold = 32 * 1024;\r\n                        if (totalSizeInBytes > excep" +
                    "tionParsedStackThreshold) {\r\n                            var left = 0;\r\n        " +
                    "                    var right = parsedStack.length - 1;\r\n                       " +
                    "     var size = 0;\r\n                            var acceptedLeft = left;\r\n      " +
                    "                      var acceptedRight = right;\r\n                            wh" +
                    "ile (left < right) {\r\n                                var lSize = parsedStack[le" +
                    "ft].sizeInBytes;\r\n                                var rSize = parsedStack[right]" +
                    ".sizeInBytes;\r\n                                size += lSize + rSize;\r\n         " +
                    "                       if (size > exceptionParsedStackThreshold) {\r\n            " +
                    "                        var howMany = acceptedRight - acceptedLeft + 1;\r\n       " +
                    "                             parsedStack.splice(acceptedLeft, howMany);\r\n       " +
                    "                             break;\r\n                                }\r\n        " +
                    "                        acceptedLeft = left;\r\n                                ac" +
                    "ceptedRight = right;\r\n                                left++;\r\n                 " +
                    "               right--;\r\n                            }\r\n                        " +
                    "}\r\n                    }\r\n                    return parsedStack;\r\n             " +
                    "   };\r\n                return _ExceptionDetails;\r\n            })(AI.ExceptionDet" +
                    "ails);\r\n            var _StackFrame = (function (_super) {\r\n                __ex" +
                    "tends(_StackFrame, _super);\r\n                function _StackFrame(frame, level) " +
                    "{\r\n                    _super.call(this);\r\n                    this.sizeInBytes " +
                    "= 0;\r\n                    this.aiDataContract = {\r\n                        level" +
                    ": ApplicationInsights.FieldType.Required,\r\n                        method: Appli" +
                    "cationInsights.FieldType.Required,\r\n                        assembly: Applicatio" +
                    "nInsights.FieldType.Default,\r\n                        fileName: ApplicationInsig" +
                    "hts.FieldType.Default,\r\n                        line: ApplicationInsights.FieldT" +
                    "ype.Default,\r\n                    };\r\n                    this.level = level;\r\n " +
                    "                   this.method = \"<no_method>\";\r\n                    this.assemb" +
                    "ly = ApplicationInsights.Util.trim(frame);\r\n                    var matches = fr" +
                    "ame.match(_StackFrame.regex);\r\n                    if (matches && matches.length" +
                    " >= 5) {\r\n                        this.method = ApplicationInsights.Util.trim(ma" +
                    "tches[2]) || this.method;\r\n                        this.fileName = ApplicationIn" +
                    "sights.Util.trim(matches[4]);\r\n                        this.line = parseInt(matc" +
                    "hes[5]) || 0;\r\n                    }\r\n                    this.sizeInBytes += th" +
                    "is.method.length;\r\n                    this.sizeInBytes += this.fileName.length;" +
                    "\r\n                    this.sizeInBytes += this.assembly.length;\r\n               " +
                    "     this.sizeInBytes += _StackFrame.baseSize;\r\n                    this.sizeInB" +
                    "ytes += this.level.toString().length;\r\n                    this.sizeInBytes += t" +
                    "his.line.toString().length;\r\n                }\r\n                _StackFrame.rege" +
                    "x = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n       " +
                    "         _StackFrame.baseSize = 58;\r\n                return _StackFrame;\r\n      " +
                    "      })(AI.StackFrame);\r\n            Telemetry._StackFrame = _StackFrame;\r\n    " +
                    "    })(Telemetry = ApplicationInsights.Telemetry || (ApplicationInsights.Telemet" +
                    "ry = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Micro" +
                    "soft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <refer" +
                    "ence path=\"Domain.ts\" />\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var " +
                    "MetricData = (function (_super) {\r\n        __extends(MetricData, _super);\r\n     " +
                    "   function MetricData() {\r\n            _super.call(this);\r\n            this.ver" +
                    " = 2;\r\n            this.metrics = [];\r\n            this.properties = {};\r\n      " +
                    "      _super.call(this);\r\n        }\r\n        return MetricData;\r\n    })(Microsof" +
                    "t.Telemetry.Domain);\r\n    AI.MetricData = MetricData;\r\n})(AI || (AI = {}));\r\nvar" +
                    " AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    (function (DataPointType) {\r\n    " +
                    "    DataPointType[DataPointType[\"Measurement\"] = 0] = \"Measurement\";\r\n        Da" +
                    "taPointType[DataPointType[\"Aggregation\"] = 1] = \"Aggregation\";\r\n    })(AI.DataPo" +
                    "intType || (AI.DataPointType = {}));\r\n    var DataPointType = AI.DataPointType;\r" +
                    "\n})(AI || (AI = {}));\r\n/// <reference path=\"DataPointType.ts\" />\r\nvar AI;\r\n(func" +
                    "tion (AI) {\r\n    \"use strict\";\r\n    var DataPoint = (function () {\r\n        func" +
                    "tion DataPoint() {\r\n            this.kind = AI.DataPointType.Measurement;\r\n     " +
                    "   }\r\n        return DataPoint;\r\n    })();\r\n    AI.DataPoint = DataPoint;\r\n})(AI" +
                    " || (AI = {}));\r\n/// <reference path=\"../../../JavaScriptSDK.Interfaces/Contract" +
                    "s/Generated/DataPoint.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Ap" +
                    "plicationInsights;\r\n    (function (ApplicationInsights) {\r\n        var Telemetry" +
                    ";\r\n        (function (Telemetry) {\r\n            var Common;\r\n            (functi" +
                    "on (Common) {\r\n                \"use strict\";\r\n                var DataPoint = (f" +
                    "unction (_super) {\r\n                    __extends(DataPoint, _super);\r\n         " +
                    "           function DataPoint() {\r\n                        _super.apply(this, ar" +
                    "guments);\r\n                        this.aiDataContract = {\r\n                    " +
                    "        name: ApplicationInsights.FieldType.Required,\r\n                         " +
                    "   kind: ApplicationInsights.FieldType.Default,\r\n                            val" +
                    "ue: ApplicationInsights.FieldType.Required,\r\n                            count: " +
                    "ApplicationInsights.FieldType.Default,\r\n                            min: Applica" +
                    "tionInsights.FieldType.Default,\r\n                            max: ApplicationIns" +
                    "ights.FieldType.Default,\r\n                            stdDev: ApplicationInsight" +
                    "s.FieldType.Default\r\n                        };\r\n                    }\r\n        " +
                    "            return DataPoint;\r\n                })(AI.DataPoint);\r\n              " +
                    "  Common.DataPoint = DataPoint;\r\n            })(Common = Telemetry.Common || (Te" +
                    "lemetry.Common = {}));\r\n        })(Telemetry = ApplicationInsights.Telemetry || " +
                    "(ApplicationInsights.Telemetry = {}));\r\n    })(ApplicationInsights = Microsoft.A" +
                    "pplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (M" +
                    "icrosoft = {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/" +
                    "Generated/MetricData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\" />\r" +
                    "\n/// <reference path=\"./Common/DataPoint.ts\" />\r\nvar Microsoft;\r\n(function (Micr" +
                    "osoft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n " +
                    "       var Telemetry;\r\n        (function (Telemetry) {\r\n            \"use strict\"" +
                    ";\r\n            var Metric = (function (_super) {\r\n                __extends(Metr" +
                    "ic, _super);\r\n                function Metric(name, value, count, min, max, prop" +
                    "erties) {\r\n                    _super.call(this);\r\n                    this.aiDa" +
                    "taContract = {\r\n                        ver: ApplicationInsights.FieldType.Requi" +
                    "red,\r\n                        metrics: ApplicationInsights.FieldType.Required,\r\n" +
                    "                        properties: ApplicationInsights.FieldType.Default,\r\n    " +
                    "                };\r\n                    var dataPoint = new Microsoft.Applicatio" +
                    "nInsights.Telemetry.Common.DataPoint();\r\n                    dataPoint.count = c" +
                    "ount > 0 ? count : undefined;\r\n                    dataPoint.max = isNaN(max) ||" +
                    " max === null ? undefined : max;\r\n                    dataPoint.min = isNaN(min)" +
                    " || min === null ? undefined : min;\r\n                    dataPoint.name = Teleme" +
                    "try.Common.DataSanitizer.sanitizeString(name) || ApplicationInsights.Util.NotSpe" +
                    "cified;\r\n                    dataPoint.value = value;\r\n                    this." +
                    "metrics = [dataPoint];\r\n                    this.properties = ApplicationInsight" +
                    "s.Telemetry.Common.DataSanitizer.sanitizeProperties(properties);\r\n              " +
                    "  }\r\n                Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Me" +
                    "tric\";\r\n                Metric.dataType = \"MetricData\";\r\n                return " +
                    "Metric;\r\n            })(AI.MetricData);\r\n            Telemetry.Metric = Metric;\r" +
                    "\n        })(Telemetry = ApplicationInsights.Telemetry || (ApplicationInsights.Te" +
                    "lemetry = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (" +
                    "Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <" +
                    "reference path=\"EventData.ts\" />\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n" +
                    "    var PageViewData = (function (_super) {\r\n        __extends(PageViewData, _su" +
                    "per);\r\n        function PageViewData() {\r\n            _super.call(this);\r\n      " +
                    "      this.ver = 2;\r\n            this.properties = {};\r\n            this.measure" +
                    "ments = {};\r\n            _super.call(this);\r\n        }\r\n        return PageViewD" +
                    "ata;\r\n    })(AI.EventData);\r\n    AI.PageViewData = PageViewData;\r\n})(AI || (AI =" +
                    " {}));\r\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/" +
                    "PageViewData.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\nvar Micr" +
                    "osoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Ap" +
                    "plicationInsights) {\r\n        var Telemetry;\r\n        (function (Telemetry) {\r\n " +
                    "           \"use strict\";\r\n            var PageView = (function (_super) {\r\n     " +
                    "           __extends(PageView, _super);\r\n                function PageView(name," +
                    " url, durationMs, properties, measurements) {\r\n                    _super.call(t" +
                    "his);\r\n                    this.aiDataContract = {\r\n                        ver:" +
                    " ApplicationInsights.FieldType.Required,\r\n                        name: Applicat" +
                    "ionInsights.FieldType.Default,\r\n                        url: ApplicationInsights" +
                    ".FieldType.Default,\r\n                        duration: ApplicationInsights.Field" +
                    "Type.Default,\r\n                        properties: ApplicationInsights.FieldType" +
                    ".Default,\r\n                        measurements: ApplicationInsights.FieldType.D" +
                    "efault,\r\n                    };\r\n                    this.url = Telemetry.Common" +
                    ".DataSanitizer.sanitizeUrl(url);\r\n                    this.name = Telemetry.Comm" +
                    "on.DataSanitizer.sanitizeString(name) || ApplicationInsights.Util.NotSpecified;\r" +
                    "\n                    if (!isNaN(durationMs)) {\r\n                        this.dur" +
                    "ation = ApplicationInsights.Util.msToTimeSpan(durationMs);\r\n                    " +
                    "}\r\n                    this.properties = ApplicationInsights.Telemetry.Common.Da" +
                    "taSanitizer.sanitizeProperties(properties);\r\n                    this.measuremen" +
                    "ts = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeMeasurements(mea" +
                    "surements);\r\n                }\r\n                PageView.envelopeType = \"Microso" +
                    "ft.ApplicationInsights.{0}.Pageview\";\r\n                PageView.dataType = \"Page" +
                    "viewData\";\r\n                return PageView;\r\n            })(AI.PageViewData);\r\n" +
                    "            Telemetry.PageView = PageView;\r\n        })(Telemetry = ApplicationIn" +
                    "sights.Telemetry || (ApplicationInsights.Telemetry = {}));\r\n    })(ApplicationIn" +
                    "sights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));" +
                    "\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"PageViewData.ts\" />\r\n" +
                    "var AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var PageViewPerfData = (functi" +
                    "on (_super) {\r\n        __extends(PageViewPerfData, _super);\r\n        function Pa" +
                    "geViewPerfData() {\r\n            _super.call(this);\r\n            this.ver = 2;\r\n " +
                    "           this.properties = {};\r\n            this.measurements = {};\r\n         " +
                    "   _super.call(this);\r\n        }\r\n        return PageViewPerfData;\r\n    })(AI.Pa" +
                    "geViewData);\r\n    AI.PageViewPerfData = PageViewPerfData;\r\n})(AI || (AI = {}));\r" +
                    "\n/// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageVie" +
                    "wPerfData.ts\"/>\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n/// <referen" +
                    "ce path=\"../Util.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var Applica" +
                    "tionInsights;\r\n    (function (ApplicationInsights) {\r\n        var Telemetry;\r\n  " +
                    "      (function (Telemetry) {\r\n            \"use strict\";\r\n            var PageVi" +
                    "ewPerformance = (function (_super) {\r\n                __extends(PageViewPerforma" +
                    "nce, _super);\r\n                function PageViewPerformance(name, url, unused, p" +
                    "roperties, measurements) {\r\n                    _super.call(this);\r\n            " +
                    "        this.aiDataContract = {\r\n                        ver: ApplicationInsight" +
                    "s.FieldType.Required,\r\n                        name: ApplicationInsights.FieldTy" +
                    "pe.Default,\r\n                        url: ApplicationInsights.FieldType.Default," +
                    "\r\n                        duration: ApplicationInsights.FieldType.Default,\r\n    " +
                    "                    perfTotal: ApplicationInsights.FieldType.Default,\r\n         " +
                    "               networkConnect: ApplicationInsights.FieldType.Default,\r\n         " +
                    "               sentRequest: ApplicationInsights.FieldType.Default,\r\n            " +
                    "            receivedResponse: ApplicationInsights.FieldType.Default,\r\n          " +
                    "              domProcessing: ApplicationInsights.FieldType.Default,\r\n           " +
                    "             properties: ApplicationInsights.FieldType.Default,\r\n               " +
                    "         measurements: ApplicationInsights.FieldType.Default\r\n                  " +
                    "  };\r\n                    this.isValid = false;\r\n                    var timing " +
                    "= PageViewPerformance.getPerformanceTiming();\r\n                    if (timing) {" +
                    "\r\n                        var total = PageViewPerformance.getDuration(timing.nav" +
                    "igationStart, timing.loadEventEnd);\r\n                        var network = PageV" +
                    "iewPerformance.getDuration(timing.navigationStart, timing.connectEnd);\r\n        " +
                    "                var request = PageViewPerformance.getDuration(timing.requestStar" +
                    "t, timing.responseStart);\r\n                        var response = PageViewPerfor" +
                    "mance.getDuration(timing.responseStart, timing.responseEnd);\r\n                  " +
                    "      var dom = PageViewPerformance.getDuration(timing.responseEnd, timing.loadE" +
                    "ventEnd);\r\n                        if (total == 0) {\r\n                          " +
                    "  ApplicationInsights._InternalLogging.throwInternalNonUserActionable(Applicatio" +
                    "nInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(A" +
                    "pplicationInsights._InternalMessageId.NONUSRACT_ErrorPVCalc, \"error calculating " +
                    "page view performance.\", { total: total, network: network, request: request, res" +
                    "ponse: response, dom: dom }));\r\n                        }\r\n                     " +
                    "   else if (total < Math.floor(network) + Math.floor(request) + Math.floor(respo" +
                    "nse) + Math.floor(dom)) {\r\n                            ApplicationInsights._Inte" +
                    "rnalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity.W" +
                    "ARNING, new ApplicationInsights._InternalLogMessage(ApplicationInsights._Interna" +
                    "lMessageId.NONUSRACT_ClientPerformanceMathError, \"client performance math error." +
                    "\", { total: total, network: network, request: request, response: response, dom: " +
                    "dom }));\r\n                        }\r\n                        else {\r\n           " +
                    "                 this.durationMs = total;\r\n                            this.perf" +
                    "Total = this.duration = ApplicationInsights.Util.msToTimeSpan(total);\r\n         " +
                    "                   this.networkConnect = ApplicationInsights.Util.msToTimeSpan(n" +
                    "etwork);\r\n                            this.sentRequest = ApplicationInsights.Uti" +
                    "l.msToTimeSpan(request);\r\n                            this.receivedResponse = Ap" +
                    "plicationInsights.Util.msToTimeSpan(response);\r\n                            this" +
                    ".domProcessing = ApplicationInsights.Util.msToTimeSpan(dom);\r\n                  " +
                    "          this.isValid = true;\r\n                        }\r\n                    }" +
                    "\r\n                    this.url = Telemetry.Common.DataSanitizer.sanitizeUrl(url)" +
                    ";\r\n                    this.name = Telemetry.Common.DataSanitizer.sanitizeString" +
                    "(name) || ApplicationInsights.Util.NotSpecified;\r\n                    this.prope" +
                    "rties = ApplicationInsights.Telemetry.Common.DataSanitizer.sanitizeProperties(pr" +
                    "operties);\r\n                    this.measurements = ApplicationInsights.Telemetr" +
                    "y.Common.DataSanitizer.sanitizeMeasurements(measurements);\r\n                }\r\n " +
                    "               PageViewPerformance.prototype.getIsValid = function () {\r\n       " +
                    "             return this.isValid;\r\n                };\r\n                PageViewP" +
                    "erformance.prototype.getDurationMs = function () {\r\n                    return t" +
                    "his.durationMs;\r\n                };\r\n                PageViewPerformance.getPerf" +
                    "ormanceTiming = function () {\r\n                    if (typeof window != \"undefin" +
                    "ed\" && window.performance && window.performance.timing) {\r\n                     " +
                    "   return window.performance.timing;\r\n                    }\r\n                   " +
                    " return null;\r\n                };\r\n                PageViewPerformance.isPerform" +
                    "anceTimingSupported = function () {\r\n                    return typeof window !=" +
                    " \"undefined\" && window.performance && window.performance.timing;\r\n              " +
                    "  };\r\n                PageViewPerformance.isPerformanceTimingDataReady = functio" +
                    "n () {\r\n                    var timing = window.performance.timing;\r\n           " +
                    "         return timing.domainLookupStart > 0\r\n                        && timing." +
                    "navigationStart > 0\r\n                        && timing.responseStart > 0\r\n      " +
                    "                  && timing.requestStart > 0\r\n                        && timing." +
                    "loadEventEnd > 0\r\n                        && timing.responseEnd > 0\r\n           " +
                    "             && timing.connectEnd > 0\r\n                        && timing.domLoad" +
                    "ing > 0;\r\n                };\r\n                PageViewPerformance.getDuration = " +
                    "function (start, end) {\r\n                    var duration = 0;\r\n                " +
                    "    if (!(isNaN(start) || isNaN(end))) {\r\n                        duration = Mat" +
                    "h.max(end - start, 0);\r\n                    }\r\n                    return durati" +
                    "on;\r\n                };\r\n                PageViewPerformance.envelopeType = \"Mic" +
                    "rosoft.ApplicationInsights.{0}.PageviewPerformance\";\r\n                PageViewPe" +
                    "rformance.dataType = \"PageviewPerformanceData\";\r\n                return PageView" +
                    "Performance;\r\n            })(AI.PageViewPerfData);\r\n            Telemetry.PageVi" +
                    "ewPerformance = PageViewPerformance;\r\n        })(Telemetry = ApplicationInsights" +
                    ".Telemetry || (ApplicationInsights.Telemetry = {}));\r\n    })(ApplicationInsights" +
                    " = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(M" +
                    "icrosoft || (Microsoft = {}));\r\n/// <reference path=\"./Contracts/Generated/Envel" +
                    "ope.ts\" />\r\n/// <reference path=\"./Context/IApplication.ts\"/>\r\n/// <reference pa" +
                    "th=\"./Context/IDevice.ts\"/>\r\n/// <reference path=\"./Context/IInternal.ts\"/>\r\n///" +
                    " <reference path=\"./Context/ILocation.ts\"/>\r\n/// <reference path=\"./Context/IOpe" +
                    "ration.ts\"/>\r\n/// <reference path=\"./Context/ISample.ts\"/>\r\n/// <reference path=" +
                    "\"./Context/IUser.ts\"/>\r\n/// <reference path=\"./Context/ISession.ts\"/>\r\nvar Micro" +
                    "soft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (App" +
                    "licationInsights) {\r\n        \"use strict\";\r\n    })(ApplicationInsights = Microso" +
                    "ft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft |" +
                    "| (Microsoft = {}));\r\n/// <reference path=\"sender.ts\"/>\r\n/// <reference path=\"te" +
                    "lemetry/trace.ts\" />\r\n/// <reference path=\"telemetry/event.ts\" />\r\n/// <referenc" +
                    "e path=\"telemetry/exception.ts\" />\r\n/// <reference path=\"telemetry/metric.ts\" />" +
                    "\r\n/// <reference path=\"telemetry/pageview.ts\" />\r\n/// <reference path=\"telemetry" +
                    "/pageviewperformance.ts\" />\r\n/// <reference path=\"./Util.ts\"/>\r\n/// <reference p" +
                    "ath=\"../JavaScriptSDK.Interfaces/Contracts/Generated/SessionState.ts\"/>\r\n/// <re" +
                    "ference path=\"../JavaScriptSDK.Interfaces/ITelemetryContext.ts\" />\r\nvar Microsof" +
                    "t;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Applic" +
                    "ationInsights) {\r\n        \"use strict\";\r\n        var TelemetryContext = (functio" +
                    "n () {\r\n            function TelemetryContext(config) {\r\n                this._c" +
                    "onfig = config;\r\n                this._sender = new ApplicationInsights.Sender(c" +
                    "onfig);\r\n                if (typeof window !== \'undefined\') {\r\n                 " +
                    "   this._sessionManager = new ApplicationInsights.Context._SessionManager(config" +
                    ");\r\n                    this.application = new ApplicationInsights.Context.Appli" +
                    "cation();\r\n                    this.device = new ApplicationInsights.Context.Dev" +
                    "ice();\r\n                    this.internal = new ApplicationInsights.Context.Inte" +
                    "rnal();\r\n                    this.location = new ApplicationInsights.Context.Loc" +
                    "ation();\r\n                    this.user = new ApplicationInsights.Context.User(c" +
                    "onfig);\r\n                    this.operation = new ApplicationInsights.Context.Op" +
                    "eration();\r\n                    this.session = new ApplicationInsights.Context.S" +
                    "ession();\r\n                    this.sample = new ApplicationInsights.Context.Sam" +
                    "ple(config.sampleRate());\r\n                }\r\n            }\r\n            Telemet" +
                    "ryContext.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r" +
                    "\n                this.telemetryInitializers = this.telemetryInitializers || [];\r" +
                    "\n                this.telemetryInitializers.push(telemetryInitializer);\r\n       " +
                    "     };\r\n            TelemetryContext.prototype.track = function (envelope) {\r\n " +
                    "               if (!envelope) {\r\n                    ApplicationInsights._Intern" +
                    "alLogging.throwInternalUserActionable(ApplicationInsights.LoggingSeverity.CRITIC" +
                    "AL, new ApplicationInsights._InternalLogMessage(ApplicationInsights._InternalMes" +
                    "sageId.USRACT_TrackArgumentsNotSpecified, \"cannot call .track() with a null or u" +
                    "ndefined argument\"));\r\n                }\r\n                else {\r\n              " +
                    "      if (envelope.name === ApplicationInsights.Telemetry.PageView.envelopeType)" +
                    " {\r\n                        ApplicationInsights._InternalLogging.resetInternalMe" +
                    "ssageCount();\r\n                    }\r\n                    if (this.session) {\r\n " +
                    "                       if (typeof this.session.id !== \"string\") {\r\n             " +
                    "               this._sessionManager.update();\r\n                        }\r\n      " +
                    "              }\r\n                    this._track(envelope);\r\n                }\r\n" +
                    "                return envelope;\r\n            };\r\n            TelemetryContext.p" +
                    "rototype._track = function (envelope) {\r\n                if (this.session) {\r\n  " +
                    "                  if (typeof this.session.id === \"string\") {\r\n                  " +
                    "      this._applySessionContext(envelope, this.session);\r\n                    }\r" +
                    "\n                    else {\r\n                        this._applySessionContext(e" +
                    "nvelope, this._sessionManager.automaticSession);\r\n                    }\r\n       " +
                    "         }\r\n                this._applyApplicationContext(envelope, this.applica" +
                    "tion);\r\n                this._applyDeviceContext(envelope, this.device);\r\n      " +
                    "          this._applyInternalContext(envelope, this.internal);\r\n                " +
                    "this._applyLocationContext(envelope, this.location);\r\n                this._appl" +
                    "ySampleContext(envelope, this.sample);\r\n                this._applyUserContext(e" +
                    "nvelope, this.user);\r\n                this._applyOperationContext(envelope, this" +
                    ".operation);\r\n                envelope.iKey = this._config.instrumentationKey();" +
                    "\r\n                var doNotSendItem = false;\r\n                try {\r\n           " +
                    "         this.telemetryInitializers = this.telemetryInitializers || [];\r\n       " +
                    "             var telemetryInitializersCount = this.telemetryInitializers.length;" +
                    "\r\n                    for (var i = 0; i < telemetryInitializersCount; ++i) {\r\n  " +
                    "                      var telemetryInitializer = this.telemetryInitializers[i];\r" +
                    "\n                        if (telemetryInitializer) {\r\n                          " +
                    "  if (telemetryInitializer.apply(null, [envelope]) === false) {\r\n               " +
                    "                 doNotSendItem = true;\r\n                                break;\r\n" +
                    "                            }\r\n                        }\r\n                    }\r" +
                    "\n                }\r\n                catch (e) {\r\n                    doNotSendIt" +
                    "em = true;\r\n                    ApplicationInsights._InternalLogging.throwIntern" +
                    "alUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationIn" +
                    "sights._InternalLogMessage(ApplicationInsights._InternalMessageId.USRACT_Telemet" +
                    "ryInitializerFailed, \"One of telemetry initializers failed, telemetry item will " +
                    "not be sent: \" + ApplicationInsights.Util.getExceptionName(e), { exception: Appl" +
                    "icationInsights.Util.dump(e) }));\r\n                }\r\n                if (!doNot" +
                    "SendItem) {\r\n                    if (envelope.name === ApplicationInsights.Telem" +
                    "etry.Metric.envelopeType ||\r\n                        this.sample.isSampledIn(env" +
                    "elope)) {\r\n                        var iKeyNoDashes = this._config.instrumentati" +
                    "onKey().replace(/-/g, \"\");\r\n                        envelope.name = envelope.nam" +
                    "e.replace(\"{0}\", iKeyNoDashes);\r\n                        this._sender.send(envel" +
                    "ope);\r\n                    }\r\n                    else {\r\n                      " +
                    "  ApplicationInsights._InternalLogging.throwInternalUserActionable(ApplicationIn" +
                    "sights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(Appl" +
                    "icationInsights._InternalMessageId.NONUSRACT_TelemetrySampledAndNotSent, \"Teleme" +
                    "try is sampled and not sent to the AI service.\", { SampleRate: this.sample.sampl" +
                    "eRate }));\r\n                    }\r\n                }\r\n                return env" +
                    "elope;\r\n            };\r\n            TelemetryContext.prototype._applyApplication" +
                    "Context = function (envelope, appContext) {\r\n                if (appContext) {\r\n" +
                    "                    var tagKeys = new AI.ContextTagKeys();\r\n                    " +
                    "if (typeof appContext.ver === \"string\") {\r\n                        envelope.tags" +
                    "[tagKeys.applicationVersion] = appContext.ver;\r\n                    }\r\n         " +
                    "           if (typeof appContext.build === \"string\") {\r\n                        " +
                    "envelope.tags[tagKeys.applicationBuild] = appContext.build;\r\n                   " +
                    " }\r\n                }\r\n            };\r\n            TelemetryContext.prototype._a" +
                    "pplyDeviceContext = function (envelope, deviceContext) {\r\n                var ta" +
                    "gKeys = new AI.ContextTagKeys();\r\n                if (deviceContext) {\r\n        " +
                    "            if (typeof deviceContext.id === \"string\") {\r\n                       " +
                    " envelope.tags[tagKeys.deviceId] = deviceContext.id;\r\n                    }\r\n   " +
                    "                 if (typeof deviceContext.ip === \"string\") {\r\n                  " +
                    "      envelope.tags[tagKeys.deviceIp] = deviceContext.ip;\r\n                    }" +
                    "\r\n                    if (typeof deviceContext.language === \"string\") {\r\n       " +
                    "                 envelope.tags[tagKeys.deviceLanguage] = deviceContext.language;" +
                    "\r\n                    }\r\n                    if (typeof deviceContext.locale ===" +
                    " \"string\") {\r\n                        envelope.tags[tagKeys.deviceLocale] = devi" +
                    "ceContext.locale;\r\n                    }\r\n                    if (typeof deviceC" +
                    "ontext.model === \"string\") {\r\n                        envelope.tags[tagKeys.devi" +
                    "ceModel] = deviceContext.model;\r\n                    }\r\n                    if (" +
                    "typeof deviceContext.network !== \"undefined\") {\r\n                        envelop" +
                    "e.tags[tagKeys.deviceNetwork] = deviceContext.network;\r\n                    }\r\n " +
                    "                   if (typeof deviceContext.oemName === \"string\") {\r\n           " +
                    "             envelope.tags[tagKeys.deviceOEMName] = deviceContext.oemName;\r\n    " +
                    "                }\r\n                    if (typeof deviceContext.os === \"string\")" +
                    " {\r\n                        envelope.tags[tagKeys.deviceOS] = deviceContext.os;\r" +
                    "\n                    }\r\n                    if (typeof deviceContext.osversion =" +
                    "== \"string\") {\r\n                        envelope.tags[tagKeys.deviceOSVersion] =" +
                    " deviceContext.osversion;\r\n                    }\r\n                    if (typeof" +
                    " deviceContext.resolution === \"string\") {\r\n                        envelope.tags" +
                    "[tagKeys.deviceScreenResolution] = deviceContext.resolution;\r\n                  " +
                    "  }\r\n                    if (typeof deviceContext.type === \"string\") {\r\n        " +
                    "                envelope.tags[tagKeys.deviceType] = deviceContext.type;\r\n       " +
                    "             }\r\n                }\r\n            };\r\n            TelemetryContext." +
                    "prototype._applyInternalContext = function (envelope, internalContext) {\r\n      " +
                    "          if (internalContext) {\r\n                    var tagKeys = new AI.Conte" +
                    "xtTagKeys();\r\n                    if (typeof internalContext.agentVersion === \"s" +
                    "tring\") {\r\n                        envelope.tags[tagKeys.internalAgentVersion] =" +
                    " internalContext.agentVersion;\r\n                    }\r\n                    if (t" +
                    "ypeof internalContext.sdkVersion === \"string\") {\r\n                        envelo" +
                    "pe.tags[tagKeys.internalSdkVersion] = internalContext.sdkVersion;\r\n             " +
                    "       }\r\n                }\r\n            };\r\n            TelemetryContext.protot" +
                    "ype._applyLocationContext = function (envelope, locationContext) {\r\n            " +
                    "    if (locationContext) {\r\n                    var tagKeys = new AI.ContextTagK" +
                    "eys();\r\n                    if (typeof locationContext.ip === \"string\") {\r\n     " +
                    "                   envelope.tags[tagKeys.locationIp] = locationContext.ip;\r\n    " +
                    "                }\r\n                }\r\n            };\r\n            TelemetryConte" +
                    "xt.prototype._applyOperationContext = function (envelope, operationContext) {\r\n " +
                    "               if (operationContext) {\r\n                    var tagKeys = new AI" +
                    ".ContextTagKeys();\r\n                    if (typeof operationContext.id === \"stri" +
                    "ng\") {\r\n                        envelope.tags[tagKeys.operationId] = operationCo" +
                    "ntext.id;\r\n                    }\r\n                    if (typeof operationContex" +
                    "t.name === \"string\") {\r\n                        envelope.tags[tagKeys.operationN" +
                    "ame] = operationContext.name;\r\n                    }\r\n                    if (ty" +
                    "peof operationContext.parentId === \"string\") {\r\n                        envelope" +
                    ".tags[tagKeys.operationParentId] = operationContext.parentId;\r\n                 " +
                    "   }\r\n                    if (typeof operationContext.rootId === \"string\") {\r\n  " +
                    "                      envelope.tags[tagKeys.operationRootId] = operationContext." +
                    "rootId;\r\n                    }\r\n                    if (typeof operationContext." +
                    "syntheticSource === \"string\") {\r\n                        envelope.tags[tagKeys.o" +
                    "perationSyntheticSource] = operationContext.syntheticSource;\r\n                  " +
                    "  }\r\n                }\r\n            };\r\n            TelemetryContext.prototype._" +
                    "applySampleContext = function (envelope, sampleContext) {\r\n                if (s" +
                    "ampleContext) {\r\n                    envelope.sampleRate = sampleContext.sampleR" +
                    "ate;\r\n                }\r\n            };\r\n            TelemetryContext.prototype." +
                    "_applySessionContext = function (envelope, sessionContext) {\r\n                if" +
                    " (sessionContext) {\r\n                    var tagKeys = new AI.ContextTagKeys();\r" +
                    "\n                    if (typeof sessionContext.id === \"string\") {\r\n             " +
                    "           envelope.tags[tagKeys.sessionId] = sessionContext.id;\r\n              " +
                    "      }\r\n                    if (typeof sessionContext.isFirst !== \"undefined\") " +
                    "{\r\n                        envelope.tags[tagKeys.sessionIsFirst] = sessionContex" +
                    "t.isFirst;\r\n                    }\r\n                }\r\n            };\r\n          " +
                    "  TelemetryContext.prototype._applyUserContext = function (envelope, userContext" +
                    ") {\r\n                if (userContext) {\r\n                    var tagKeys = new A" +
                    "I.ContextTagKeys();\r\n                    if (typeof userContext.accountId === \"s" +
                    "tring\") {\r\n                        envelope.tags[tagKeys.userAccountId] = userCo" +
                    "ntext.accountId;\r\n                    }\r\n                    if (typeof userCont" +
                    "ext.agent === \"string\") {\r\n                        envelope.tags[tagKeys.userAge" +
                    "nt] = userContext.agent;\r\n                    }\r\n                    if (typeof " +
                    "userContext.id === \"string\") {\r\n                        envelope.tags[tagKeys.us" +
                    "erId] = userContext.id;\r\n                    }\r\n                    if (typeof u" +
                    "serContext.authenticatedId === \"string\") {\r\n                        envelope.tag" +
                    "s[tagKeys.userAuthUserId] = userContext.authenticatedId;\r\n                    }\r" +
                    "\n                    if (typeof userContext.storeRegion === \"string\") {\r\n       " +
                    "                 envelope.tags[tagKeys.userStoreRegion] = userContext.storeRegio" +
                    "n;\r\n                    }\r\n                }\r\n            };\r\n            return" +
                    " TelemetryContext;\r\n        })();\r\n        ApplicationInsights.TelemetryContext " +
                    "= TelemetryContext;\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights " +
                    "|| (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/" +
                    "// <reference path=\"Base.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    va" +
                    "r Telemetry;\r\n    (function (Telemetry) {\r\n        \"use strict\";\r\n        var Da" +
                    "ta = (function (_super) {\r\n            __extends(Data, _super);\r\n            fun" +
                    "ction Data() {\r\n                _super.call(this);\r\n            }\r\n            r" +
                    "eturn Data;\r\n        })(Microsoft.Telemetry.Base);\r\n        Telemetry.Data = Dat" +
                    "a;\r\n    })(Telemetry = Microsoft.Telemetry || (Microsoft.Telemetry = {}));\r\n})(M" +
                    "icrosoft || (Microsoft = {}));\r\n/// <reference path=\"../../../JavaScriptSDK.Inte" +
                    "rfaces/Contracts/Generated/Data.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n" +
                    "    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        var" +
                    " Telemetry;\r\n        (function (Telemetry) {\r\n            var Common;\r\n         " +
                    "   (function (Common) {\r\n                \"use strict\";\r\n                var Data" +
                    " = (function (_super) {\r\n                    __extends(Data, _super);\r\n         " +
                    "           function Data(type, data) {\r\n                        _super.call(this" +
                    ");\r\n                        this.aiDataContract = {\r\n                           " +
                    " baseType: ApplicationInsights.FieldType.Required,\r\n                            " +
                    "baseData: ApplicationInsights.FieldType.Required\r\n                        };\r\n  " +
                    "                      this.baseType = type;\r\n                        this.baseDa" +
                    "ta = data;\r\n                    }\r\n                    return Data;\r\n           " +
                    "     })(Microsoft.Telemetry.Data);\r\n                Common.Data = Data;\r\n       " +
                    "     })(Common = Telemetry.Common || (Telemetry.Common = {}));\r\n        })(Telem" +
                    "etry = ApplicationInsights.Telemetry || (ApplicationInsights.Telemetry = {}));\r\n" +
                    "    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsoft.Applica" +
                    "tionInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"." +
                    "./../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewData.ts\" />\r\n/// <refe" +
                    "rence path=\"./Common/DataSanitizer.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) " +
                    "{\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        " +
                    "var Telemetry;\r\n        (function (Telemetry) {\r\n            \"use strict\";\r\n    " +
                    "        var PageViewManager = (function () {\r\n                function PageViewM" +
                    "anager(appInsights, overridePageViewDuration) {\r\n                    this.pageVi" +
                    "ewPerformanceSent = false;\r\n                    this.overridePageViewDuration = " +
                    "false;\r\n                    this.overridePageViewDuration = overridePageViewDura" +
                    "tion;\r\n                    this.appInsights = appInsights;\r\n                }\r\n " +
                    "               PageViewManager.prototype.trackPageView = function (name, url, pr" +
                    "operties, measurements, duration) {\r\n                    var _this = this;\r\n    " +
                    "                if (typeof name !== \"string\") {\r\n                        name = " +
                    "window.document && window.document.title || \"\";\r\n                    }\r\n        " +
                    "            if (typeof url !== \"string\") {\r\n                        url = window" +
                    ".location && window.location.href || \"\";\r\n                    }\r\n               " +
                    "     var pageViewSent = false;\r\n                    var customDuration = 0;\r\n   " +
                    "                 if (Telemetry.PageViewPerformance.isPerformanceTimingSupported(" +
                    ")) {\r\n                        var start = Telemetry.PageViewPerformance.getPerfo" +
                    "rmanceTiming().navigationStart;\r\n                        customDuration = Teleme" +
                    "try.PageViewPerformance.getDuration(start, +new Date);\r\n                    }\r\n " +
                    "                   else {\r\n                        this.appInsights.sendPageView" +
                    "Internal(name, url, !isNaN(duration) ? duration : 0, properties, measurements);\r" +
                    "\n                        this.appInsights.flush();\r\n                        page" +
                    "ViewSent = true;\r\n                    }\r\n                    if (this.overridePa" +
                    "geViewDuration || !isNaN(duration)) {\r\n                        this.appInsights." +
                    "sendPageViewInternal(name, url, !isNaN(duration) ? duration : customDuration, pr" +
                    "operties, measurements);\r\n                        this.appInsights.flush();\r\n   " +
                    "                     pageViewSent = true;\r\n                    }\r\n              " +
                    "      var maxDurationLimit = 60000;\r\n                    if (!Telemetry.PageView" +
                    "Performance.isPerformanceTimingSupported()) {\r\n                        Applicati" +
                    "onInsights._InternalLogging.throwInternalNonUserActionable(ApplicationInsights.L" +
                    "oggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(ApplicationI" +
                    "nsights._InternalMessageId.NONUSRACT_NavigationTimingNotSupported, \"trackPageVie" +
                    "w: navigation timing API used for calculation of page duration is not supported " +
                    "in this browser. This page view will be collected without duration and timing in" +
                    "fo.\"));\r\n                        return;\r\n                    }\r\n               " +
                    "     var handle = setInterval(function () {\r\n                        try {\r\n    " +
                    "                        if (Telemetry.PageViewPerformance.isPerformanceTimingDat" +
                    "aReady()) {\r\n                                clearInterval(handle);\r\n           " +
                    "                     var pageViewPerformance = new Telemetry.PageViewPerformance" +
                    "(name, url, null, properties, measurements);\r\n                                if" +
                    " (!pageViewPerformance.getIsValid() && !pageViewSent) {\r\n                       " +
                    "             _this.appInsights.sendPageViewInternal(name, url, customDuration, p" +
                    "roperties, measurements);\r\n                                    _this.appInsights" +
                    ".flush();\r\n                                }\r\n                                el" +
                    "se {\r\n                                    if (!pageViewSent) {\r\n                " +
                    "                        _this.appInsights.sendPageViewInternal(name, url, pageVi" +
                    "ewPerformance.getDurationMs(), properties, measurements);\r\n                     " +
                    "               }\r\n                                    if (!_this.pageViewPerform" +
                    "anceSent) {\r\n                                        _this.appInsights.sendPageV" +
                    "iewPerformanceInternal(pageViewPerformance);\r\n                                  " +
                    "      _this.pageViewPerformanceSent = true;\r\n                                   " +
                    " }\r\n                                    _this.appInsights.flush();\r\n            " +
                    "                    }\r\n                            }\r\n                          " +
                    "  else if (Telemetry.PageViewPerformance.getDuration(start, +new Date) > maxDura" +
                    "tionLimit) {\r\n                                clearInterval(handle);\r\n          " +
                    "                      if (!pageViewSent) {\r\n                                    " +
                    "_this.appInsights.sendPageViewInternal(name, url, maxDurationLimit, properties, " +
                    "measurements);\r\n                                    _this.appInsights.flush();\r\n" +
                    "                                }\r\n                            }\r\n              " +
                    "          }\r\n                        catch (e) {\r\n                            Ap" +
                    "plicationInsights._InternalLogging.throwInternalNonUserActionable(ApplicationIns" +
                    "ights.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessage(Appl" +
                    "icationInsights._InternalMessageId.NONUSRACT_TrackPVFailedCalc, \"trackPageView f" +
                    "ailed on page load calculation: \" + ApplicationInsights.Util.getExceptionName(e)" +
                    ", { exception: ApplicationInsights.Util.dump(e) }));\r\n                        }\r" +
                    "\n                    }, 100);\r\n                };\r\n                return PageVi" +
                    "ewManager;\r\n            })();\r\n            Telemetry.PageViewManager = PageViewM" +
                    "anager;\r\n        })(Telemetry = ApplicationInsights.Telemetry || (ApplicationIns" +
                    "ights.Telemetry = {}));\r\n    })(ApplicationInsights = Microsoft.ApplicationInsig" +
                    "hts || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}))" +
                    ";\r\n/// <reference path=\"../AppInsights.ts\" />\r\nvar Microsoft;\r\n(function (Micros" +
                    "oft) {\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n   " +
                    "     var Telemetry;\r\n        (function (Telemetry) {\r\n            \"use strict\";\r" +
                    "\n            var PageVisitTimeManager = (function () {\r\n                function" +
                    " PageVisitTimeManager(pageVisitTimeTrackingHandler) {\r\n                    this." +
                    "prevPageVisitDataKeyName = \"prevPageVisitData\";\r\n                    this.pageVi" +
                    "sitTimeTrackingHandler = pageVisitTimeTrackingHandler;\r\n                }\r\n     " +
                    "           PageVisitTimeManager.prototype.trackPreviousPageVisit = function (cur" +
                    "rentPageName, currentPageUrl) {\r\n                    try {\r\n                    " +
                    "    var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, curr" +
                    "entPageUrl);\r\n                        if (prevPageVisitTimeData) {\r\n            " +
                    "                this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName" +
                    ", prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n        " +
                    "                }\r\n                    }\r\n                    catch (e) {\r\n     " +
                    "                   ApplicationInsights._InternalLogging.warnToConsole(\"Auto trac" +
                    "k page visit time failed, metric will not be collected: \" + ApplicationInsights." +
                    "Util.dump(e));\r\n                    }\r\n                };\r\n                PageV" +
                    "isitTimeManager.prototype.restartPageVisitTimer = function (pageName, pageUrl) {" +
                    "\r\n                    try {\r\n                        var prevPageVisitData = thi" +
                    "s.stopPageVisitTimer();\r\n                        this.startPageVisitTimer(pageNa" +
                    "me, pageUrl);\r\n                        return prevPageVisitData;\r\n              " +
                    "      }\r\n                    catch (e) {\r\n                        ApplicationIns" +
                    "ights._InternalLogging.warnToConsole(\"Call to restart failed: \" + ApplicationIns" +
                    "ights.Util.dump(e));\r\n                        return null;\r\n                    " +
                    "}\r\n                };\r\n                PageVisitTimeManager.prototype.startPageV" +
                    "isitTimer = function (pageName, pageUrl) {\r\n                    try {\r\n         " +
                    "               if (ApplicationInsights.Util.canUseSessionStorage()) {\r\n         " +
                    "                   if (ApplicationInsights.Util.getSessionStorage(this.prevPageV" +
                    "isitDataKeyName) != null) {\r\n                                throw new Error(\"Ca" +
                    "nnot call startPageVisit consecutively without first calling stopPageVisit\");\r\n " +
                    "                           }\r\n                            var currPageVisitData " +
                    "= new PageVisitData(pageName, pageUrl);\r\n                            var currPag" +
                    "eVisitDataStr = JSON.stringify(currPageVisitData);\r\n                            " +
                    "ApplicationInsights.Util.setSessionStorage(this.prevPageVisitDataKeyName, currPa" +
                    "geVisitDataStr);\r\n                        }\r\n                    }\r\n            " +
                    "        catch (e) {\r\n                        ApplicationInsights._InternalLoggin" +
                    "g.warnToConsole(\"Call to start failed: \" + ApplicationInsights.Util.dump(e));\r\n " +
                    "                   }\r\n                };\r\n                PageVisitTimeManager.p" +
                    "rototype.stopPageVisitTimer = function () {\r\n                    try {\r\n        " +
                    "                if (ApplicationInsights.Util.canUseSessionStorage()) {\r\n        " +
                    "                    var pageVisitEndTime = Date.now();\r\n                        " +
                    "    var pageVisitDataJsonStr = ApplicationInsights.Util.getSessionStorage(this.p" +
                    "revPageVisitDataKeyName);\r\n                            if (pageVisitDataJsonStr)" +
                    " {\r\n                                var prevPageVisitData = JSON.parse(pageVisit" +
                    "DataJsonStr);\r\n                                prevPageVisitData.pageVisitTime =" +
                    " pageVisitEndTime - prevPageVisitData.pageVisitStartTime;\r\n                     " +
                    "           ApplicationInsights.Util.removeSessionStorage(this.prevPageVisitDataK" +
                    "eyName);\r\n                                return prevPageVisitData;\r\n           " +
                    "                 }\r\n                            else {\r\n                        " +
                    "        return null;\r\n                            }\r\n                        }\r\n" +
                    "                        return null;\r\n                    }\r\n                   " +
                    " catch (e) {\r\n                        ApplicationInsights._InternalLogging.warnT" +
                    "oConsole(\"Stop page visit timer failed: \" + ApplicationInsights.Util.dump(e));\r\n" +
                    "                        return null;\r\n                    }\r\n                };\r" +
                    "\n                return PageVisitTimeManager;\r\n            })();\r\n            Te" +
                    "lemetry.PageVisitTimeManager = PageVisitTimeManager;\r\n            var PageVisitD" +
                    "ata = (function () {\r\n                function PageVisitData(pageName, pageUrl) " +
                    "{\r\n                    this.pageVisitStartTime = Date.now();\r\n                  " +
                    "  this.pageName = pageName;\r\n                    this.pageUrl = pageUrl;\r\n      " +
                    "          }\r\n                return PageVisitData;\r\n            })();\r\n         " +
                    "   Telemetry.PageVisitData = PageVisitData;\r\n        })(Telemetry = ApplicationI" +
                    "nsights.Telemetry || (ApplicationInsights.Telemetry = {}));\r\n    })(ApplicationI" +
                    "nsights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}))" +
                    ";\r\n})(Microsoft || (Microsoft = {}));\r\nvar AI;\r\n(function (AI) {\r\n    \"use stric" +
                    "t\";\r\n    (function (DependencyKind) {\r\n        DependencyKind[DependencyKind[\"SQ" +
                    "L\"] = 0] = \"SQL\";\r\n        DependencyKind[DependencyKind[\"Http\"] = 1] = \"Http\";\r" +
                    "\n        DependencyKind[DependencyKind[\"Other\"] = 2] = \"Other\";\r\n    })(AI.Depen" +
                    "dencyKind || (AI.DependencyKind = {}));\r\n    var DependencyKind = AI.DependencyK" +
                    "ind;\r\n})(AI || (AI = {}));\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    (f" +
                    "unction (DependencySourceType) {\r\n        DependencySourceType[DependencySourceT" +
                    "ype[\"Undefined\"] = 0] = \"Undefined\";\r\n        DependencySourceType[DependencySou" +
                    "rceType[\"Aic\"] = 1] = \"Aic\";\r\n        DependencySourceType[DependencySourceType[" +
                    "\"Apmc\"] = 2] = \"Apmc\";\r\n    })(AI.DependencySourceType || (AI.DependencySourceTy" +
                    "pe = {}));\r\n    var DependencySourceType = AI.DependencySourceType;\r\n})(AI || (A" +
                    "I = {}));\r\n/// <reference path=\"Domain.ts\" />\r\n/// <reference path=\"DataPointTyp" +
                    "e.ts\" />\r\n/// <reference path=\"DependencyKind.ts\" />\r\n/// <reference path=\"Depen" +
                    "dencySourceType.ts\" />\r\nvar AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var Re" +
                    "moteDependencyData = (function (_super) {\r\n        __extends(RemoteDependencyDat" +
                    "a, _super);\r\n        function RemoteDependencyData() {\r\n            _super.call(" +
                    "this);\r\n            this.ver = 2;\r\n            this.kind = AI.DataPointType.Aggr" +
                    "egation;\r\n            this.dependencyKind = AI.DependencyKind.Other;\r\n          " +
                    "  this.success = true;\r\n            this.dependencySource = AI.DependencySourceT" +
                    "ype.Apmc;\r\n            this.properties = {};\r\n            _super.call(this);\r\n  " +
                    "      }\r\n        return RemoteDependencyData;\r\n    })(Microsoft.Telemetry.Domain" +
                    ");\r\n    AI.RemoteDependencyData = RemoteDependencyData;\r\n})(AI || (AI = {}));\r\n/" +
                    "// <reference path=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/PageViewD" +
                    "ata.ts\" />\r\n/// <reference path=\"./Common/DataSanitizer.ts\"/>\r\n/// <reference pa" +
                    "th=\"../../JavaScriptSDK.Interfaces/Contracts/Generated/RemoteDependencyData.ts\"/" +
                    ">\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (f" +
                    "unction (ApplicationInsights) {\r\n        var Telemetry;\r\n        (function (Tele" +
                    "metry) {\r\n            \"use strict\";\r\n            var RemoteDependencyData = (fun" +
                    "ction (_super) {\r\n                __extends(RemoteDependencyData, _super);\r\n    " +
                    "            function RemoteDependencyData(id, absoluteUrl, commandName, value, s" +
                    "uccess, resultCode, method) {\r\n                    _super.call(this);\r\n         " +
                    "           this.aiDataContract = {\r\n                        id: ApplicationInsig" +
                    "hts.FieldType.Required,\r\n                        ver: ApplicationInsights.FieldT" +
                    "ype.Required,\r\n                        name: ApplicationInsights.FieldType.Defau" +
                    "lt,\r\n                        kind: ApplicationInsights.FieldType.Required,\r\n    " +
                    "                    value: ApplicationInsights.FieldType.Default,\r\n             " +
                    "           count: ApplicationInsights.FieldType.Default,\r\n                      " +
                    "  min: ApplicationInsights.FieldType.Default,\r\n                        max: Appl" +
                    "icationInsights.FieldType.Default,\r\n                        stdDev: ApplicationI" +
                    "nsights.FieldType.Default,\r\n                        dependencyKind: ApplicationI" +
                    "nsights.FieldType.Default,\r\n                        success: ApplicationInsights" +
                    ".FieldType.Default,\r\n                        async: ApplicationInsights.FieldTyp" +
                    "e.Default,\r\n                        dependencySource: ApplicationInsights.FieldT" +
                    "ype.Default,\r\n                        commandName: ApplicationInsights.FieldType" +
                    ".Default,\r\n                        dependencyTypeName: ApplicationInsights.Field" +
                    "Type.Default,\r\n                        properties: ApplicationInsights.FieldType" +
                    ".Default,\r\n                        resultCode: ApplicationInsights.FieldType.Def" +
                    "ault\r\n                    };\r\n                    this.id = id;\r\n               " +
                    "     this.name = this.formatDependencyName(method, absoluteUrl);\r\n              " +
                    "      this.commandName = Telemetry.Common.DataSanitizer.sanitizeUrl(commandName)" +
                    ";\r\n                    this.value = value;\r\n                    this.success = s" +
                    "uccess;\r\n                    this.resultCode = resultCode + \"\";\r\n               " +
                    "     this.dependencyKind = AI.DependencyKind.Http;\r\n                    this.dep" +
                    "endencyTypeName = \"Ajax\";\r\n                }\r\n                RemoteDependencyDa" +
                    "ta.prototype.formatDependencyName = function (method, absoluteUrl) {\r\n          " +
                    "          if (method) {\r\n                        return method.toUpperCase() + \"" +
                    " \" + absoluteUrl;\r\n                    }\r\n                    else {\r\n          " +
                    "              return absoluteUrl;\r\n                    }\r\n                };\r\n  " +
                    "              RemoteDependencyData.envelopeType = \"Microsoft.ApplicationInsights" +
                    ".{0}.RemoteDependency\";\r\n                RemoteDependencyData.dataType = \"Remote" +
                    "DependencyData\";\r\n                return RemoteDependencyData;\r\n            })(A" +
                    "I.RemoteDependencyData);\r\n            Telemetry.RemoteDependencyData = RemoteDep" +
                    "endencyData;\r\n        })(Telemetry = ApplicationInsights.Telemetry || (Applicati" +
                    "onInsights.Telemetry = {}));\r\n    })(ApplicationInsights = Microsoft.Application" +
                    "Insights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft =" +
                    " {}));\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationInsights;\r\n " +
                    "   (function (ApplicationInsights) {\r\n        \"use strict\";\r\n    })(ApplicationI" +
                    "nsights = Microsoft.ApplicationInsights || (Microsoft.ApplicationInsights = {}))" +
                    ";\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference path=\"./IConfig.ts\" />\r\n//" +
                    "/ <reference path=\"./ITelemetryContext.ts\" />\r\n/// <reference path=\"./Contracts/" +
                    "Generated/SeverityLevel.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var" +
                    " ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        \"use stric" +
                    "t\";\r\n    })(ApplicationInsights = Microsoft.ApplicationInsights || (Microsoft.Ap" +
                    "plicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r\n/// <reference pa" +
                    "th=\"telemetrycontext.ts\" />\r\n/// <reference path=\"./Telemetry/Common/Data.ts\"/>\r" +
                    "\n/// <reference path=\"./Util.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interf" +
                    "aces/Contracts/Generated/SessionState.ts\"/>\r\n/// <reference path=\"./Telemetry/Pa" +
                    "geViewManager.ts\"/>\r\n/// <reference path=\"./Telemetry/PageVisitTimeManager.ts\"/>" +
                    "\r\n/// <reference path=\"./Telemetry/RemoteDependencyData.ts\"/>\r\n/// <reference pa" +
                    "th=\"./ajax/ajax.ts\"/>\r\n/// <reference path=\"./DataLossAnalyzer.ts\"/>\r\n/// <refer" +
                    "ence path=\"./SplitTest.ts\"/>\r\n/// <reference path=\"../JavaScriptSDK.Interfaces/I" +
                    "AppInsights.ts\"/>\r\nvar Microsoft;\r\n(function (Microsoft) {\r\n    var ApplicationI" +
                    "nsights;\r\n    (function (ApplicationInsights) {\r\n        \"use strict\";\r\n        " +
                    "ApplicationInsights.Version = \"0.22.19\";\r\n        var AppInsights = (function ()" +
                    " {\r\n            function AppInsights(config) {\r\n                var _this = this" +
                    ";\r\n                this._trackAjaxAttempts = 0;\r\n                this.config = c" +
                    "onfig || {};\r\n                var defaults = AppInsights.defaultConfig;\r\n       " +
                    "         if (defaults !== undefined) {\r\n                    for (var field in de" +
                    "faults) {\r\n                        if (this.config[field] === undefined) {\r\n    " +
                    "                        this.config[field] = defaults[field];\r\n                 " +
                    "       }\r\n                    }\r\n                }\r\n                ApplicationI" +
                    "nsights._InternalLogging.verboseLogging = function () { return _this.config.verb" +
                    "oseLogging; };\r\n                ApplicationInsights._InternalLogging.enableDebug" +
                    "Exceptions = function () { return _this.config.enableDebug; };\r\n                " +
                    "var configGetters = {\r\n                    instrumentationKey: function () { ret" +
                    "urn _this.config.instrumentationKey; },\r\n                    accountId: function" +
                    " () { return _this.config.accountId; },\r\n                    sessionRenewalMs: f" +
                    "unction () { return _this.config.sessionRenewalMs; },\r\n                    sessi" +
                    "onExpirationMs: function () { return _this.config.sessionExpirationMs; },\r\n     " +
                    "               endpointUrl: function () { return _this.config.endpointUrl; },\r\n " +
                    "                   emitLineDelimitedJson: function () { return _this.config.emit" +
                    "LineDelimitedJson; },\r\n                    maxBatchSizeInBytes: function () { re" +
                    "turn _this.config.maxBatchSizeInBytes; },\r\n                    maxBatchInterval:" +
                    " function () { return _this.config.maxBatchInterval; },\r\n                    dis" +
                    "ableTelemetry: function () { return _this.config.disableTelemetry; },\r\n         " +
                    "           sampleRate: function () { return _this.config.samplingPercentage; },\r" +
                    "\n                    cookieDomain: function () { return _this.config.cookieDomai" +
                    "n; },\r\n                    enableSessionStorageBuffer: function () { return _thi" +
                    "s.config.enableSessionStorageBuffer; }\r\n                };\r\n                var " +
                    "enableExperiment = new ApplicationInsights.SplitTest().isEnabled(this.config.ins" +
                    "trumentationKey, 5);\r\n                this.config.enableSessionStorageBuffer = e" +
                    "nableExperiment;\r\n                this.context = new ApplicationInsights.Telemet" +
                    "ryContext(configGetters);\r\n                ApplicationInsights.DataLossAnalyzer." +
                    "appInsights = this;\r\n                ApplicationInsights.DataLossAnalyzer.enable" +
                    "d = enableExperiment;\r\n                ApplicationInsights.DataLossAnalyzer.repo" +
                    "rtLostItems();\r\n                this._pageViewManager = new Microsoft.Applicatio" +
                    "nInsights.Telemetry.PageViewManager(this, this.config.overridePageViewDuration);" +
                    "\r\n                this._eventTracking = new Timing(\"trackEvent\");\r\n             " +
                    "   this._eventTracking.action = function (name, url, duration, properties, measu" +
                    "rements) {\r\n                    if (!measurements) {\r\n                        me" +
                    "asurements = { duration: duration };\r\n                    }\r\n                   " +
                    " else {\r\n                        if (isNaN(measurements[\"duration\"])) {\r\n       " +
                    "                     measurements[\"duration\"] = duration;\r\n                     " +
                    "   }\r\n                    }\r\n                    var event = new ApplicationInsi" +
                    "ghts.Telemetry.Event(name, properties, measurements);\r\n                    var d" +
                    "ata = new ApplicationInsights.Telemetry.Common.Data(ApplicationInsights.Telemetr" +
                    "y.Event.dataType, event);\r\n                    var envelope = new ApplicationIns" +
                    "ights.Telemetry.Common.Envelope(data, ApplicationInsights.Telemetry.Event.envelo" +
                    "peType);\r\n                    _this.context.track(envelope);\r\n                };" +
                    "\r\n                this._pageTracking = new Timing(\"trackPageView\");\r\n           " +
                    "     this._pageTracking.action = function (name, url, duration, properties, meas" +
                    "urements) {\r\n                    _this.sendPageViewInternal(name, url, duration," +
                    " properties, measurements);\r\n                };\r\n                this._pageVisit" +
                    "TimeManager = new ApplicationInsights.Telemetry.PageVisitTimeManager(function (p" +
                    "ageName, pageUrl, pageVisitTime) { return _this.trackPageVisitTime(pageName, pag" +
                    "eUrl, pageVisitTime); });\r\n                if (!this.config.disableAjaxTracking)" +
                    " {\r\n                    new Microsoft.ApplicationInsights.AjaxMonitor(this);\r\n  " +
                    "              }\r\n            }\r\n            AppInsights.prototype.sendPageViewIn" +
                    "ternal = function (name, url, duration, properties, measurements) {\r\n           " +
                    "     var pageView = new ApplicationInsights.Telemetry.PageView(name, url, durati" +
                    "on, properties, measurements);\r\n                var data = new ApplicationInsigh" +
                    "ts.Telemetry.Common.Data(ApplicationInsights.Telemetry.PageView.dataType, pageVi" +
                    "ew);\r\n                var envelope = new ApplicationInsights.Telemetry.Common.En" +
                    "velope(data, ApplicationInsights.Telemetry.PageView.envelopeType);\r\n            " +
                    "    this.context.track(envelope);\r\n                this._trackAjaxAttempts = 0;\r" +
                    "\n            };\r\n            AppInsights.prototype.sendPageViewPerformanceIntern" +
                    "al = function (pageViewPerformance) {\r\n                var pageViewPerformanceDa" +
                    "ta = new ApplicationInsights.Telemetry.Common.Data(ApplicationInsights.Telemetry" +
                    ".PageViewPerformance.dataType, pageViewPerformance);\r\n                var pageVi" +
                    "ewPerformanceEnvelope = new ApplicationInsights.Telemetry.Common.Envelope(pageVi" +
                    "ewPerformanceData, ApplicationInsights.Telemetry.PageViewPerformance.envelopeTyp" +
                    "e);\r\n                this.context.track(pageViewPerformanceEnvelope);\r\n         " +
                    "   };\r\n            AppInsights.prototype.startTrackPage = function (name) {\r\n   " +
                    "             try {\r\n                    if (typeof name !== \"string\") {\r\n       " +
                    "                 name = window.document && window.document.title || \"\";\r\n       " +
                    "             }\r\n                    this._pageTracking.start(name);\r\n           " +
                    "     }\r\n                catch (e) {\r\n                    ApplicationInsights._In" +
                    "ternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity" +
                    ".CRITICAL, new ApplicationInsights._InternalLogMessage(ApplicationInsights._Inte" +
                    "rnalMessageId.NONUSRACT_StartTrackFailed, \"startTrackPage failed, page view may " +
                    "not be collected: \" + ApplicationInsights.Util.getExceptionName(e), { exception:" +
                    " ApplicationInsights.Util.dump(e) }));\r\n                }\r\n            };\r\n     " +
                    "       AppInsights.prototype.stopTrackPage = function (name, url, properties, me" +
                    "asurements) {\r\n                try {\r\n                    if (typeof name !== \"s" +
                    "tring\") {\r\n                        name = window.document && window.document.tit" +
                    "le || \"\";\r\n                    }\r\n                    if (typeof url !== \"string" +
                    "\") {\r\n                        url = window.location && window.location.href || \"" +
                    "\";\r\n                    }\r\n                    this._pageTracking.stop(name, url" +
                    ", properties, measurements);\r\n                    if (this.config.autoTrackPageV" +
                    "isitTime) {\r\n                        this._pageVisitTimeManager.trackPreviousPag" +
                    "eVisit(name, url);\r\n                    }\r\n                }\r\n                ca" +
                    "tch (e) {\r\n                    ApplicationInsights._InternalLogging.throwInterna" +
                    "lNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new Application" +
                    "Insights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_St" +
                    "opTrackFailed, \"stopTrackPage failed, page view will not be collected: \" + Appli" +
                    "cationInsights.Util.getExceptionName(e), { exception: ApplicationInsights.Util.d" +
                    "ump(e) }));\r\n                }\r\n            };\r\n            AppInsights.prototyp" +
                    "e.trackPageView = function (name, url, properties, measurements, duration) {\r\n  " +
                    "              try {\r\n                    this._pageViewManager.trackPageView(nam" +
                    "e, url, properties, measurements, duration);\r\n                    if (this.confi" +
                    "g.autoTrackPageVisitTime) {\r\n                        this._pageVisitTimeManager." +
                    "trackPreviousPageVisit(name, url);\r\n                    }\r\n                }\r\n  " +
                    "              catch (e) {\r\n                    ApplicationInsights._InternalLogg" +
                    "ing.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL," +
                    " new ApplicationInsights._InternalLogMessage(ApplicationInsights._InternalMessag" +
                    "eId.NONUSRACT_TrackPVFailed, \"trackPageView failed, page view will not be collec" +
                    "ted: \" + ApplicationInsights.Util.getExceptionName(e), { exception: ApplicationI" +
                    "nsights.Util.dump(e) }));\r\n                }\r\n            };\r\n            AppIns" +
                    "ights.prototype.startTrackEvent = function (name) {\r\n                try {\r\n    " +
                    "                this._eventTracking.start(name);\r\n                }\r\n           " +
                    "     catch (e) {\r\n                    ApplicationInsights._InternalLogging.throw" +
                    "InternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new Appl" +
                    "icationInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUS" +
                    "RACT_StartTrackEventFailed, \"startTrackEvent failed, event will not be collected" +
                    ": \" + ApplicationInsights.Util.getExceptionName(e), { exception: ApplicationInsi" +
                    "ghts.Util.dump(e) }));\r\n                }\r\n            };\r\n            AppInsigh" +
                    "ts.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n     " +
                    "           try {\r\n                    this._eventTracking.stop(name, undefined, " +
                    "properties, measurements);\r\n                }\r\n                catch (e) {\r\n    " +
                    "                ApplicationInsights._InternalLogging.throwInternalNonUserActiona" +
                    "ble(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._Inter" +
                    "nalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_StopTrackEventFai" +
                    "led, \"stopTrackEvent failed, event will not be collected: \" + ApplicationInsight" +
                    "s.Util.getExceptionName(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n" +
                    "                }\r\n            };\r\n            AppInsights.prototype.trackEvent " +
                    "= function (name, properties, measurements) {\r\n                try {\r\n          " +
                    "          var eventTelemetry = new ApplicationInsights.Telemetry.Event(name, pro" +
                    "perties, measurements);\r\n                    var data = new ApplicationInsights." +
                    "Telemetry.Common.Data(ApplicationInsights.Telemetry.Event.dataType, eventTelemet" +
                    "ry);\r\n                    var envelope = new ApplicationInsights.Telemetry.Commo" +
                    "n.Envelope(data, ApplicationInsights.Telemetry.Event.envelopeType);\r\n           " +
                    "         this.context.track(envelope);\r\n                }\r\n                catch" +
                    " (e) {\r\n                    ApplicationInsights._InternalLogging.throwInternalNo" +
                    "nUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationIns" +
                    "ights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_Track" +
                    "EventFailed, \"trackEvent failed, event will not be collected: \" + ApplicationIns" +
                    "ights.Util.getExceptionName(e), { exception: ApplicationInsights.Util.dump(e) })" +
                    ");\r\n                }\r\n            };\r\n            AppInsights.prototype.trackAj" +
                    "ax = function (id, absoluteUrl, pathName, totalTime, success, resultCode, method" +
                    ") {\r\n                if (this.config.maxAjaxCallsPerView === -1 ||\r\n            " +
                    "        this._trackAjaxAttempts < this.config.maxAjaxCallsPerView) {\r\n          " +
                    "          var dependency = new ApplicationInsights.Telemetry.RemoteDependencyDat" +
                    "a(id, absoluteUrl, pathName, totalTime, success, resultCode, method);\r\n         " +
                    "           var dependencyData = new ApplicationInsights.Telemetry.Common.Data(Ap" +
                    "plicationInsights.Telemetry.RemoteDependencyData.dataType, dependency);\r\n       " +
                    "             var envelope = new ApplicationInsights.Telemetry.Common.Envelope(de" +
                    "pendencyData, ApplicationInsights.Telemetry.RemoteDependencyData.envelopeType);\r" +
                    "\n                    this.context.track(envelope);\r\n                }\r\n         " +
                    "       else if (this._trackAjaxAttempts === this.config.maxAjaxCallsPerView) {\r\n" +
                    "                    ApplicationInsights._InternalLogging.throwInternalUserAction" +
                    "able(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._Inte" +
                    "rnalLogMessage(ApplicationInsights._InternalMessageId.USRACT_MaxAjaxPerPVExceede" +
                    "d, \"Maximum ajax per page view limit reached, ajax monitoring is paused until th" +
                    "e next trackPageView(). In order to increase the limit set the maxAjaxCallsPerVi" +
                    "ew configuration parameter.\"));\r\n                }\r\n                ++this._trac" +
                    "kAjaxAttempts;\r\n            };\r\n            AppInsights.prototype.trackException" +
                    " = function (exception, handledAt, properties, measurements, severityLevel) {\r\n " +
                    "               try {\r\n                    if (!ApplicationInsights.Util.isError(" +
                    "exception)) {\r\n                        try {\r\n                            throw " +
                    "new Error(exception);\r\n                        }\r\n                        catch " +
                    "(error) {\r\n                            exception = error;\r\n                     " +
                    "   }\r\n                    }\r\n                    var exceptionTelemetry = new Ap" +
                    "plicationInsights.Telemetry.Exception(exception, handledAt, properties, measurem" +
                    "ents, severityLevel);\r\n                    var data = new ApplicationInsights.Te" +
                    "lemetry.Common.Data(ApplicationInsights.Telemetry.Exception.dataType, exceptionT" +
                    "elemetry);\r\n                    var envelope = new ApplicationInsights.Telemetry" +
                    ".Common.Envelope(data, ApplicationInsights.Telemetry.Exception.envelopeType);\r\n " +
                    "                   this.context.track(envelope);\r\n                }\r\n           " +
                    "     catch (e) {\r\n                    ApplicationInsights._InternalLogging.throw" +
                    "InternalNonUserActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new Appl" +
                    "icationInsights._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUS" +
                    "RACT_TrackExceptionFailed, \"trackException failed, exception will not be collect" +
                    "ed: \" + ApplicationInsights.Util.getExceptionName(e), { exception: ApplicationIn" +
                    "sights.Util.dump(e) }));\r\n                }\r\n            };\r\n            AppInsi" +
                    "ghts.prototype.trackMetric = function (name, average, sampleCount, min, max, pro" +
                    "perties) {\r\n                try {\r\n                    var telemetry = new Appli" +
                    "cationInsights.Telemetry.Metric(name, average, sampleCount, min, max, properties" +
                    ");\r\n                    var data = new ApplicationInsights.Telemetry.Common.Data" +
                    "(ApplicationInsights.Telemetry.Metric.dataType, telemetry);\r\n                   " +
                    " var envelope = new ApplicationInsights.Telemetry.Common.Envelope(data, Applicat" +
                    "ionInsights.Telemetry.Metric.envelopeType);\r\n                    this.context.tr" +
                    "ack(envelope);\r\n                }\r\n                catch (e) {\r\n                " +
                    "    ApplicationInsights._InternalLogging.throwInternalNonUserActionable(Applicat" +
                    "ionInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessag" +
                    "e(ApplicationInsights._InternalMessageId.NONUSRACT_TrackMetricFailed, \"trackMetr" +
                    "ic failed, metric will not be collected: \" + ApplicationInsights.Util.getExcepti" +
                    "onName(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n                }" +
                    "\r\n            };\r\n            AppInsights.prototype.trackTrace = function (messa" +
                    "ge, properties) {\r\n                try {\r\n                    var telemetry = ne" +
                    "w ApplicationInsights.Telemetry.Trace(message, properties);\r\n                   " +
                    " var data = new ApplicationInsights.Telemetry.Common.Data(ApplicationInsights.Te" +
                    "lemetry.Trace.dataType, telemetry);\r\n                    var envelope = new Appl" +
                    "icationInsights.Telemetry.Common.Envelope(data, ApplicationInsights.Telemetry.Tr" +
                    "ace.envelopeType);\r\n                    this.context.track(envelope);\r\n         " +
                    "       }\r\n                catch (e) {\r\n                    ApplicationInsights._" +
                    "InternalLogging.throwInternalNonUserActionable(ApplicationInsights.LoggingSeveri" +
                    "ty.WARNING, new ApplicationInsights._InternalLogMessage(ApplicationInsights._Int" +
                    "ernalMessageId.NONUSRACT_TrackTraceFailed, \"trackTrace failed, trace will not be" +
                    " collected: \" + ApplicationInsights.Util.getExceptionName(e), { exception: Appli" +
                    "cationInsights.Util.dump(e) }));\r\n                }\r\n            };\r\n           " +
                    " AppInsights.prototype.trackPageVisitTime = function (pageName, pageUrl, pageVis" +
                    "itTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageU" +
                    "rl };\r\n                this.trackMetric(\"PageVisitTime\", pageVisitTime, 1, pageV" +
                    "isitTime, pageVisitTime, properties);\r\n            };\r\n            AppInsights.p" +
                    "rototype.flush = function () {\r\n                try {\r\n                    this." +
                    "context._sender.triggerSend();\r\n                }\r\n                catch (e) {\r\n" +
                    "                    ApplicationInsights._InternalLogging.throwInternalNonUserAct" +
                    "ionable(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationInsights._I" +
                    "nternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_FlushFailed, " +
                    "\"flush failed, telemetry will not be collected: \" + ApplicationInsights.Util.get" +
                    "ExceptionName(e), { exception: ApplicationInsights.Util.dump(e) }));\r\n          " +
                    "      }\r\n            };\r\n            AppInsights.prototype.setAuthenticatedUserC" +
                    "ontext = function (authenticatedUserId, accountId) {\r\n                try {\r\n   " +
                    "                 this.context.user.setAuthenticatedUserContext(authenticatedUser" +
                    "Id, accountId);\r\n                }\r\n                catch (e) {\r\n               " +
                    "     ApplicationInsights._InternalLogging.throwInternalUserActionable(Applicatio" +
                    "nInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(A" +
                    "pplicationInsights._InternalMessageId.USRACT_SetAuthContextFailed, \"Setting auth" +
                    " user context failed. \" + ApplicationInsights.Util.getExceptionName(e), { except" +
                    "ion: ApplicationInsights.Util.dump(e) }));\r\n                }\r\n            };\r\n " +
                    "           AppInsights.prototype.clearAuthenticatedUserContext = function () {\r\n" +
                    "                try {\r\n                    this.context.user.clearAuthenticatedU" +
                    "serContext();\r\n                }\r\n                catch (e) {\r\n                 " +
                    "   ApplicationInsights._InternalLogging.throwInternalUserActionable(ApplicationI" +
                    "nsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalLogMessage(App" +
                    "licationInsights._InternalMessageId.USRACT_SetAuthContextFailed, \"Clearing auth " +
                    "user context failed. \" + ApplicationInsights.Util.getExceptionName(e), { excepti" +
                    "on: ApplicationInsights.Util.dump(e) }));\r\n                }\r\n            };\r\n  " +
                    "          AppInsights.prototype.SendCORSException = function (properties) {\r\n   " +
                    "             var exceptionData = Microsoft.ApplicationInsights.Telemetry.Excepti" +
                    "on.CreateSimpleException(\"Script error.\", \"Error\", \"unknown\", \"unknown\", \"The br" +
                    "owser\'s same-origin policy prevents us from getting the details of this exceptio" +
                    "n.The exception occurred in a script loaded from an origin different than the we" +
                    "b page.For cross- domain error reporting you can use crossorigin attribute toget" +
                    "her with appropriate CORS HTTP headers.For more information please see http://ww" +
                    "w.w3.org/TR/cors/.\", 0, null);\r\n                exceptionData.properties = prope" +
                    "rties;\r\n                var data = new ApplicationInsights.Telemetry.Common.Data" +
                    "(ApplicationInsights.Telemetry.Exception.dataType, exceptionData);\r\n            " +
                    "    var envelope = new ApplicationInsights.Telemetry.Common.Envelope(data, Appli" +
                    "cationInsights.Telemetry.Exception.envelopeType);\r\n                this.context." +
                    "track(envelope);\r\n            };\r\n            AppInsights.prototype._onerror = f" +
                    "unction (message, url, lineNumber, columnNumber, error) {\r\n                try {" +
                    "\r\n                    var properties = { url: url ? url : document.URL };\r\n     " +
                    "               if (ApplicationInsights.Util.isCrossOriginError(message, url, lin" +
                    "eNumber, columnNumber, error)) {\r\n                        this.SendCORSException" +
                    "(properties);\r\n                    }\r\n                    else {\r\n              " +
                    "          if (!ApplicationInsights.Util.isError(error)) {\r\n                     " +
                    "       var stack = \"window.onerror@\" + properties.url + \":\" + lineNumber + \":\" +" +
                    " (columnNumber || 0);\r\n                            error = new Error(message);\r\n" +
                    "                            error[\"stack\"] = stack;\r\n                        }\r\n" +
                    "                        this.trackException(error, null, properties);\r\n         " +
                    "           }\r\n                }\r\n                catch (exception) {\r\n          " +
                    "          var errorString = error ? (error.name + \", \" + error.message) : \"null\"" +
                    ";\r\n                    var exceptionDump = ApplicationInsights.Util.dump(excepti" +
                    "on);\r\n                    ApplicationInsights._InternalLogging.throwInternalNonU" +
                    "serActionable(ApplicationInsights.LoggingSeverity.CRITICAL, new ApplicationInsig" +
                    "hts._InternalLogMessage(ApplicationInsights._InternalMessageId.NONUSRACT_Excepti" +
                    "onWhileLoggingError, \"_onerror threw exception while logging error, error will n" +
                    "ot be collected: \" + ApplicationInsights.Util.getExceptionName(exception), { exc" +
                    "eption: exceptionDump, errorString: errorString }));\r\n                }\r\n       " +
                    "     };\r\n            return AppInsights;\r\n        })();\r\n        ApplicationInsi" +
                    "ghts.AppInsights = AppInsights;\r\n        var Timing = (function () {\r\n          " +
                    "  function Timing(name) {\r\n                this._name = name;\r\n                t" +
                    "his._events = {};\r\n            }\r\n            Timing.prototype.start = function " +
                    "(name) {\r\n                if (typeof this._events[name] !== \"undefined\") {\r\n    " +
                    "                ApplicationInsights._InternalLogging.throwInternalUserActionable" +
                    "(ApplicationInsights.LoggingSeverity.WARNING, new ApplicationInsights._InternalL" +
                    "ogMessage(ApplicationInsights._InternalMessageId.USRACT_StartCalledMoreThanOnce," +
                    " \"start was called more than once for this event without calling stop.\", { name:" +
                    " this._name, key: name }));\r\n                }\r\n                this._events[nam" +
                    "e] = +new Date;\r\n            };\r\n            Timing.prototype.stop = function (n" +
                    "ame, url, properties, measurements) {\r\n                var start = this._events[" +
                    "name];\r\n                if (isNaN(start)) {\r\n                    ApplicationInsi" +
                    "ghts._InternalLogging.throwInternalUserActionable(ApplicationInsights.LoggingSev" +
                    "erity.WARNING, new ApplicationInsights._InternalLogMessage(ApplicationInsights._" +
                    "InternalMessageId.USRACT_StopCalledWithoutStart, \"stop was called without a corr" +
                    "esponding start.\", { name: this._name, key: name }));\r\n                }\r\n      " +
                    "          else {\r\n                    var end = +new Date;\r\n                    " +
                    "var duration = ApplicationInsights.Telemetry.PageViewPerformance.getDuration(sta" +
                    "rt, end);\r\n                    this.action(name, url, duration, properties, meas" +
                    "urements);\r\n                }\r\n                delete this._events[name];\r\n     " +
                    "           this._events[name] = undefined;\r\n            };\r\n            return T" +
                    "iming;\r\n        })();\r\n    })(ApplicationInsights = Microsoft.ApplicationInsight" +
                    "s || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (Microsoft = {}));\r" +
                    "\n/// <reference path=\"appinsights.ts\" />\r\nvar Microsoft;\r\n(function (Microsoft) " +
                    "{\r\n    var ApplicationInsights;\r\n    (function (ApplicationInsights) {\r\n        " +
                    "\"use strict\";\r\n        var Initialization = (function () {\r\n            function" +
                    " Initialization(snippet) {\r\n                snippet.queue = snippet.queue || [];" +
                    "\r\n                var config = snippet.config || {};\r\n                if (config" +
                    " && !config.instrumentationKey) {\r\n                    config = snippet;\r\n      " +
                    "              if (config[\"iKey\"]) {\r\n                        Microsoft.Applicati" +
                    "onInsights.Version = \"0.10.0.0\";\r\n                        config.instrumentation" +
                    "Key = config[\"iKey\"];\r\n                    }\r\n                    else if (confi" +
                    "g[\"applicationInsightsId\"]) {\r\n                        Microsoft.ApplicationInsi" +
                    "ghts.Version = \"0.7.2.0\";\r\n                        config.instrumentationKey = c" +
                    "onfig[\"applicationInsightsId\"];\r\n                    }\r\n                    else" +
                    " {\r\n                        throw new Error(\"Cannot load Application Insights SD" +
                    "K, no instrumentationKey was provided.\");\r\n                    }\r\n              " +
                    "  }\r\n                config = Initialization.getDefaultConfig(config);\r\n        " +
                    "        this.snippet = snippet;\r\n                this.config = config;\r\n        " +
                    "    }\r\n            Initialization.prototype.loadAppInsights = function () {\r\n   " +
                    "             var appInsights = new Microsoft.ApplicationInsights.AppInsights(thi" +
                    "s.config);\r\n                if (this.config[\"iKey\"]) {\r\n                    var " +
                    "originalTrackPageView = appInsights.trackPageView;\r\n                    appInsig" +
                    "hts.trackPageView = function (pagePath, properties, measurements) {\r\n           " +
                    "             originalTrackPageView.apply(appInsights, [null, pagePath, propertie" +
                    "s, measurements]);\r\n                    };\r\n                }\r\n                v" +
                    "ar legacyPageView = \"logPageView\";\r\n                if (typeof this.snippet[lega" +
                    "cyPageView] === \"function\") {\r\n                    appInsights[legacyPageView] =" +
                    " function (pagePath, properties, measurements) {\r\n                        appIns" +
                    "ights.trackPageView(null, pagePath, properties, measurements);\r\n                " +
                    "    };\r\n                }\r\n                var legacyEvent = \"logEvent\";\r\n      " +
                    "          if (typeof this.snippet[legacyEvent] === \"function\") {\r\n              " +
                    "      appInsights[legacyEvent] = function (name, properties, measurements) {\r\n  " +
                    "                      appInsights.trackEvent(name, properties, measurements);\r\n " +
                    "                   };\r\n                }\r\n                return appInsights;\r\n " +
                    "           };\r\n            Initialization.prototype.emptyQueue = function () {\r\n" +
                    "                try {\r\n                    if (Microsoft.ApplicationInsights.Uti" +
                    "l.isArray(this.snippet.queue)) {\r\n                        var length = this.snip" +
                    "pet.queue.length;\r\n                        for (var i = 0; i < length; i++) {\r\n " +
                    "                           var call = this.snippet.queue[i];\r\n                  " +
                    "          call();\r\n                        }\r\n                        this.snipp" +
                    "et.queue = undefined;\r\n                        delete this.snippet.queue;\r\n     " +
                    "               }\r\n                }\r\n                catch (exception) {\r\n      " +
                    "              var properties = {};\r\n                    if (exception && typeof " +
                    "exception.toString === \"function\") {\r\n                        properties.excepti" +
                    "on = exception.toString();\r\n                    }\r\n                    var messa" +
                    "ge = new ApplicationInsights._InternalLogMessage(ApplicationInsights._InternalMe" +
                    "ssageId.NONUSRACT_FailedToSendQueuedTelemetry, \"Failed to send queued telemetry\"" +
                    ", properties);\r\n                    Microsoft.ApplicationInsights._InternalLoggi" +
                    "ng.throwInternalNonUserActionable(ApplicationInsights.LoggingSeverity.WARNING, m" +
                    "essage);\r\n                }\r\n            };\r\n            Initialization.prototyp" +
                    "e.pollInteralLogs = function (appInsightsInstance) {\r\n                return set" +
                    "Interval(function () {\r\n                    var queue = Microsoft.ApplicationIns" +
                    "ights._InternalLogging.queue;\r\n                    var length = queue.length;\r\n " +
                    "                   for (var i = 0; i < length; i++) {\r\n                        a" +
                    "ppInsightsInstance.trackTrace(queue[i].message);\r\n                    }\r\n       " +
                    "             queue.length = 0;\r\n                }, this.config.diagnosticLogInte" +
                    "rval);\r\n            };\r\n            Initialization.prototype.addHousekeepingBefo" +
                    "reUnload = function (appInsightsInstance) {\r\n                // Add callback to " +
                    "push events when the user navigates away\r\n                if (!appInsightsInstan" +
                    "ce.config.disableFlushOnBeforeUnload && (\'onbeforeunload\' in window)) {\r\n       " +
                    "             var performHousekeeping = function () {\r\n                        ap" +
                    "pInsightsInstance.context._sender.triggerSend();\r\n                        appIns" +
                    "ightsInstance.context._sessionManager.backup();\r\n                    };\r\n       " +
                    "             if (!Microsoft.ApplicationInsights.Util.addEventHandler(\'beforeunlo" +
                    "ad\', performHousekeeping)) {\r\n                        Microsoft.ApplicationInsig" +
                    "hts._InternalLogging.throwInternalNonUserActionable(Microsoft.ApplicationInsight" +
                    "s.LoggingSeverity.CRITICAL, new ApplicationInsights._InternalLogMessage(Applicat" +
                    "ionInsights._InternalMessageId.NONUSRACT_FailedToAddHandlerForOnBeforeUnload, \'C" +
                    "ould not add handler for beforeunload\'));\r\n                    }\r\n              " +
                    "  }\r\n            };\r\n            Initialization.getDefaultConfig = function (con" +
                    "fig) {\r\n                if (!config) {\r\n                    config = {};\r\n      " +
                    "          }\r\n                config.endpointUrl = config.endpointUrl || \"//dc.se" +
                    "rvices.visualstudio.com/v2/track\";\r\n                config.sessionRenewalMs = 30" +
                    " * 60 * 1000;\r\n                config.sessionExpirationMs = 24 * 60 * 60 * 1000;" +
                    "\r\n                config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? " +
                    "config.maxBatchSizeInBytes : 1000000;\r\n                config.maxBatchInterval =" +
                    " !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\r\n           " +
                    "     config.enableDebug = ApplicationInsights.Util.stringToBoolOrDefault(config." +
                    "enableDebug);\r\n                config.disableExceptionTracking = (config.disable" +
                    "ExceptionTracking !== undefined && config.disableExceptionTracking !== null) ?\r\n" +
                    "                    ApplicationInsights.Util.stringToBoolOrDefault(config.disabl" +
                    "eExceptionTracking) :\r\n                    false;\r\n                config.disabl" +
                    "eTelemetry = ApplicationInsights.Util.stringToBoolOrDefault(config.disableTeleme" +
                    "try);\r\n                config.verboseLogging = ApplicationInsights.Util.stringTo" +
                    "BoolOrDefault(config.verboseLogging);\r\n                config.emitLineDelimitedJ" +
                    "son = ApplicationInsights.Util.stringToBoolOrDefault(config.emitLineDelimitedJso" +
                    "n);\r\n                config.diagnosticLogInterval = config.diagnosticLogInterval" +
                    " || 10000;\r\n                config.autoTrackPageVisitTime = ApplicationInsights." +
                    "Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n                if (" +
                    "isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.sam" +
                    "plingPercentage >= 100) {\r\n                    config.samplingPercentage = 100;\r" +
                    "\n                }\r\n                config.disableAjaxTracking = (config.disable" +
                    "AjaxTracking !== undefined && config.disableAjaxTracking !== null) ?\r\n          " +
                    "          ApplicationInsights.Util.stringToBoolOrDefault(config.disableAjaxTrack" +
                    "ing) :\r\n                    false;\r\n                config.maxAjaxCallsPerView =" +
                    " !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\r\n       " +
                    "         config.disableCorrelationHeaders = (config.disableCorrelationHeaders !=" +
                    "= undefined && config.disableCorrelationHeaders !== null) ?\r\n                   " +
                    " ApplicationInsights.Util.stringToBoolOrDefault(config.disableCorrelationHeaders" +
                    ") :\r\n                    true;\r\n                config.disableFlushOnBeforeUnloa" +
                    "d = (config.disableFlushOnBeforeUnload !== undefined && config.disableFlushOnBef" +
                    "oreUnload !== null) ?\r\n                    ApplicationInsights.Util.stringToBool" +
                    "OrDefault(config.disableFlushOnBeforeUnload) :\r\n                    false;\r\n    " +
                    "            config.enableSessionStorageBuffer = (config.enableSessionStorageBuff" +
                    "er !== undefined && config.enableSessionStorageBuffer !== null) ?\r\n             " +
                    "       ApplicationInsights.Util.stringToBoolOrDefault(config.enableSessionStorag" +
                    "eBuffer) :\r\n                    false;\r\n                return config;\r\n        " +
                    "    };\r\n            return Initialization;\r\n        })();\r\n        ApplicationIn" +
                    "sights.Initialization = Initialization;\r\n    })(ApplicationInsights = Microsoft." +
                    "ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft || (" +
                    "Microsoft = {}));\r\n/// <reference path=\"initialization.ts\" />\r\nvar Microsoft;\r\n(" +
                    "function (Microsoft) {\r\n    var ApplicationInsights;\r\n    (function (Application" +
                    "Insights) {\r\n        \"use strict\";\r\n        try {\r\n            if (typeof window" +
                    " !== \"undefined\" && typeof JSON !== \"undefined\") {\r\n                var aiName =" +
                    " \"appInsights\";\r\n                if (window[aiName] === undefined) {\r\n          " +
                    "          Microsoft.ApplicationInsights.AppInsights.defaultConfig = Microsoft.Ap" +
                    "plicationInsights.Initialization.getDefaultConfig();\r\n                }\r\n       " +
                    "         else {\r\n                    var snippet = window[aiName] || {};\r\n      " +
                    "              var init = new Microsoft.ApplicationInsights.Initialization(snippe" +
                    "t);\r\n                    var appInsightsLocal = init.loadAppInsights();\r\n       " +
                    "             for (var field in appInsightsLocal) {\r\n                        snip" +
                    "pet[field] = appInsightsLocal[field];\r\n                    }\r\n                  " +
                    "  init.emptyQueue();\r\n                    init.pollInteralLogs(appInsightsLocal)" +
                    ";\r\n                    init.addHousekeepingBeforeUnload(appInsightsLocal);\r\n    " +
                    "            }\r\n            }\r\n        }\r\n        catch (e) {\r\n            Micros" +
                    "oft.ApplicationInsights._InternalLogging.warnToConsole(\'Failed to initialize App" +
                    "Insights JS SDK: \' + e.message);\r\n        }\r\n    })(ApplicationInsights = Micros" +
                    "oft.ApplicationInsights || (Microsoft.ApplicationInsights = {}));\r\n})(Microsoft " +
                    "|| (Microsoft = {}));\r\n/// <reference path=\"PageViewData.ts\" />\r\nvar AI;\r\n(funct" +
                    "ion (AI) {\r\n    \"use strict\";\r\n    var AjaxCallData = (function (_super) {\r\n    " +
                    "    __extends(AjaxCallData, _super);\r\n        function AjaxCallData() {\r\n       " +
                    "     _super.call(this);\r\n            this.ver = 2;\r\n            this.properties " +
                    "= {};\r\n            this.measurements = {};\r\n            _super.call(this);\r\n    " +
                    "    }\r\n        return AjaxCallData;\r\n    })(AI.PageViewData);\r\n    AI.AjaxCallDa" +
                    "ta = AjaxCallData;\r\n})(AI || (AI = {}));\r\n/// <reference path=\"Domain.ts\" />\r\nva" +
                    "r AI;\r\n(function (AI) {\r\n    \"use strict\";\r\n    var RequestData = (function (_su" +
                    "per) {\r\n        __extends(RequestData, _super);\r\n        function RequestData() " +
                    "{\r\n            _super.call(this);\r\n            this.ver = 2;\r\n            this.p" +
                    "roperties = {};\r\n            this.measurements = {};\r\n            _super.call(th" +
                    "is);\r\n        }\r\n        return RequestData;\r\n    })(Microsoft.Telemetry.Domain)" +
                    ";\r\n    AI.RequestData = RequestData;\r\n})(AI || (AI = {}));\r\n/// <reference path=" +
                    "\"Domain.ts\" />\r\n/// <reference path=\"SessionState.ts\" />\r\nvar AI;\r\n(function (AI" +
                    ") {\r\n    \"use strict\";\r\n    var SessionStateData = (function (_super) {\r\n       " +
                    " __extends(SessionStateData, _super);\r\n        function SessionStateData() {\r\n  " +
                    "          _super.call(this);\r\n            this.ver = 2;\r\n            this.state " +
                    "= AI.SessionState.Start;\r\n            _super.call(this);\r\n        }\r\n        ret" +
                    "urn SessionStateData;\r\n    })(Microsoft.Telemetry.Domain);\r\n    AI.SessionStateD" +
                    "ata = SessionStateData;\r\n})(AI || (AI = {}));\r\nvar AI;\r\n(function (AI) {\r\n    \"u" +
                    "se strict\";\r\n    (function (TestResult) {\r\n        TestResult[TestResult[\"Pass\"]" +
                    " = 0] = \"Pass\";\r\n        TestResult[TestResult[\"Fail\"] = 1] = \"Fail\";\r\n    })(AI" +
                    ".TestResult || (AI.TestResult = {}));\r\n    var TestResult = AI.TestResult;\r\n})(A" +
                    "I || (AI = {}));\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class AiJsFileBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
