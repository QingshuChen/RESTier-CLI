// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.RESTier.Cli.ProjectBuilder.VisualStudio.TextTemplate
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\t-qiche\Documents\RESTier-CLI\RESTier.CLI\ProjectBuilder\VisualStudio\TextTemplate\PackagesConfigFile.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class PackagesConfigFile : PackagesConfigFileBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<packages>\r\n  <package id=\"EntityFramewor" +
                    "k\" version=\"6.1.3\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.Applica" +
                    "tionInsights\" version=\"2.1.0\" targetFramework=\"net452\" />\r\n  <package id=\"Micros" +
                    "oft.ApplicationInsights.Agent.Intercept\" version=\"1.2.1\" targetFramework=\"net452" +
                    "\" />\r\n  <package id=\"Microsoft.ApplicationInsights.DependencyCollector\" version=" +
                    "\"2.1.0\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.ApplicationInsight" +
                    "s.JavaScript\" version=\"0.22.19-build00125\" targetFramework=\"net452\" />\r\n  <packa" +
                    "ge id=\"Microsoft.ApplicationInsights.PerfCounterCollector\" version=\"2.1.0\" targe" +
                    "tFramework=\"net452\" />\r\n  <package id=\"Microsoft.ApplicationInsights.Web\" versio" +
                    "n=\"2.1.0\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.ApplicationInsig" +
                    "hts.WindowsServer\" version=\"2.1.0\" targetFramework=\"net452\" />\r\n  <package id=\"M" +
                    "icrosoft.ApplicationInsights.WindowsServer.TelemetryChannel\" version=\"2.1.0\" tar" +
                    "getFramework=\"net452\" />\r\n  <package id=\"Microsoft.AspNet.OData\" version=\"5.9.0\"" +
                    " targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.AspNet.WebApi\" version=\"5" +
                    ".2.3\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.AspNet.WebApi.Client" +
                    "\" version=\"5.2.3\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.AspNet.W" +
                    "ebApi.Core\" version=\"5.2.3\" targetFramework=\"net452\" />\r\n  <package id=\"Microsof" +
                    "t.AspNet.WebApi.WebHost\" version=\"5.2.3\" targetFramework=\"net452\" />\r\n  <package" +
                    " id=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform\" version=\"1.0.0\" targetF" +
                    "ramework=\"net452\" />\r\n  <package id=\"Microsoft.Extensions.DependencyInjection\" v" +
                    "ersion=\"1.0.0-rc2-final\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.E" +
                    "xtensions.DependencyInjection.Abstractions\" version=\"1.0.0-rc2-final\" targetFram" +
                    "ework=\"net452\" />\r\n  <package id=\"Microsoft.Net.Compilers\" version=\"1.0.0\" targe" +
                    "tFramework=\"net452\" developmentDependency=\"true\" />\r\n  <package id=\"Microsoft.OD" +
                    "ata.Core\" version=\"6.15.0\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft" +
                    ".OData.Edm\" version=\"6.15.0\" targetFramework=\"net452\" />\r\n  <package id=\"Microso" +
                    "ft.Restier\" version=\"0.5.0-beta\" targetFramework=\"net452\" />\r\n  <package id=\"Mic" +
                    "rosoft.Restier.Core\" version=\"0.5.0-beta\" targetFramework=\"net452\" />\r\n  <packag" +
                    "e id=\"Microsoft.Restier.Providers.EntityFramework\" version=\"0.5.0-beta\" targetFr" +
                    "amework=\"net452\" />\r\n  <package id=\"Microsoft.Restier.Publishers.OData\" version=" +
                    "\"0.5.0-beta\" targetFramework=\"net452\" />\r\n  <package id=\"Microsoft.Spatial\" vers" +
                    "ion=\"6.15.0\" targetFramework=\"net452\" />\r\n  <package id=\"Newtonsoft.Json\" versio" +
                    "n=\"6.0.4\" targetFramework=\"net452\" />\r\n  <package id=\"System.Collections\" versio" +
                    "n=\"4.0.11-rc2-24027\" targetFramework=\"net452\" />\r\n  <package id=\"System.Collecti" +
                    "ons.Concurrent\" version=\"4.0.12-rc2-24027\" targetFramework=\"net452\" />\r\n  <packa" +
                    "ge id=\"System.ComponentModel\" version=\"4.0.1-rc2-24027\" targetFramework=\"net452\"" +
                    " />\r\n  <package id=\"System.Diagnostics.Debug\" version=\"4.0.11-rc2-24027\" targetF" +
                    "ramework=\"net452\" />\r\n  <package id=\"System.Globalization\" version=\"4.0.11-rc2-2" +
                    "4027\" targetFramework=\"net452\" />\r\n  <package id=\"System.Linq\" version=\"4.1.0-rc" +
                    "2-24027\" targetFramework=\"net452\" />\r\n  <package id=\"System.Linq.Expressions\" ve" +
                    "rsion=\"4.0.11-rc2-24027\" targetFramework=\"net452\" />\r\n  <package id=\"System.Refl" +
                    "ection\" version=\"4.1.0-rc2-24027\" targetFramework=\"net452\" />\r\n  <package id=\"Sy" +
                    "stem.Resources.ResourceManager\" version=\"4.0.1-rc2-24027\" targetFramework=\"net45" +
                    "2\" />\r\n  <package id=\"System.Runtime.Extensions\" version=\"4.1.0-rc2-24027\" targe" +
                    "tFramework=\"net452\" />\r\n  <package id=\"System.Threading\" version=\"4.0.11-rc2-240" +
                    "27\" targetFramework=\"net452\" />\r\n  <package id=\"System.Threading.Tasks\" version=" +
                    "\"4.0.11-rc2-24027\" targetFramework=\"net452\" />\r\n</packages>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class PackagesConfigFileBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
